
F401-Harvest-Studio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000878c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  08008930  08008930  00018930  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bb0  08008bb0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08008bb0  08008bb0  00018bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bb8  08008bb8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bb8  08008bb8  00018bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008bbc  08008bbc  00018bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008bc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  20000078  08008c38  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  08008c38  00020324  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001204c  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fc8  00000000  00000000  000320f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa0  00000000  00000000  000340c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f10  00000000  00000000  00035060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017fb4  00000000  00000000  00035f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000123d6  00000000  00000000  0004df24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c55d  00000000  00000000  000602fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fc857  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d94  00000000  00000000  000fc8ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008914 	.word	0x08008914

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08008914 	.word	0x08008914

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b96e 	b.w	8000f8c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468c      	mov	ip, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8083 	bne.w	8000dde <__udivmoddi4+0x116>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4617      	mov	r7, r2
 8000cdc:	d947      	bls.n	8000d6e <__udivmoddi4+0xa6>
 8000cde:	fab2 f282 	clz	r2, r2
 8000ce2:	b142      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	f1c2 0020 	rsb	r0, r2, #32
 8000ce8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cec:	4091      	lsls	r1, r2
 8000cee:	4097      	lsls	r7, r2
 8000cf0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbbc f6f8 	udiv	r6, ip, r8
 8000d00:	fa1f fe87 	uxth.w	lr, r7
 8000d04:	fb08 c116 	mls	r1, r8, r6, ip
 8000d08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18fb      	adds	r3, r7, r3
 8000d16:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d1a:	f080 8119 	bcs.w	8000f50 <__udivmoddi4+0x288>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8116 	bls.w	8000f50 <__udivmoddi4+0x288>
 8000d24:	3e02      	subs	r6, #2
 8000d26:	443b      	add	r3, r7
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d30:	fb08 3310 	mls	r3, r8, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d3c:	45a6      	cmp	lr, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	193c      	adds	r4, r7, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d46:	f080 8105 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d4a:	45a6      	cmp	lr, r4
 8000d4c:	f240 8102 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d50:	3802      	subs	r0, #2
 8000d52:	443c      	add	r4, r7
 8000d54:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d58:	eba4 040e 	sub.w	r4, r4, lr
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	b11d      	cbz	r5, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c5 4300 	strd	r4, r3, [r5]
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	b902      	cbnz	r2, 8000d72 <__udivmoddi4+0xaa>
 8000d70:	deff      	udf	#255	; 0xff
 8000d72:	fab2 f282 	clz	r2, r2
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	d150      	bne.n	8000e1c <__udivmoddi4+0x154>
 8000d7a:	1bcb      	subs	r3, r1, r7
 8000d7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d80:	fa1f f887 	uxth.w	r8, r7
 8000d84:	2601      	movs	r6, #1
 8000d86:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d8a:	0c21      	lsrs	r1, r4, #16
 8000d8c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb08 f30c 	mul.w	r3, r8, ip
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0xe2>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	f200 80e9 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1ac9      	subs	r1, r1, r3
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000db8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x10c>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x10a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80d9 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e7bf      	b.n	8000d5e <__udivmoddi4+0x96>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0x12e>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80b1 	beq.w	8000f4a <__udivmoddi4+0x282>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x1cc>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0x140>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80b8 	bhi.w	8000f78 <__udivmoddi4+0x2b0>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	468c      	mov	ip, r1
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0a8      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000e16:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e1a:	e7a5      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f603 	lsr.w	r6, r0, r3
 8000e24:	4097      	lsls	r7, r2
 8000e26:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e2e:	40d9      	lsrs	r1, r3
 8000e30:	4330      	orrs	r0, r6
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e38:	fa1f f887 	uxth.w	r8, r7
 8000e3c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e44:	fb06 f108 	mul.w	r1, r6, r8
 8000e48:	4299      	cmp	r1, r3
 8000e4a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4e:	d909      	bls.n	8000e64 <__udivmoddi4+0x19c>
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e56:	f080 808d 	bcs.w	8000f74 <__udivmoddi4+0x2ac>
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	f240 808a 	bls.w	8000f74 <__udivmoddi4+0x2ac>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	443b      	add	r3, r7
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b281      	uxth	r1, r0
 8000e68:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e74:	fb00 f308 	mul.w	r3, r0, r8
 8000e78:	428b      	cmp	r3, r1
 8000e7a:	d907      	bls.n	8000e8c <__udivmoddi4+0x1c4>
 8000e7c:	1879      	adds	r1, r7, r1
 8000e7e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e82:	d273      	bcs.n	8000f6c <__udivmoddi4+0x2a4>
 8000e84:	428b      	cmp	r3, r1
 8000e86:	d971      	bls.n	8000f6c <__udivmoddi4+0x2a4>
 8000e88:	3802      	subs	r0, #2
 8000e8a:	4439      	add	r1, r7
 8000e8c:	1acb      	subs	r3, r1, r3
 8000e8e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e92:	e778      	b.n	8000d86 <__udivmoddi4+0xbe>
 8000e94:	f1c6 0c20 	rsb	ip, r6, #32
 8000e98:	fa03 f406 	lsl.w	r4, r3, r6
 8000e9c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ea0:	431c      	orrs	r4, r3
 8000ea2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000eae:	fa21 f10c 	lsr.w	r1, r1, ip
 8000eb2:	431f      	orrs	r7, r3
 8000eb4:	0c3b      	lsrs	r3, r7, #16
 8000eb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eba:	fa1f f884 	uxth.w	r8, r4
 8000ebe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ec2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ec6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eca:	458a      	cmp	sl, r1
 8000ecc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x220>
 8000ed6:	1861      	adds	r1, r4, r1
 8000ed8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000edc:	d248      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000ede:	458a      	cmp	sl, r1
 8000ee0:	d946      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000ee2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ee6:	4421      	add	r1, r4
 8000ee8:	eba1 010a 	sub.w	r1, r1, sl
 8000eec:	b2bf      	uxth	r7, r7
 8000eee:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ef2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ef6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000efa:	fb00 f808 	mul.w	r8, r0, r8
 8000efe:	45b8      	cmp	r8, r7
 8000f00:	d907      	bls.n	8000f12 <__udivmoddi4+0x24a>
 8000f02:	19e7      	adds	r7, r4, r7
 8000f04:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f08:	d22e      	bcs.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0a:	45b8      	cmp	r8, r7
 8000f0c:	d92c      	bls.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0e:	3802      	subs	r0, #2
 8000f10:	4427      	add	r7, r4
 8000f12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f16:	eba7 0708 	sub.w	r7, r7, r8
 8000f1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f1e:	454f      	cmp	r7, r9
 8000f20:	46c6      	mov	lr, r8
 8000f22:	4649      	mov	r1, r9
 8000f24:	d31a      	bcc.n	8000f5c <__udivmoddi4+0x294>
 8000f26:	d017      	beq.n	8000f58 <__udivmoddi4+0x290>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x27a>
 8000f2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f36:	40f2      	lsrs	r2, r6
 8000f38:	ea4c 0202 	orr.w	r2, ip, r2
 8000f3c:	40f7      	lsrs	r7, r6
 8000f3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f42:	2600      	movs	r6, #0
 8000f44:	4631      	mov	r1, r6
 8000f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e70b      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6fd      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f58:	4543      	cmp	r3, r8
 8000f5a:	d2e5      	bcs.n	8000f28 <__udivmoddi4+0x260>
 8000f5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f60:	eb69 0104 	sbc.w	r1, r9, r4
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7df      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e7d2      	b.n	8000f12 <__udivmoddi4+0x24a>
 8000f6c:	4660      	mov	r0, ip
 8000f6e:	e78d      	b.n	8000e8c <__udivmoddi4+0x1c4>
 8000f70:	4681      	mov	r9, r0
 8000f72:	e7b9      	b.n	8000ee8 <__udivmoddi4+0x220>
 8000f74:	4666      	mov	r6, ip
 8000f76:	e775      	b.n	8000e64 <__udivmoddi4+0x19c>
 8000f78:	4630      	mov	r0, r6
 8000f7a:	e74a      	b.n	8000e12 <__udivmoddi4+0x14a>
 8000f7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f80:	4439      	add	r1, r7
 8000f82:	e713      	b.n	8000dac <__udivmoddi4+0xe4>
 8000f84:	3802      	subs	r0, #2
 8000f86:	443c      	add	r4, r7
 8000f88:	e724      	b.n	8000dd4 <__udivmoddi4+0x10c>
 8000f8a:	bf00      	nop

08000f8c <__aeabi_idiv0>:
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f94:	f3bf 8f4f 	dsb	sy
}
 8000f98:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <__NVIC_SystemReset+0x24>)
 8000f9c:	68db      	ldr	r3, [r3, #12]
 8000f9e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000fa2:	4904      	ldr	r1, [pc, #16]	; (8000fb4 <__NVIC_SystemReset+0x24>)
 8000fa4:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <__NVIC_SystemReset+0x28>)
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000faa:	f3bf 8f4f 	dsb	sy
}
 8000fae:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000fb0:	bf00      	nop
 8000fb2:	e7fd      	b.n	8000fb0 <__NVIC_SystemReset+0x20>
 8000fb4:	e000ed00 	.word	0xe000ed00
 8000fb8:	05fa0004 	.word	0x05fa0004
 8000fbc:	00000000 	.word	0x00000000

08000fc0 <pot_rotate_control>:
float read_arm_encoder_value(int n);
uint16_t read_rotary_encoder_value(void);
int distance_read(void);

// ポット�??��半�?に基づ?��?1/4回転を台形制御により実�?
uint16_t pot_rotate_control(uint16_t count){
 8000fc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000fc4:	ed2d 8b02 	vpush	{d8}
 8000fc8:	b094      	sub	sp, #80	; 0x50
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	4603      	mov	r3, r0
 8000fce:	81fb      	strh	r3, [r7, #14]
	static int first = 1;
	static uint16_t need_count;
	static uint16_t now_count = 0;

	uint16_t max_speed = 10;
 8000fd0:	230a      	movs	r3, #10
 8000fd2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint16_t min_speed = 5;
 8000fd6:	2305      	movs	r3, #5
 8000fd8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	float pot_radius;
	float arm_angle;

	if (first == 1){
 8000fdc:	4be2      	ldr	r3, [pc, #904]	; (8001368 <pot_rotate_control+0x3a8>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	f040 82ff 	bne.w	80015e4 <pot_rotate_control+0x624>
		float a,b,c,d,w,r1,r2,A,B,C,D,E;
		first = 0;
 8000fe6:	4be0      	ldr	r3, [pc, #896]	; (8001368 <pot_rotate_control+0x3a8>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
		// calculate pot radius
		a = 212.5;
 8000fec:	4bdf      	ldr	r3, [pc, #892]	; (800136c <pot_rotate_control+0x3ac>)
 8000fee:	64bb      	str	r3, [r7, #72]	; 0x48
		b = 83.5;
 8000ff0:	4bdf      	ldr	r3, [pc, #892]	; (8001370 <pot_rotate_control+0x3b0>)
 8000ff2:	647b      	str	r3, [r7, #68]	; 0x44
		c = 222.5;
 8000ff4:	4bdf      	ldr	r3, [pc, #892]	; (8001374 <pot_rotate_control+0x3b4>)
 8000ff6:	643b      	str	r3, [r7, #64]	; 0x40
		d = 64.58;
 8000ff8:	4bdf      	ldr	r3, [pc, #892]	; (8001378 <pot_rotate_control+0x3b8>)
 8000ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
		w = 190.0;
 8000ffc:	4bdf      	ldr	r3, [pc, #892]	; (800137c <pot_rotate_control+0x3bc>)
 8000ffe:	63bb      	str	r3, [r7, #56]	; 0x38
		r1 = 68.97/2;
 8001000:	4bdf      	ldr	r3, [pc, #892]	; (8001380 <pot_rotate_control+0x3c0>)
 8001002:	637b      	str	r3, [r7, #52]	; 0x34
		r2 = 35.0;
 8001004:	4bdf      	ldr	r3, [pc, #892]	; (8001384 <pot_rotate_control+0x3c4>)
 8001006:	633b      	str	r3, [r7, #48]	; 0x30

		arm_angle = (read_arm_encoder_value(1) + read_arm_encoder_value(2))*M_PI/360;
 8001008:	2001      	movs	r0, #1
 800100a:	f000 fcc5 	bl	8001998 <read_arm_encoder_value>
 800100e:	eeb0 8a40 	vmov.f32	s16, s0
 8001012:	2002      	movs	r0, #2
 8001014:	f000 fcc0 	bl	8001998 <read_arm_encoder_value>
 8001018:	eef0 7a40 	vmov.f32	s15, s0
 800101c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001020:	ee17 0a90 	vmov	r0, s15
 8001024:	f7ff fa98 	bl	8000558 <__aeabi_f2d>
 8001028:	a3cb      	add	r3, pc, #812	; (adr r3, 8001358 <pot_rotate_control+0x398>)
 800102a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800102e:	f7ff faeb 	bl	8000608 <__aeabi_dmul>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	4610      	mov	r0, r2
 8001038:	4619      	mov	r1, r3
 800103a:	f04f 0200 	mov.w	r2, #0
 800103e:	4bd2      	ldr	r3, [pc, #840]	; (8001388 <pot_rotate_control+0x3c8>)
 8001040:	f7ff fc0c 	bl	800085c <__aeabi_ddiv>
 8001044:	4602      	mov	r2, r0
 8001046:	460b      	mov	r3, r1
 8001048:	4610      	mov	r0, r2
 800104a:	4619      	mov	r1, r3
 800104c:	f7ff fdd4 	bl	8000bf8 <__aeabi_d2f>
 8001050:	4603      	mov	r3, r0
 8001052:	62fb      	str	r3, [r7, #44]	; 0x2c
		A = pow(a,2) + a*w - 2*(a+w/2)*(c*sin(arm_angle) + d*cos(arm_angle)) + pow(c,2) + pow(d,2) + pow(r1,2) - pow(r2,2) + 2*b*(c*cos(arm_angle) - d*sin(arm_angle)) + pow(b,2);
 8001054:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001056:	f7ff fa7f 	bl	8000558 <__aeabi_f2d>
 800105a:	4602      	mov	r2, r0
 800105c:	460b      	mov	r3, r1
 800105e:	ed9f 1bc0 	vldr	d1, [pc, #768]	; 8001360 <pot_rotate_control+0x3a0>
 8001062:	ec43 2b10 	vmov	d0, r2, r3
 8001066:	f005 fd17 	bl	8006a98 <pow>
 800106a:	ec55 4b10 	vmov	r4, r5, d0
 800106e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001072:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800107a:	ee17 0a90 	vmov	r0, s15
 800107e:	f7ff fa6b 	bl	8000558 <__aeabi_f2d>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	4620      	mov	r0, r4
 8001088:	4629      	mov	r1, r5
 800108a:	f7ff f907 	bl	800029c <__adddf3>
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
 8001092:	4692      	mov	sl, r2
 8001094:	469b      	mov	fp, r3
 8001096:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800109a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800109e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010a2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80010a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010aa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80010ae:	ee17 0a90 	vmov	r0, s15
 80010b2:	f7ff fa51 	bl	8000558 <__aeabi_f2d>
 80010b6:	4604      	mov	r4, r0
 80010b8:	460d      	mov	r5, r1
 80010ba:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80010bc:	f7ff fa4c 	bl	8000558 <__aeabi_f2d>
 80010c0:	4680      	mov	r8, r0
 80010c2:	4689      	mov	r9, r1
 80010c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80010c6:	f7ff fa47 	bl	8000558 <__aeabi_f2d>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	ec43 2b10 	vmov	d0, r2, r3
 80010d2:	f005 fc8d 	bl	80069f0 <sin>
 80010d6:	ec53 2b10 	vmov	r2, r3, d0
 80010da:	4640      	mov	r0, r8
 80010dc:	4649      	mov	r1, r9
 80010de:	f7ff fa93 	bl	8000608 <__aeabi_dmul>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	e9c7 2300 	strd	r2, r3, [r7]
 80010ea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80010ec:	f7ff fa34 	bl	8000558 <__aeabi_f2d>
 80010f0:	4680      	mov	r8, r0
 80010f2:	4689      	mov	r9, r1
 80010f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80010f6:	f7ff fa2f 	bl	8000558 <__aeabi_f2d>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	ec43 2b10 	vmov	d0, r2, r3
 8001102:	f005 fc25 	bl	8006950 <cos>
 8001106:	ec53 2b10 	vmov	r2, r3, d0
 800110a:	4640      	mov	r0, r8
 800110c:	4649      	mov	r1, r9
 800110e:	f7ff fa7b 	bl	8000608 <__aeabi_dmul>
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	e9d7 0100 	ldrd	r0, r1, [r7]
 800111a:	f7ff f8bf 	bl	800029c <__adddf3>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	4620      	mov	r0, r4
 8001124:	4629      	mov	r1, r5
 8001126:	f7ff fa6f 	bl	8000608 <__aeabi_dmul>
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	4650      	mov	r0, sl
 8001130:	4659      	mov	r1, fp
 8001132:	f7ff f8b1 	bl	8000298 <__aeabi_dsub>
 8001136:	4602      	mov	r2, r0
 8001138:	460b      	mov	r3, r1
 800113a:	4614      	mov	r4, r2
 800113c:	461d      	mov	r5, r3
 800113e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001140:	f7ff fa0a 	bl	8000558 <__aeabi_f2d>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	ed9f 1b85 	vldr	d1, [pc, #532]	; 8001360 <pot_rotate_control+0x3a0>
 800114c:	ec43 2b10 	vmov	d0, r2, r3
 8001150:	f005 fca2 	bl	8006a98 <pow>
 8001154:	ec53 2b10 	vmov	r2, r3, d0
 8001158:	4620      	mov	r0, r4
 800115a:	4629      	mov	r1, r5
 800115c:	f7ff f89e 	bl	800029c <__adddf3>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4614      	mov	r4, r2
 8001166:	461d      	mov	r5, r3
 8001168:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800116a:	f7ff f9f5 	bl	8000558 <__aeabi_f2d>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	ed9f 1b7b 	vldr	d1, [pc, #492]	; 8001360 <pot_rotate_control+0x3a0>
 8001176:	ec43 2b10 	vmov	d0, r2, r3
 800117a:	f005 fc8d 	bl	8006a98 <pow>
 800117e:	ec53 2b10 	vmov	r2, r3, d0
 8001182:	4620      	mov	r0, r4
 8001184:	4629      	mov	r1, r5
 8001186:	f7ff f889 	bl	800029c <__adddf3>
 800118a:	4602      	mov	r2, r0
 800118c:	460b      	mov	r3, r1
 800118e:	4614      	mov	r4, r2
 8001190:	461d      	mov	r5, r3
 8001192:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001194:	f7ff f9e0 	bl	8000558 <__aeabi_f2d>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	ed9f 1b70 	vldr	d1, [pc, #448]	; 8001360 <pot_rotate_control+0x3a0>
 80011a0:	ec43 2b10 	vmov	d0, r2, r3
 80011a4:	f005 fc78 	bl	8006a98 <pow>
 80011a8:	ec53 2b10 	vmov	r2, r3, d0
 80011ac:	4620      	mov	r0, r4
 80011ae:	4629      	mov	r1, r5
 80011b0:	f7ff f874 	bl	800029c <__adddf3>
 80011b4:	4602      	mov	r2, r0
 80011b6:	460b      	mov	r3, r1
 80011b8:	4614      	mov	r4, r2
 80011ba:	461d      	mov	r5, r3
 80011bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80011be:	f7ff f9cb 	bl	8000558 <__aeabi_f2d>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	ed9f 1b66 	vldr	d1, [pc, #408]	; 8001360 <pot_rotate_control+0x3a0>
 80011ca:	ec43 2b10 	vmov	d0, r2, r3
 80011ce:	f005 fc63 	bl	8006a98 <pow>
 80011d2:	ec53 2b10 	vmov	r2, r3, d0
 80011d6:	4620      	mov	r0, r4
 80011d8:	4629      	mov	r1, r5
 80011da:	f7ff f85d 	bl	8000298 <__aeabi_dsub>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	4692      	mov	sl, r2
 80011e4:	469b      	mov	fp, r3
 80011e6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80011ea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011ee:	ee17 0a90 	vmov	r0, s15
 80011f2:	f7ff f9b1 	bl	8000558 <__aeabi_f2d>
 80011f6:	4604      	mov	r4, r0
 80011f8:	460d      	mov	r5, r1
 80011fa:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80011fc:	f7ff f9ac 	bl	8000558 <__aeabi_f2d>
 8001200:	4680      	mov	r8, r0
 8001202:	4689      	mov	r9, r1
 8001204:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001206:	f7ff f9a7 	bl	8000558 <__aeabi_f2d>
 800120a:	4602      	mov	r2, r0
 800120c:	460b      	mov	r3, r1
 800120e:	ec43 2b10 	vmov	d0, r2, r3
 8001212:	f005 fb9d 	bl	8006950 <cos>
 8001216:	ec53 2b10 	vmov	r2, r3, d0
 800121a:	4640      	mov	r0, r8
 800121c:	4649      	mov	r1, r9
 800121e:	f7ff f9f3 	bl	8000608 <__aeabi_dmul>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	e9c7 2300 	strd	r2, r3, [r7]
 800122a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800122c:	f7ff f994 	bl	8000558 <__aeabi_f2d>
 8001230:	4680      	mov	r8, r0
 8001232:	4689      	mov	r9, r1
 8001234:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001236:	f7ff f98f 	bl	8000558 <__aeabi_f2d>
 800123a:	4602      	mov	r2, r0
 800123c:	460b      	mov	r3, r1
 800123e:	ec43 2b10 	vmov	d0, r2, r3
 8001242:	f005 fbd5 	bl	80069f0 <sin>
 8001246:	ec53 2b10 	vmov	r2, r3, d0
 800124a:	4640      	mov	r0, r8
 800124c:	4649      	mov	r1, r9
 800124e:	f7ff f9db 	bl	8000608 <__aeabi_dmul>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	e9d7 0100 	ldrd	r0, r1, [r7]
 800125a:	f7ff f81d 	bl	8000298 <__aeabi_dsub>
 800125e:	4602      	mov	r2, r0
 8001260:	460b      	mov	r3, r1
 8001262:	4620      	mov	r0, r4
 8001264:	4629      	mov	r1, r5
 8001266:	f7ff f9cf 	bl	8000608 <__aeabi_dmul>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4650      	mov	r0, sl
 8001270:	4659      	mov	r1, fp
 8001272:	f7ff f813 	bl	800029c <__adddf3>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	4614      	mov	r4, r2
 800127c:	461d      	mov	r5, r3
 800127e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001280:	f7ff f96a 	bl	8000558 <__aeabi_f2d>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	ed9f 1b35 	vldr	d1, [pc, #212]	; 8001360 <pot_rotate_control+0x3a0>
 800128c:	ec43 2b10 	vmov	d0, r2, r3
 8001290:	f005 fc02 	bl	8006a98 <pow>
 8001294:	ec53 2b10 	vmov	r2, r3, d0
 8001298:	4620      	mov	r0, r4
 800129a:	4629      	mov	r1, r5
 800129c:	f7fe fffe 	bl	800029c <__adddf3>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	4610      	mov	r0, r2
 80012a6:	4619      	mov	r1, r3
 80012a8:	f7ff fca6 	bl	8000bf8 <__aeabi_d2f>
 80012ac:	4603      	mov	r3, r0
 80012ae:	62bb      	str	r3, [r7, #40]	; 0x28
		B = c*cos(arm_angle) - d*sin(arm_angle) + b;
 80012b0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80012b2:	f7ff f951 	bl	8000558 <__aeabi_f2d>
 80012b6:	4604      	mov	r4, r0
 80012b8:	460d      	mov	r5, r1
 80012ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80012bc:	f7ff f94c 	bl	8000558 <__aeabi_f2d>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	ec43 2b10 	vmov	d0, r2, r3
 80012c8:	f005 fb42 	bl	8006950 <cos>
 80012cc:	ec53 2b10 	vmov	r2, r3, d0
 80012d0:	4620      	mov	r0, r4
 80012d2:	4629      	mov	r1, r5
 80012d4:	f7ff f998 	bl	8000608 <__aeabi_dmul>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	4690      	mov	r8, r2
 80012de:	4699      	mov	r9, r3
 80012e0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80012e2:	f7ff f939 	bl	8000558 <__aeabi_f2d>
 80012e6:	4604      	mov	r4, r0
 80012e8:	460d      	mov	r5, r1
 80012ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80012ec:	f7ff f934 	bl	8000558 <__aeabi_f2d>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	ec43 2b10 	vmov	d0, r2, r3
 80012f8:	f005 fb7a 	bl	80069f0 <sin>
 80012fc:	ec53 2b10 	vmov	r2, r3, d0
 8001300:	4620      	mov	r0, r4
 8001302:	4629      	mov	r1, r5
 8001304:	f7ff f980 	bl	8000608 <__aeabi_dmul>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	4640      	mov	r0, r8
 800130e:	4649      	mov	r1, r9
 8001310:	f7fe ffc2 	bl	8000298 <__aeabi_dsub>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	4614      	mov	r4, r2
 800131a:	461d      	mov	r5, r3
 800131c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800131e:	f7ff f91b 	bl	8000558 <__aeabi_f2d>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	4620      	mov	r0, r4
 8001328:	4629      	mov	r1, r5
 800132a:	f7fe ffb7 	bl	800029c <__adddf3>
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	4610      	mov	r0, r2
 8001334:	4619      	mov	r1, r3
 8001336:	f7ff fc5f 	bl	8000bf8 <__aeabi_d2f>
 800133a:	4603      	mov	r3, r0
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
		C = pow((r1-r2)/2, 2)-1;
 800133e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001342:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001346:	ee77 7a67 	vsub.f32	s15, s14, s15
 800134a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800134e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001352:	ee16 0a90 	vmov	r0, s13
 8001356:	e019      	b.n	800138c <pot_rotate_control+0x3cc>
 8001358:	54442d18 	.word	0x54442d18
 800135c:	400921fb 	.word	0x400921fb
 8001360:	00000000 	.word	0x00000000
 8001364:	40000000 	.word	0x40000000
 8001368:	20000000 	.word	0x20000000
 800136c:	43548000 	.word	0x43548000
 8001370:	42a70000 	.word	0x42a70000
 8001374:	435e8000 	.word	0x435e8000
 8001378:	428128f6 	.word	0x428128f6
 800137c:	433e0000 	.word	0x433e0000
 8001380:	4209f0a4 	.word	0x4209f0a4
 8001384:	420c0000 	.word	0x420c0000
 8001388:	40768000 	.word	0x40768000
 800138c:	f7ff f8e4 	bl	8000558 <__aeabi_f2d>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	ed9f 1bc8 	vldr	d1, [pc, #800]	; 80016b8 <pot_rotate_control+0x6f8>
 8001398:	ec43 2b10 	vmov	d0, r2, r3
 800139c:	f005 fb7c 	bl	8006a98 <pow>
 80013a0:	ec51 0b10 	vmov	r0, r1, d0
 80013a4:	f04f 0200 	mov.w	r2, #0
 80013a8:	4bc5      	ldr	r3, [pc, #788]	; (80016c0 <pot_rotate_control+0x700>)
 80013aa:	f7fe ff75 	bl	8000298 <__aeabi_dsub>
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
 80013b2:	4610      	mov	r0, r2
 80013b4:	4619      	mov	r1, r3
 80013b6:	f7ff fc1f 	bl	8000bf8 <__aeabi_d2f>
 80013ba:	4603      	mov	r3, r0
 80013bc:	623b      	str	r3, [r7, #32]
		D = A/pow(B,2)*(r1-r2) - 2*r1;
 80013be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80013c0:	f7ff f8ca 	bl	8000558 <__aeabi_f2d>
 80013c4:	4604      	mov	r4, r0
 80013c6:	460d      	mov	r5, r1
 80013c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80013ca:	f7ff f8c5 	bl	8000558 <__aeabi_f2d>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	ed9f 1bb9 	vldr	d1, [pc, #740]	; 80016b8 <pot_rotate_control+0x6f8>
 80013d6:	ec43 2b10 	vmov	d0, r2, r3
 80013da:	f005 fb5d 	bl	8006a98 <pow>
 80013de:	ec53 2b10 	vmov	r2, r3, d0
 80013e2:	4620      	mov	r0, r4
 80013e4:	4629      	mov	r1, r5
 80013e6:	f7ff fa39 	bl	800085c <__aeabi_ddiv>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	4614      	mov	r4, r2
 80013f0:	461d      	mov	r5, r3
 80013f2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80013f6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80013fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013fe:	ee17 0a90 	vmov	r0, s15
 8001402:	f7ff f8a9 	bl	8000558 <__aeabi_f2d>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4620      	mov	r0, r4
 800140c:	4629      	mov	r1, r5
 800140e:	f7ff f8fb 	bl	8000608 <__aeabi_dmul>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	4614      	mov	r4, r2
 8001418:	461d      	mov	r5, r3
 800141a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800141e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001422:	ee17 0a90 	vmov	r0, s15
 8001426:	f7ff f897 	bl	8000558 <__aeabi_f2d>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	4620      	mov	r0, r4
 8001430:	4629      	mov	r1, r5
 8001432:	f7fe ff31 	bl	8000298 <__aeabi_dsub>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	4610      	mov	r0, r2
 800143c:	4619      	mov	r1, r3
 800143e:	f7ff fbdb 	bl	8000bf8 <__aeabi_d2f>
 8001442:	4603      	mov	r3, r0
 8001444:	61fb      	str	r3, [r7, #28]
		E = pow(A/(2*B),2) + pow(w/2,2) - pow(r1,2);
 8001446:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800144a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800144e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001452:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001456:	ee16 0a90 	vmov	r0, s13
 800145a:	f7ff f87d 	bl	8000558 <__aeabi_f2d>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	ed9f 1b95 	vldr	d1, [pc, #596]	; 80016b8 <pot_rotate_control+0x6f8>
 8001466:	ec43 2b10 	vmov	d0, r2, r3
 800146a:	f005 fb15 	bl	8006a98 <pow>
 800146e:	ec55 4b10 	vmov	r4, r5, d0
 8001472:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001476:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800147a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800147e:	ee16 0a90 	vmov	r0, s13
 8001482:	f7ff f869 	bl	8000558 <__aeabi_f2d>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	ed9f 1b8b 	vldr	d1, [pc, #556]	; 80016b8 <pot_rotate_control+0x6f8>
 800148e:	ec43 2b10 	vmov	d0, r2, r3
 8001492:	f005 fb01 	bl	8006a98 <pow>
 8001496:	ec53 2b10 	vmov	r2, r3, d0
 800149a:	4620      	mov	r0, r4
 800149c:	4629      	mov	r1, r5
 800149e:	f7fe fefd 	bl	800029c <__adddf3>
 80014a2:	4602      	mov	r2, r0
 80014a4:	460b      	mov	r3, r1
 80014a6:	4614      	mov	r4, r2
 80014a8:	461d      	mov	r5, r3
 80014aa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80014ac:	f7ff f854 	bl	8000558 <__aeabi_f2d>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	ed9f 1b80 	vldr	d1, [pc, #512]	; 80016b8 <pot_rotate_control+0x6f8>
 80014b8:	ec43 2b10 	vmov	d0, r2, r3
 80014bc:	f005 faec 	bl	8006a98 <pow>
 80014c0:	ec53 2b10 	vmov	r2, r3, d0
 80014c4:	4620      	mov	r0, r4
 80014c6:	4629      	mov	r1, r5
 80014c8:	f7fe fee6 	bl	8000298 <__aeabi_dsub>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4610      	mov	r0, r2
 80014d2:	4619      	mov	r1, r3
 80014d4:	f7ff fb90 	bl	8000bf8 <__aeabi_d2f>
 80014d8:	4603      	mov	r3, r0
 80014da:	61bb      	str	r3, [r7, #24]
		pot_radius = (-D -sqrt(pow(D,2) - 4*C*E))/(2*C);
 80014dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80014e0:	eef1 7a67 	vneg.f32	s15, s15
 80014e4:	ee17 3a90 	vmov	r3, s15
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff f835 	bl	8000558 <__aeabi_f2d>
 80014ee:	4604      	mov	r4, r0
 80014f0:	460d      	mov	r5, r1
 80014f2:	69f8      	ldr	r0, [r7, #28]
 80014f4:	f7ff f830 	bl	8000558 <__aeabi_f2d>
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	ed9f 1b6e 	vldr	d1, [pc, #440]	; 80016b8 <pot_rotate_control+0x6f8>
 8001500:	ec43 2b10 	vmov	d0, r2, r3
 8001504:	f005 fac8 	bl	8006a98 <pow>
 8001508:	ec59 8b10 	vmov	r8, r9, d0
 800150c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001510:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001514:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001518:	edd7 7a06 	vldr	s15, [r7, #24]
 800151c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001520:	ee17 0a90 	vmov	r0, s15
 8001524:	f7ff f818 	bl	8000558 <__aeabi_f2d>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	4640      	mov	r0, r8
 800152e:	4649      	mov	r1, r9
 8001530:	f7fe feb2 	bl	8000298 <__aeabi_dsub>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	ec43 2b17 	vmov	d7, r2, r3
 800153c:	eeb0 0a47 	vmov.f32	s0, s14
 8001540:	eef0 0a67 	vmov.f32	s1, s15
 8001544:	f005 fb56 	bl	8006bf4 <sqrt>
 8001548:	ec53 2b10 	vmov	r2, r3, d0
 800154c:	4620      	mov	r0, r4
 800154e:	4629      	mov	r1, r5
 8001550:	f7fe fea2 	bl	8000298 <__aeabi_dsub>
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	4614      	mov	r4, r2
 800155a:	461d      	mov	r5, r3
 800155c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001560:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001564:	ee17 0a90 	vmov	r0, s15
 8001568:	f7fe fff6 	bl	8000558 <__aeabi_f2d>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	4620      	mov	r0, r4
 8001572:	4629      	mov	r1, r5
 8001574:	f7ff f972 	bl	800085c <__aeabi_ddiv>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4610      	mov	r0, r2
 800157e:	4619      	mov	r1, r3
 8001580:	f7ff fb3a 	bl	8000bf8 <__aeabi_d2f>
 8001584:	4603      	mov	r3, r0
 8001586:	617b      	str	r3, [r7, #20]

		need_count = (uint16_t)pot_radius/r1 * 10 / 6 * 360 * 0.25;
 8001588:	edd7 7a05 	vldr	s15, [r7, #20]
 800158c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001590:	ee17 3a90 	vmov	r3, s15
 8001594:	b29b      	uxth	r3, r3
 8001596:	ee07 3a90 	vmov	s15, r3
 800159a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800159e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80015a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015a6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80015aa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015ae:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80015b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015b6:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80016c4 <pot_rotate_control+0x704>
 80015ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015be:	ee17 0a90 	vmov	r0, s15
 80015c2:	f7fe ffc9 	bl	8000558 <__aeabi_f2d>
 80015c6:	f04f 0200 	mov.w	r2, #0
 80015ca:	4b3f      	ldr	r3, [pc, #252]	; (80016c8 <pot_rotate_control+0x708>)
 80015cc:	f7ff f81c 	bl	8000608 <__aeabi_dmul>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	4610      	mov	r0, r2
 80015d6:	4619      	mov	r1, r3
 80015d8:	f7ff faee 	bl	8000bb8 <__aeabi_d2uiz>
 80015dc:	4603      	mov	r3, r0
 80015de:	b29a      	uxth	r2, r3
 80015e0:	4b3a      	ldr	r3, [pc, #232]	; (80016cc <pot_rotate_control+0x70c>)
 80015e2:	801a      	strh	r2, [r3, #0]
	}

	now_count += count;
 80015e4:	4b3a      	ldr	r3, [pc, #232]	; (80016d0 <pot_rotate_control+0x710>)
 80015e6:	881a      	ldrh	r2, [r3, #0]
 80015e8:	89fb      	ldrh	r3, [r7, #14]
 80015ea:	4413      	add	r3, r2
 80015ec:	b29a      	uxth	r2, r3
 80015ee:	4b38      	ldr	r3, [pc, #224]	; (80016d0 <pot_rotate_control+0x710>)
 80015f0:	801a      	strh	r2, [r3, #0]

	if (now_count < need_count/4){
 80015f2:	4b36      	ldr	r3, [pc, #216]	; (80016cc <pot_rotate_control+0x70c>)
 80015f4:	881b      	ldrh	r3, [r3, #0]
 80015f6:	089b      	lsrs	r3, r3, #2
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	4b35      	ldr	r3, [pc, #212]	; (80016d0 <pot_rotate_control+0x710>)
 80015fc:	881b      	ldrh	r3, [r3, #0]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d90b      	bls.n	800161a <pot_rotate_control+0x65a>
		// __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, (uint16_t)(4*(max_speed-min_speed)/need_count*now_count + min_speed));
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, min_speed);
 8001602:	4b34      	ldr	r3, [pc, #208]	; (80016d4 <pot_rotate_control+0x714>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800160a:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 800160c:	2201      	movs	r2, #1
 800160e:	2140      	movs	r1, #64	; 0x40
 8001610:	4831      	ldr	r0, [pc, #196]	; (80016d8 <pot_rotate_control+0x718>)
 8001612:	f002 f9c3 	bl	800399c <HAL_GPIO_WritePin>
		return 1;
 8001616:	2301      	movs	r3, #1
 8001618:	e046      	b.n	80016a8 <pot_rotate_control+0x6e8>
	}
	else if(now_count >= need_count/4 && now_count < need_count/2){
 800161a:	4b2c      	ldr	r3, [pc, #176]	; (80016cc <pot_rotate_control+0x70c>)
 800161c:	881b      	ldrh	r3, [r3, #0]
 800161e:	089b      	lsrs	r3, r3, #2
 8001620:	b29a      	uxth	r2, r3
 8001622:	4b2b      	ldr	r3, [pc, #172]	; (80016d0 <pot_rotate_control+0x710>)
 8001624:	881b      	ldrh	r3, [r3, #0]
 8001626:	429a      	cmp	r2, r3
 8001628:	d813      	bhi.n	8001652 <pot_rotate_control+0x692>
 800162a:	4b28      	ldr	r3, [pc, #160]	; (80016cc <pot_rotate_control+0x70c>)
 800162c:	881b      	ldrh	r3, [r3, #0]
 800162e:	085b      	lsrs	r3, r3, #1
 8001630:	b29a      	uxth	r2, r3
 8001632:	4b27      	ldr	r3, [pc, #156]	; (80016d0 <pot_rotate_control+0x710>)
 8001634:	881b      	ldrh	r3, [r3, #0]
 8001636:	429a      	cmp	r2, r3
 8001638:	d90b      	bls.n	8001652 <pot_rotate_control+0x692>
		// __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, max_speed);
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, min_speed);
 800163a:	4b26      	ldr	r3, [pc, #152]	; (80016d4 <pot_rotate_control+0x714>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8001642:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001644:	2201      	movs	r2, #1
 8001646:	2140      	movs	r1, #64	; 0x40
 8001648:	4823      	ldr	r0, [pc, #140]	; (80016d8 <pot_rotate_control+0x718>)
 800164a:	f002 f9a7 	bl	800399c <HAL_GPIO_WritePin>
		return 2;
 800164e:	2302      	movs	r3, #2
 8001650:	e02a      	b.n	80016a8 <pot_rotate_control+0x6e8>
	}
	else if(now_count >= need_count/2 && now_count < need_count){
 8001652:	4b1e      	ldr	r3, [pc, #120]	; (80016cc <pot_rotate_control+0x70c>)
 8001654:	881b      	ldrh	r3, [r3, #0]
 8001656:	085b      	lsrs	r3, r3, #1
 8001658:	b29a      	uxth	r2, r3
 800165a:	4b1d      	ldr	r3, [pc, #116]	; (80016d0 <pot_rotate_control+0x710>)
 800165c:	881b      	ldrh	r3, [r3, #0]
 800165e:	429a      	cmp	r2, r3
 8001660:	d811      	bhi.n	8001686 <pot_rotate_control+0x6c6>
 8001662:	4b1b      	ldr	r3, [pc, #108]	; (80016d0 <pot_rotate_control+0x710>)
 8001664:	881a      	ldrh	r2, [r3, #0]
 8001666:	4b19      	ldr	r3, [pc, #100]	; (80016cc <pot_rotate_control+0x70c>)
 8001668:	881b      	ldrh	r3, [r3, #0]
 800166a:	429a      	cmp	r2, r3
 800166c:	d20b      	bcs.n	8001686 <pot_rotate_control+0x6c6>
		// __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, (uint16_t)(2*min_speed*(1 - now_count/need_count)));
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, min_speed);
 800166e:	4b19      	ldr	r3, [pc, #100]	; (80016d4 <pot_rotate_control+0x714>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8001676:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001678:	2201      	movs	r2, #1
 800167a:	2140      	movs	r1, #64	; 0x40
 800167c:	4816      	ldr	r0, [pc, #88]	; (80016d8 <pot_rotate_control+0x718>)
 800167e:	f002 f98d 	bl	800399c <HAL_GPIO_WritePin>
		return 3;
 8001682:	2303      	movs	r3, #3
 8001684:	e010      	b.n	80016a8 <pot_rotate_control+0x6e8>
	}
	else{
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8001686:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <pot_rotate_control+0x714>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2200      	movs	r2, #0
 800168c:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 800168e:	2201      	movs	r2, #1
 8001690:	2140      	movs	r1, #64	; 0x40
 8001692:	4811      	ldr	r0, [pc, #68]	; (80016d8 <pot_rotate_control+0x718>)
 8001694:	f002 f982 	bl	800399c <HAL_GPIO_WritePin>
		first = 1;
 8001698:	4b10      	ldr	r3, [pc, #64]	; (80016dc <pot_rotate_control+0x71c>)
 800169a:	2201      	movs	r2, #1
 800169c:	601a      	str	r2, [r3, #0]
		now_count = 0;
 800169e:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <pot_rotate_control+0x710>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	801a      	strh	r2, [r3, #0]
		return 65535;
 80016a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
	}
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3750      	adds	r7, #80	; 0x50
 80016ac:	46bd      	mov	sp, r7
 80016ae:	ecbd 8b02 	vpop	{d8}
 80016b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016b6:	bf00      	nop
 80016b8:	00000000 	.word	0x00000000
 80016bc:	40000000 	.word	0x40000000
 80016c0:	3ff00000 	.word	0x3ff00000
 80016c4:	43b40000 	.word	0x43b40000
 80016c8:	3fd00000 	.word	0x3fd00000
 80016cc:	20000094 	.word	0x20000094
 80016d0:	20000096 	.word	0x20000096
 80016d4:	200001ac 	.word	0x200001ac
 80016d8:	40020800 	.word	0x40020800
 80016dc:	20000000 	.word	0x20000000

080016e0 <dual_arm_control>:

void dual_arm_control(float target_angle){
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	ed87 0a01 	vstr	s0, [r7, #4]
	float sensor_angle;
	int pid_value;

	/* left arm control */
	sensor_angle = read_arm_encoder_value(1);
 80016ea:	2001      	movs	r0, #1
 80016ec:	f000 f954 	bl	8001998 <read_arm_encoder_value>
 80016f0:	ed87 0a03 	vstr	s0, [r7, #12]
	pid_value = motor_pid(1, sensor_angle, target_angle, 0);
 80016f4:	2100      	movs	r1, #0
 80016f6:	edd7 0a01 	vldr	s1, [r7, #4]
 80016fa:	ed97 0a03 	vldr	s0, [r7, #12]
 80016fe:	2001      	movs	r0, #1
 8001700:	f000 f84a 	bl	8001798 <motor_pid>
 8001704:	60b8      	str	r0, [r7, #8]
	if (pid_value > 0){
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	2b00      	cmp	r3, #0
 800170a:	dd05      	ble.n	8001718 <dual_arm_control+0x38>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800170c:	2201      	movs	r2, #1
 800170e:	2120      	movs	r1, #32
 8001710:	481d      	ldr	r0, [pc, #116]	; (8001788 <dual_arm_control+0xa8>)
 8001712:	f002 f943 	bl	800399c <HAL_GPIO_WritePin>
 8001716:	e004      	b.n	8001722 <dual_arm_control+0x42>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001718:	2200      	movs	r2, #0
 800171a:	2120      	movs	r1, #32
 800171c:	481a      	ldr	r0, [pc, #104]	; (8001788 <dual_arm_control+0xa8>)
 800171e:	f002 f93d 	bl	800399c <HAL_GPIO_WritePin>
	}
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, abs(pid_value));
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001728:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800172c:	4b17      	ldr	r3, [pc, #92]	; (800178c <dual_arm_control+0xac>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	635a      	str	r2, [r3, #52]	; 0x34

	/* right arm control */
	sensor_angle = read_arm_encoder_value(2);
 8001732:	2002      	movs	r0, #2
 8001734:	f000 f930 	bl	8001998 <read_arm_encoder_value>
 8001738:	ed87 0a03 	vstr	s0, [r7, #12]
	pid_value = motor_pid(2, sensor_angle, target_angle, 0);
 800173c:	2100      	movs	r1, #0
 800173e:	edd7 0a01 	vldr	s1, [r7, #4]
 8001742:	ed97 0a03 	vldr	s0, [r7, #12]
 8001746:	2002      	movs	r0, #2
 8001748:	f000 f826 	bl	8001798 <motor_pid>
 800174c:	60b8      	str	r0, [r7, #8]
	if (pid_value > 0){
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	2b00      	cmp	r3, #0
 8001752:	dd06      	ble.n	8001762 <dual_arm_control+0x82>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001754:	2201      	movs	r2, #1
 8001756:	f44f 7100 	mov.w	r1, #512	; 0x200
 800175a:	480d      	ldr	r0, [pc, #52]	; (8001790 <dual_arm_control+0xb0>)
 800175c:	f002 f91e 	bl	800399c <HAL_GPIO_WritePin>
 8001760:	e005      	b.n	800176e <dual_arm_control+0x8e>
	}
	else{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001762:	2200      	movs	r2, #0
 8001764:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001768:	4809      	ldr	r0, [pc, #36]	; (8001790 <dual_arm_control+0xb0>)
 800176a:	f002 f917 	bl	800399c <HAL_GPIO_WritePin>
	}
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, abs(pid_value));
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001774:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001778:	4b04      	ldr	r3, [pc, #16]	; (800178c <dual_arm_control+0xac>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800177e:	bf00      	nop
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40020400 	.word	0x40020400
 800178c:	200001ac 	.word	0x200001ac
 8001790:	40020000 	.word	0x40020000
 8001794:	00000000 	.word	0x00000000

08001798 <motor_pid>:
/* n: 1 or 2(モータ番号)、sensor_angle: エンコー?��?の出力角度、target_angle: 目標角度、reset: 0 or 1??��?integral?��?0にするかど?��?か�?*/
int motor_pid(int n, float sensor_angle, float target_angle, int reset){
 8001798:	b5b0      	push	{r4, r5, r7, lr}
 800179a:	b088      	sub	sp, #32
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	ed87 0a02 	vstr	s0, [r7, #8]
 80017a4:	edc7 0a01 	vstr	s1, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
	static signed long diff[2][2];
	static float integral[2];
	float p, i, d;
	if (reset == 1){
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d106      	bne.n	80017be <motor_pid+0x26>
		integral[n] = 0;
 80017b0:	4a75      	ldr	r2, [pc, #468]	; (8001988 <motor_pid+0x1f0>)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	4413      	add	r3, r2
 80017b8:	f04f 0200 	mov.w	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
	}
	diff[n][0] = diff[n][1];
 80017be:	4a73      	ldr	r2, [pc, #460]	; (800198c <motor_pid+0x1f4>)
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	4413      	add	r3, r2
 80017c6:	685a      	ldr	r2, [r3, #4]
 80017c8:	4970      	ldr	r1, [pc, #448]	; (800198c <motor_pid+0x1f4>)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	diff[n][1] = sensor_angle - target_angle;
 80017d0:	ed97 7a02 	vldr	s14, [r7, #8]
 80017d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80017d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017e0:	ee17 1a90 	vmov	r1, s15
 80017e4:	4a69      	ldr	r2, [pc, #420]	; (800198c <motor_pid+0x1f4>)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	4413      	add	r3, r2
 80017ec:	6059      	str	r1, [r3, #4]
	integral[n] += (diff[n][0] + diff[n][1])/2.0 * DELTA_T;
 80017ee:	4a66      	ldr	r2, [pc, #408]	; (8001988 <motor_pid+0x1f0>)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4413      	add	r3, r2
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7fe fead 	bl	8000558 <__aeabi_f2d>
 80017fe:	4604      	mov	r4, r0
 8001800:	460d      	mov	r5, r1
 8001802:	4a62      	ldr	r2, [pc, #392]	; (800198c <motor_pid+0x1f4>)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800180a:	4960      	ldr	r1, [pc, #384]	; (800198c <motor_pid+0x1f4>)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	440b      	add	r3, r1
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	4413      	add	r3, r2
 8001816:	4618      	mov	r0, r3
 8001818:	f7fe fe8c 	bl	8000534 <__aeabi_i2d>
 800181c:	f04f 0200 	mov.w	r2, #0
 8001820:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001824:	f7ff f81a 	bl	800085c <__aeabi_ddiv>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	4610      	mov	r0, r2
 800182e:	4619      	mov	r1, r3
 8001830:	a351      	add	r3, pc, #324	; (adr r3, 8001978 <motor_pid+0x1e0>)
 8001832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001836:	f7fe fee7 	bl	8000608 <__aeabi_dmul>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4620      	mov	r0, r4
 8001840:	4629      	mov	r1, r5
 8001842:	f7fe fd2b 	bl	800029c <__adddf3>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	4610      	mov	r0, r2
 800184c:	4619      	mov	r1, r3
 800184e:	f7ff f9d3 	bl	8000bf8 <__aeabi_d2f>
 8001852:	4602      	mov	r2, r0
 8001854:	494c      	ldr	r1, [pc, #304]	; (8001988 <motor_pid+0x1f0>)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	440b      	add	r3, r1
 800185c:	601a      	str	r2, [r3, #0]
	p = P_GAIN * diff[n][1];
 800185e:	4a4b      	ldr	r2, [pc, #300]	; (800198c <motor_pid+0x1f4>)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	4413      	add	r3, r2
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	4618      	mov	r0, r3
 800186a:	f7fe fe63 	bl	8000534 <__aeabi_i2d>
 800186e:	f04f 0200 	mov.w	r2, #0
 8001872:	4b47      	ldr	r3, [pc, #284]	; (8001990 <motor_pid+0x1f8>)
 8001874:	f7fe fec8 	bl	8000608 <__aeabi_dmul>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4610      	mov	r0, r2
 800187e:	4619      	mov	r1, r3
 8001880:	f7ff f9ba 	bl	8000bf8 <__aeabi_d2f>
 8001884:	4603      	mov	r3, r0
 8001886:	61fb      	str	r3, [r7, #28]
	i = I_GAIN * integral[n];
 8001888:	4a3f      	ldr	r2, [pc, #252]	; (8001988 <motor_pid+0x1f0>)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	4413      	add	r3, r2
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f7fe fe60 	bl	8000558 <__aeabi_f2d>
 8001898:	a339      	add	r3, pc, #228	; (adr r3, 8001980 <motor_pid+0x1e8>)
 800189a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189e:	f7fe feb3 	bl	8000608 <__aeabi_dmul>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	4610      	mov	r0, r2
 80018a8:	4619      	mov	r1, r3
 80018aa:	f7ff f9a5 	bl	8000bf8 <__aeabi_d2f>
 80018ae:	4603      	mov	r3, r0
 80018b0:	61bb      	str	r3, [r7, #24]
	d = D_GAIN * (diff[n][1] - diff[n][0]) / DELTA_T;
 80018b2:	4a36      	ldr	r2, [pc, #216]	; (800198c <motor_pid+0x1f4>)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	4413      	add	r3, r2
 80018ba:	685a      	ldr	r2, [r3, #4]
 80018bc:	4933      	ldr	r1, [pc, #204]	; (800198c <motor_pid+0x1f4>)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7fe fe34 	bl	8000534 <__aeabi_i2d>
 80018cc:	a32a      	add	r3, pc, #168	; (adr r3, 8001978 <motor_pid+0x1e0>)
 80018ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d2:	f7fe fe99 	bl	8000608 <__aeabi_dmul>
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	4610      	mov	r0, r2
 80018dc:	4619      	mov	r1, r3
 80018de:	a326      	add	r3, pc, #152	; (adr r3, 8001978 <motor_pid+0x1e0>)
 80018e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e4:	f7fe ffba 	bl	800085c <__aeabi_ddiv>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	4610      	mov	r0, r2
 80018ee:	4619      	mov	r1, r3
 80018f0:	f7ff f982 	bl	8000bf8 <__aeabi_d2f>
 80018f4:	4603      	mov	r3, r0
 80018f6:	617b      	str	r3, [r7, #20]
	if (p+i+d > 5.0){
 80018f8:	ed97 7a07 	vldr	s14, [r7, #28]
 80018fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001900:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001904:	edd7 7a05 	vldr	s15, [r7, #20]
 8001908:	ee77 7a27 	vadd.f32	s15, s14, s15
 800190c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001910:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001918:	dd01      	ble.n	800191e <motor_pid+0x186>
		return 5;
 800191a:	2305      	movs	r3, #5
 800191c:	e025      	b.n	800196a <motor_pid+0x1d2>
	}
	else if (p+i+d < -5.0){
 800191e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001922:	edd7 7a06 	vldr	s15, [r7, #24]
 8001926:	ee37 7a27 	vadd.f32	s14, s14, s15
 800192a:	edd7 7a05 	vldr	s15, [r7, #20]
 800192e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001932:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 8001936:	eef4 7ac7 	vcmpe.f32	s15, s14
 800193a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800193e:	d502      	bpl.n	8001946 <motor_pid+0x1ae>
		return -5;
 8001940:	f06f 0304 	mvn.w	r3, #4
 8001944:	e011      	b.n	800196a <motor_pid+0x1d2>
	}
	else{
		return (int)p+i+d;
 8001946:	edd7 7a07 	vldr	s15, [r7, #28]
 800194a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800194e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001952:	edd7 7a06 	vldr	s15, [r7, #24]
 8001956:	ee37 7a27 	vadd.f32	s14, s14, s15
 800195a:	edd7 7a05 	vldr	s15, [r7, #20]
 800195e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001962:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001966:	ee17 3a90 	vmov	r3, s15
	}
}
 800196a:	4618      	mov	r0, r3
 800196c:	3720      	adds	r7, #32
 800196e:	46bd      	mov	sp, r7
 8001970:	bdb0      	pop	{r4, r5, r7, pc}
 8001972:	bf00      	nop
 8001974:	f3af 8000 	nop.w
 8001978:	47ae147b 	.word	0x47ae147b
 800197c:	3f847ae1 	.word	0x3f847ae1
 8001980:	9999999a 	.word	0x9999999a
 8001984:	3fa99999 	.word	0x3fa99999
 8001988:	20000098 	.word	0x20000098
 800198c:	200000a0 	.word	0x200000a0
 8001990:	3fe00000 	.word	0x3fe00000
 8001994:	00000000 	.word	0x00000000

08001998 <read_arm_encoder_value>:

float read_arm_encoder_value(int n){
 8001998:	b580      	push	{r7, lr}
 800199a:	b08c      	sub	sp, #48	; 0x30
 800199c:	af04      	add	r7, sp, #16
 800199e:	6078      	str	r0, [r7, #4]
	uint16_t RawAngle;
	double DegAngle;
	uint8_t Encoder_Buff[2];
	if (n==1){
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d10e      	bne.n	80019c4 <read_arm_encoder_value+0x2c>
		HAL_I2C_Mem_Read(&hi2c1, AS5600_DEV_ADDRESS, AS5600_REG_RAW_ANGLE,
 80019a6:	f241 3388 	movw	r3, #5000	; 0x1388
 80019aa:	9302      	str	r3, [sp, #8]
 80019ac:	2302      	movs	r3, #2
 80019ae:	9301      	str	r3, [sp, #4]
 80019b0:	f107 030c 	add.w	r3, r7, #12
 80019b4:	9300      	str	r3, [sp, #0]
 80019b6:	2301      	movs	r3, #1
 80019b8:	220c      	movs	r2, #12
 80019ba:	216c      	movs	r1, #108	; 0x6c
 80019bc:	4828      	ldr	r0, [pc, #160]	; (8001a60 <read_arm_encoder_value+0xc8>)
 80019be:	f002 f94b 	bl	8003c58 <HAL_I2C_Mem_Read>
 80019c2:	e010      	b.n	80019e6 <read_arm_encoder_value+0x4e>
					I2C_MEMADD_SIZE_8BIT, (uint8_t*)Encoder_Buff, 2, 5000);
	}
	else if (n==2){
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d10d      	bne.n	80019e6 <read_arm_encoder_value+0x4e>
		HAL_I2C_Mem_Read(&hi2c3, AS5600_DEV_ADDRESS, AS5600_REG_RAW_ANGLE,
 80019ca:	f241 3388 	movw	r3, #5000	; 0x1388
 80019ce:	9302      	str	r3, [sp, #8]
 80019d0:	2302      	movs	r3, #2
 80019d2:	9301      	str	r3, [sp, #4]
 80019d4:	f107 030c 	add.w	r3, r7, #12
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	2301      	movs	r3, #1
 80019dc:	220c      	movs	r2, #12
 80019de:	216c      	movs	r1, #108	; 0x6c
 80019e0:	4820      	ldr	r0, [pc, #128]	; (8001a64 <read_arm_encoder_value+0xcc>)
 80019e2:	f002 f939 	bl	8003c58 <HAL_I2C_Mem_Read>
					I2C_MEMADD_SIZE_8BIT, (uint8_t*)Encoder_Buff, 2, 5000);
	}
	RawAngle = (uint16_t) Encoder_Buff[0] << 8 | (uint16_t) Encoder_Buff[1];
 80019e6:	7b3b      	ldrb	r3, [r7, #12]
 80019e8:	021b      	lsls	r3, r3, #8
 80019ea:	b21a      	sxth	r2, r3
 80019ec:	7b7b      	ldrb	r3, [r7, #13]
 80019ee:	b21b      	sxth	r3, r3
 80019f0:	4313      	orrs	r3, r2
 80019f2:	b21b      	sxth	r3, r3
 80019f4:	83fb      	strh	r3, [r7, #30]
	RawAngle &= 0x0FFF;
 80019f6:	8bfb      	ldrh	r3, [r7, #30]
 80019f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019fc:	83fb      	strh	r3, [r7, #30]
	DegAngle = RawAngle * 360 / AS5600_RESOLUTION_PPR - 180.0;
 80019fe:	8bfb      	ldrh	r3, [r7, #30]
 8001a00:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001a04:	fb02 f303 	mul.w	r3, r2, r3
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	da01      	bge.n	8001a10 <read_arm_encoder_value+0x78>
 8001a0c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001a10:	131b      	asrs	r3, r3, #12
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7fe fd8e 	bl	8000534 <__aeabi_i2d>
 8001a18:	f04f 0200 	mov.w	r2, #0
 8001a1c:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <read_arm_encoder_value+0xd0>)
 8001a1e:	f7fe fc3b 	bl	8000298 <__aeabi_dsub>
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	e9c7 2304 	strd	r2, r3, [r7, #16]
	return DegAngle*0.6;
 8001a2a:	a30b      	add	r3, pc, #44	; (adr r3, 8001a58 <read_arm_encoder_value+0xc0>)
 8001a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a30:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a34:	f7fe fde8 	bl	8000608 <__aeabi_dmul>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	4619      	mov	r1, r3
 8001a40:	f7ff f8da 	bl	8000bf8 <__aeabi_d2f>
 8001a44:	4603      	mov	r3, r0
 8001a46:	ee07 3a90 	vmov	s15, r3
}
 8001a4a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a4e:	3720      	adds	r7, #32
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	f3af 8000 	nop.w
 8001a58:	33333333 	.word	0x33333333
 8001a5c:	3fe33333 	.word	0x3fe33333
 8001a60:	20000158 	.word	0x20000158
 8001a64:	200000bc 	.word	0x200000bc
 8001a68:	40668000 	.word	0x40668000

08001a6c <read_rotary_encoder_value>:

uint16_t read_rotary_encoder_value(void){
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
	uint16_t enc_buff = TIM4->CNT;
 8001a72:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <read_rotary_encoder_value+0x2c>)
 8001a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a76:	80fb      	strh	r3, [r7, #6]
	TIM4->CNT = 0;
 8001a78:	4b07      	ldr	r3, [pc, #28]	; (8001a98 <read_rotary_encoder_value+0x2c>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	625a      	str	r2, [r3, #36]	; 0x24
	if (enc_buff > 32767){
 8001a7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	da01      	bge.n	8001a8a <read_rotary_encoder_value+0x1e>
		return enc_buff;
 8001a86:	88fb      	ldrh	r3, [r7, #6]
 8001a88:	e000      	b.n	8001a8c <read_rotary_encoder_value+0x20>
	}
	else{
		return enc_buff;
 8001a8a:	88fb      	ldrh	r3, [r7, #6]
	}
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	40000800 	.word	0x40000800

08001a9c <distance_read>:

int distance_read(void){
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8001aa0:	4807      	ldr	r0, [pc, #28]	; (8001ac0 <distance_read+0x24>)
 8001aa2:	f001 f95b 	bl	8002d5c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 8001aa6:	2164      	movs	r1, #100	; 0x64
 8001aa8:	4805      	ldr	r0, [pc, #20]	; (8001ac0 <distance_read+0x24>)
 8001aaa:	f001 fa3e 	bl	8002f2a <HAL_ADC_PollForConversion>
	HAL_ADC_Stop(&hadc1);
 8001aae:	4804      	ldr	r0, [pc, #16]	; (8001ac0 <distance_read+0x24>)
 8001ab0:	f001 fa08 	bl	8002ec4 <HAL_ADC_Stop>
	return HAL_ADC_GetValue(&hadc1);
 8001ab4:	4802      	ldr	r0, [pc, #8]	; (8001ac0 <distance_read+0x24>)
 8001ab6:	f001 fac3 	bl	8003040 <HAL_ADC_GetValue>
 8001aba:	4603      	mov	r3, r0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	200001f4 	.word	0x200001f4

08001ac4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	ed2d 8b02 	vpush	{d8}
 8001aca:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8001ace:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ad0:	f001 f86a 	bl	8002ba8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ad4:	f000 f98e 	bl	8001df4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ad8:	f000 fc6a 	bl	80023b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001adc:	f000 fc3e 	bl	800235c <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8001ae0:	f000 fbe8 	bl	80022b4 <MX_TIM4_Init>
  MX_ADC1_Init();
 8001ae4:	f000 f9f2 	bl	8001ecc <MX_ADC1_Init>
  MX_I2C1_Init();
 8001ae8:	f000 fa42 	bl	8001f70 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001aec:	f000 fa6e 	bl	8001fcc <MX_I2C3_Init>
  MX_TIM1_Init();
 8001af0:	f000 fa9a 	bl	8002028 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001af4:	f000 fb70 	bl	80021d8 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001af8:	f000 fb16 	bl	8002128 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  int mode = 0;
 8001afc:	2300      	movs	r3, #0
 8001afe:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
  int pot_rotate_mode = 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
  int waiting = 0;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
  int pot_grasping = 0;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
  uint16_t is_rotating = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	f8a7 33ee 	strh.w	r3, [r7, #1006]	; 0x3ee
  uint8_t usr_buf[1000];

  /* Start PWM */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001b1a:	210c      	movs	r1, #12
 8001b1c:	48ab      	ldr	r0, [pc, #684]	; (8001dcc <main+0x308>)
 8001b1e:	f003 fa09 	bl	8004f34 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001b22:	2100      	movs	r1, #0
 8001b24:	48aa      	ldr	r0, [pc, #680]	; (8001dd0 <main+0x30c>)
 8001b26:	f003 fa05 	bl	8004f34 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001b2a:	2104      	movs	r1, #4
 8001b2c:	48a8      	ldr	r0, [pc, #672]	; (8001dd0 <main+0x30c>)
 8001b2e:	f003 fa01 	bl	8004f34 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001b32:	2108      	movs	r1, #8
 8001b34:	48a6      	ldr	r0, [pc, #664]	; (8001dd0 <main+0x30c>)
 8001b36:	f003 f9fd 	bl	8004f34 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	48a5      	ldr	r0, [pc, #660]	; (8001dd4 <main+0x310>)
 8001b3e:	f003 f9f9 	bl	8004f34 <HAL_TIM_PWM_Start>

  /* Start Encoder */
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001b42:	213c      	movs	r1, #60	; 0x3c
 8001b44:	48a4      	ldr	r0, [pc, #656]	; (8001dd8 <main+0x314>)
 8001b46:	f003 fb4b 	bl	80051e0 <HAL_TIM_Encoder_Start>
		  sprintf(usr_buf, "%d, %d, %d, %d\n\r", (int)read_arm_encoder_value(1), (int)read_arm_encoder_value(2), mode, 1);
	  }
	  */

	  /* communication */
	  sprintf(usr_buf, "%d, %d, %d, %d, %u\n\r", (int)read_arm_encoder_value(1), (int)read_arm_encoder_value(2), mode, pot_rotate_mode, is_rotating);
 8001b4a:	2001      	movs	r0, #1
 8001b4c:	f7ff ff24 	bl	8001998 <read_arm_encoder_value>
 8001b50:	eef0 7a40 	vmov.f32	s15, s0
 8001b54:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 8001b58:	2002      	movs	r0, #2
 8001b5a:	f7ff ff1d 	bl	8001998 <read_arm_encoder_value>
 8001b5e:	eef0 7a40 	vmov.f32	s15, s0
 8001b62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b66:	f8b7 33ee 	ldrh.w	r3, [r7, #1006]	; 0x3ee
 8001b6a:	1d38      	adds	r0, r7, #4
 8001b6c:	9302      	str	r3, [sp, #8]
 8001b6e:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8001b72:	9301      	str	r3, [sp, #4]
 8001b74:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	ee17 3a90 	vmov	r3, s15
 8001b7e:	ee18 2a10 	vmov	r2, s16
 8001b82:	4996      	ldr	r1, [pc, #600]	; (8001ddc <main+0x318>)
 8001b84:	f004 fab6 	bl	80060f4 <siprintf>

	  HAL_UART_Transmit(&huart2, usr_buf, strlen(usr_buf), 100);
 8001b88:	1d3b      	adds	r3, r7, #4
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7fe fb28 	bl	80001e0 <strlen>
 8001b90:	4603      	mov	r3, r0
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	1d39      	adds	r1, r7, #4
 8001b96:	2364      	movs	r3, #100	; 0x64
 8001b98:	4891      	ldr	r0, [pc, #580]	; (8001de0 <main+0x31c>)
 8001b9a:	f003 ffb0 	bl	8005afe <HAL_UART_Transmit>
 8001b9e:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8001ba2:	2b04      	cmp	r3, #4
 8001ba4:	f200 8104 	bhi.w	8001db0 <main+0x2ec>
 8001ba8:	a201      	add	r2, pc, #4	; (adr r2, 8001bb0 <main+0xec>)
 8001baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bae:	bf00      	nop
 8001bb0:	08001bc5 	.word	0x08001bc5
 8001bb4:	08001c11 	.word	0x08001c11
 8001bb8:	08001c45 	.word	0x08001c45
 8001bbc:	08001cdb 	.word	0x08001cdb
 8001bc0:	08001d7b 	.word	0x08001d7b
	  switch(mode){
	  case 0:
		  /*アー?��?角を0度に設?��?*/
		  dual_arm_control(0.0);
 8001bc4:	ed9f 0a87 	vldr	s0, [pc, #540]	; 8001de4 <main+0x320>
 8001bc8:	f7ff fd8a 	bl	80016e0 <dual_arm_control>
		  /*把持司令信号を取得するまで?��??��?*/
		  /*信号取�?->mode=1*/
		  if (distance_read() < 1000){
 8001bcc:	f7ff ff66 	bl	8001a9c <distance_read>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bd6:	da02      	bge.n	8001bde <main+0x11a>
			  pot_grasping = 0;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
		  }
		  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 1 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 0 && pot_grasping == 0){
 8001bde:	2140      	movs	r1, #64	; 0x40
 8001be0:	4881      	ldr	r0, [pc, #516]	; (8001de8 <main+0x324>)
 8001be2:	f001 fec3 	bl	800396c <HAL_GPIO_ReadPin>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	f040 80d8 	bne.w	8001d9e <main+0x2da>
 8001bee:	2180      	movs	r1, #128	; 0x80
 8001bf0:	487d      	ldr	r0, [pc, #500]	; (8001de8 <main+0x324>)
 8001bf2:	f001 febb 	bl	800396c <HAL_GPIO_ReadPin>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f040 80d0 	bne.w	8001d9e <main+0x2da>
 8001bfe:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	; 0x3f0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f040 80cb 	bne.w	8001d9e <main+0x2da>
			  mode = 1;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
		  }

		  break;
 8001c0e:	e0c6      	b.n	8001d9e <main+0x2da>

	  case 1:
		  /*アー?��?角を0度に設?��?*/
		  dual_arm_control(0.0);
 8001c10:	ed9f 0a74 	vldr	s0, [pc, #464]	; 8001de4 <main+0x320>
 8001c14:	f7ff fd64 	bl	80016e0 <dual_arm_control>
		  /*測距センサの閾値を上回るまで?��??��?*/
		  if (distance_read() > 3000 && pot_grasping == 0){
 8001c18:	f7ff ff40 	bl	8001a9c <distance_read>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001c22:	4293      	cmp	r3, r2
 8001c24:	dd0a      	ble.n	8001c3c <main+0x178>
 8001c26:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	; 0x3f0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d106      	bne.n	8001c3c <main+0x178>
			  mode = 2;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
			  pot_grasping = 1;
 8001c34:	2301      	movs	r3, #1
 8001c36:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
		  else{
			  pot_grasping = 0;
		  }
		  /*閾値?��??��?->mode=2*/

		  break;
 8001c3a:	e0b9      	b.n	8001db0 <main+0x2ec>
			  pot_grasping = 0;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
		  break;
 8001c42:	e0b5      	b.n	8001db0 <main+0x2ec>

	  case 2:
		  /*アー?��?を動?��?,スイ?��?�?��??��接触判定が起こるまで*/

		  /* left arm control */
		  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==1){
 8001c44:	2110      	movs	r1, #16
 8001c46:	4868      	ldr	r0, [pc, #416]	; (8001de8 <main+0x324>)
 8001c48:	f001 fe90 	bl	800396c <HAL_GPIO_ReadPin>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d109      	bne.n	8001c66 <main+0x1a2>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001c52:	2201      	movs	r2, #1
 8001c54:	2120      	movs	r1, #32
 8001c56:	4865      	ldr	r0, [pc, #404]	; (8001dec <main+0x328>)
 8001c58:	f001 fea0 	bl	800399c <HAL_GPIO_WritePin>
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 5);
 8001c5c:	4b5c      	ldr	r3, [pc, #368]	; (8001dd0 <main+0x30c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2205      	movs	r2, #5
 8001c62:	635a      	str	r2, [r3, #52]	; 0x34
 8001c64:	e00a      	b.n	8001c7c <main+0x1b8>
		  }
		  else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==0){
 8001c66:	2110      	movs	r1, #16
 8001c68:	485f      	ldr	r0, [pc, #380]	; (8001de8 <main+0x324>)
 8001c6a:	f001 fe7f 	bl	800396c <HAL_GPIO_ReadPin>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d103      	bne.n	8001c7c <main+0x1b8>
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001c74:	4b56      	ldr	r3, [pc, #344]	; (8001dd0 <main+0x30c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	635a      	str	r2, [r3, #52]	; 0x34
		  }

		  /* right arm control */
		  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0)==1){
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	485b      	ldr	r0, [pc, #364]	; (8001dec <main+0x328>)
 8001c80:	f001 fe74 	bl	800396c <HAL_GPIO_ReadPin>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d10a      	bne.n	8001ca0 <main+0x1dc>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c90:	4855      	ldr	r0, [pc, #340]	; (8001de8 <main+0x324>)
 8001c92:	f001 fe83 	bl	800399c <HAL_GPIO_WritePin>
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 5);
 8001c96:	4b4e      	ldr	r3, [pc, #312]	; (8001dd0 <main+0x30c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2205      	movs	r2, #5
 8001c9c:	639a      	str	r2, [r3, #56]	; 0x38
 8001c9e:	e00a      	b.n	8001cb6 <main+0x1f2>
		  }
		  else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0)==0){
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	4852      	ldr	r0, [pc, #328]	; (8001dec <main+0x328>)
 8001ca4:	f001 fe62 	bl	800396c <HAL_GPIO_ReadPin>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d103      	bne.n	8001cb6 <main+0x1f2>
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8001cae:	4b48      	ldr	r3, [pc, #288]	; (8001dd0 <main+0x30c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	639a      	str	r2, [r3, #56]	; 0x38
		  }

		  /*スイ?��?チ接触->アー?��?動作を停止,mode=3*/
		  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==0 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0)==0){
 8001cb6:	2110      	movs	r1, #16
 8001cb8:	484b      	ldr	r0, [pc, #300]	; (8001de8 <main+0x324>)
 8001cba:	f001 fe57 	bl	800396c <HAL_GPIO_ReadPin>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d16e      	bne.n	8001da2 <main+0x2de>
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	4849      	ldr	r0, [pc, #292]	; (8001dec <main+0x328>)
 8001cc8:	f001 fe50 	bl	800396c <HAL_GPIO_ReadPin>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d167      	bne.n	8001da2 <main+0x2de>
			  mode = 3;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
		  }

		  break;
 8001cd8:	e063      	b.n	8001da2 <main+0x2de>

	  case 3:
		  /*Pot rotate mode*/
		  /*ポット回転信号を受信するまで?��??��?*/
		  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 1 && pot_rotate_mode == 0){
 8001cda:	2180      	movs	r1, #128	; 0x80
 8001cdc:	4842      	ldr	r0, [pc, #264]	; (8001de8 <main+0x324>)
 8001cde:	f001 fe45 	bl	800396c <HAL_GPIO_ReadPin>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d106      	bne.n	8001cf6 <main+0x232>
 8001ce8:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d102      	bne.n	8001cf6 <main+0x232>
			  pot_rotate_mode = 1;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
		  }
		  /*受信?��?90度回転??��?��台形制御)*/
		  if (waiting == 0){
 8001cf6:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d12a      	bne.n	8001d54 <main+0x290>
			  if (pot_rotate_mode > 0 && pot_rotate_mode <= 4){
 8001cfe:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	dd1b      	ble.n	8001d3e <main+0x27a>
 8001d06:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8001d0a:	2b04      	cmp	r3, #4
 8001d0c:	dc17      	bgt.n	8001d3e <main+0x27a>
				  is_rotating = pot_rotate_control((uint16_t)read_rotary_encoder_value());
 8001d0e:	f7ff fead 	bl	8001a6c <read_rotary_encoder_value>
 8001d12:	4603      	mov	r3, r0
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff f953 	bl	8000fc0 <pot_rotate_control>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	f8a7 33ee 	strh.w	r3, [r7, #1006]	; 0x3ee
				  if(is_rotating == 65535){
 8001d20:	f8b7 33ee 	ldrh.w	r3, [r7, #1006]	; 0x3ee
 8001d24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d125      	bne.n	8001d78 <main+0x2b4>
					  pot_rotate_mode++;
 8001d2c:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8001d30:	3301      	adds	r3, #1
 8001d32:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
					  /*こ�??��まま?��?とノンストップでポットが?��?回転してしま?��?ので、新しくGPIOから入力されるまで?��?機す?��?*/
					  waiting = 1;
 8001d36:	2301      	movs	r3, #1
 8001d38:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
					  break;
 8001d3c:	e038      	b.n	8001db0 <main+0x2ec>
				  }
			  }
			  else if (pot_rotate_mode == 5){
 8001d3e:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8001d42:	2b05      	cmp	r3, #5
 8001d44:	d12f      	bne.n	8001da6 <main+0x2e2>
				  pot_rotate_mode = 0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
				  mode = 4;
 8001d4c:	2304      	movs	r3, #4
 8001d4e:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
				  break;
 8001d52:	e02d      	b.n	8001db0 <main+0x2ec>
			  }
			  /*回転信号?��?4回受信->mode=4*/
		  }
		  else if(waiting == 1){
 8001d54:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d124      	bne.n	8001da6 <main+0x2e2>
			  is_rotating = 0;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	f8a7 33ee 	strh.w	r3, [r7, #1006]	; 0x3ee
			  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 1){
 8001d62:	2180      	movs	r1, #128	; 0x80
 8001d64:	4820      	ldr	r0, [pc, #128]	; (8001de8 <main+0x324>)
 8001d66:	f001 fe01 	bl	800396c <HAL_GPIO_ReadPin>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d11c      	bne.n	8001daa <main+0x2e6>
				  waiting = 0;
 8001d70:	2300      	movs	r3, #0
 8001d72:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
			  }
			  break;
 8001d76:	e018      	b.n	8001daa <main+0x2e6>
		  }
		  break;
 8001d78:	e015      	b.n	8001da6 <main+0x2e2>

	  case 4:
		  /*把持解除司令を受信->mode=0*/
		  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 1 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 1){
 8001d7a:	2140      	movs	r1, #64	; 0x40
 8001d7c:	481a      	ldr	r0, [pc, #104]	; (8001de8 <main+0x324>)
 8001d7e:	f001 fdf5 	bl	800396c <HAL_GPIO_ReadPin>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d112      	bne.n	8001dae <main+0x2ea>
 8001d88:	2180      	movs	r1, #128	; 0x80
 8001d8a:	4817      	ldr	r0, [pc, #92]	; (8001de8 <main+0x324>)
 8001d8c:	f001 fdee 	bl	800396c <HAL_GPIO_ReadPin>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d10b      	bne.n	8001dae <main+0x2ea>
			  mode = 0;
 8001d96:	2300      	movs	r3, #0
 8001d98:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
		  }
		  break;
 8001d9c:	e007      	b.n	8001dae <main+0x2ea>
		  break;
 8001d9e:	bf00      	nop
 8001da0:	e006      	b.n	8001db0 <main+0x2ec>
		  break;
 8001da2:	bf00      	nop
 8001da4:	e004      	b.n	8001db0 <main+0x2ec>
		  break;
 8001da6:	bf00      	nop
 8001da8:	e002      	b.n	8001db0 <main+0x2ec>
			  break;
 8001daa:	bf00      	nop
 8001dac:	e000      	b.n	8001db0 <main+0x2ec>
		  break;
 8001dae:	bf00      	nop
	  }

	  /* Received reset signal from Raspberry Pi -> System reset*/
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4) == 0){
 8001db0:	2110      	movs	r1, #16
 8001db2:	480f      	ldr	r0, [pc, #60]	; (8001df0 <main+0x32c>)
 8001db4:	f001 fdda 	bl	800396c <HAL_GPIO_ReadPin>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <main+0x2fe>
		  NVIC_SystemReset();
 8001dbe:	f7ff f8e7 	bl	8000f90 <__NVIC_SystemReset>
	  }

	  HAL_Delay(DELTA_T * 100);
 8001dc2:	2001      	movs	r0, #1
 8001dc4:	f000 ff62 	bl	8002c8c <HAL_Delay>
  {
 8001dc8:	e6bf      	b.n	8001b4a <main+0x86>
 8001dca:	bf00      	nop
 8001dcc:	2000023c 	.word	0x2000023c
 8001dd0:	200001ac 	.word	0x200001ac
 8001dd4:	20000284 	.word	0x20000284
 8001dd8:	20000110 	.word	0x20000110
 8001ddc:	08008930 	.word	0x08008930
 8001de0:	200002cc 	.word	0x200002cc
 8001de4:	00000000 	.word	0x00000000
 8001de8:	40020000 	.word	0x40020000
 8001dec:	40020400 	.word	0x40020400
 8001df0:	40020800 	.word	0x40020800

08001df4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b094      	sub	sp, #80	; 0x50
 8001df8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dfa:	f107 0320 	add.w	r3, r7, #32
 8001dfe:	2230      	movs	r2, #48	; 0x30
 8001e00:	2100      	movs	r1, #0
 8001e02:	4618      	mov	r0, r3
 8001e04:	f004 f96e 	bl	80060e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e08:	f107 030c 	add.w	r3, r7, #12
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	605a      	str	r2, [r3, #4]
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	60da      	str	r2, [r3, #12]
 8001e16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60bb      	str	r3, [r7, #8]
 8001e1c:	4b29      	ldr	r3, [pc, #164]	; (8001ec4 <SystemClock_Config+0xd0>)
 8001e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e20:	4a28      	ldr	r2, [pc, #160]	; (8001ec4 <SystemClock_Config+0xd0>)
 8001e22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e26:	6413      	str	r3, [r2, #64]	; 0x40
 8001e28:	4b26      	ldr	r3, [pc, #152]	; (8001ec4 <SystemClock_Config+0xd0>)
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e30:	60bb      	str	r3, [r7, #8]
 8001e32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e34:	2300      	movs	r3, #0
 8001e36:	607b      	str	r3, [r7, #4]
 8001e38:	4b23      	ldr	r3, [pc, #140]	; (8001ec8 <SystemClock_Config+0xd4>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001e40:	4a21      	ldr	r2, [pc, #132]	; (8001ec8 <SystemClock_Config+0xd4>)
 8001e42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e46:	6013      	str	r3, [r2, #0]
 8001e48:	4b1f      	ldr	r3, [pc, #124]	; (8001ec8 <SystemClock_Config+0xd4>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e50:	607b      	str	r3, [r7, #4]
 8001e52:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e54:	2302      	movs	r3, #2
 8001e56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e5c:	2310      	movs	r3, #16
 8001e5e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e60:	2302      	movs	r3, #2
 8001e62:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e64:	2300      	movs	r3, #0
 8001e66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001e68:	2310      	movs	r3, #16
 8001e6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001e6c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001e70:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001e72:	2304      	movs	r3, #4
 8001e74:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001e76:	2307      	movs	r3, #7
 8001e78:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e7a:	f107 0320 	add.w	r3, r7, #32
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f002 fb94 	bl	80045ac <HAL_RCC_OscConfig>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001e8a:	f000 fb5b 	bl	8002544 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e8e:	230f      	movs	r3, #15
 8001e90:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e92:	2302      	movs	r3, #2
 8001e94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e96:	2300      	movs	r3, #0
 8001e98:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e9e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ea4:	f107 030c 	add.w	r3, r7, #12
 8001ea8:	2102      	movs	r1, #2
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f002 fdf6 	bl	8004a9c <HAL_RCC_ClockConfig>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001eb6:	f000 fb45 	bl	8002544 <Error_Handler>
  }
}
 8001eba:	bf00      	nop
 8001ebc:	3750      	adds	r7, #80	; 0x50
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	40007000 	.word	0x40007000

08001ecc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ed2:	463b      	mov	r3, r7
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	609a      	str	r2, [r3, #8]
 8001edc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001ede:	4b21      	ldr	r3, [pc, #132]	; (8001f64 <MX_ADC1_Init+0x98>)
 8001ee0:	4a21      	ldr	r2, [pc, #132]	; (8001f68 <MX_ADC1_Init+0x9c>)
 8001ee2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001ee4:	4b1f      	ldr	r3, [pc, #124]	; (8001f64 <MX_ADC1_Init+0x98>)
 8001ee6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001eea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001eec:	4b1d      	ldr	r3, [pc, #116]	; (8001f64 <MX_ADC1_Init+0x98>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001ef2:	4b1c      	ldr	r3, [pc, #112]	; (8001f64 <MX_ADC1_Init+0x98>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001ef8:	4b1a      	ldr	r3, [pc, #104]	; (8001f64 <MX_ADC1_Init+0x98>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001efe:	4b19      	ldr	r3, [pc, #100]	; (8001f64 <MX_ADC1_Init+0x98>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f06:	4b17      	ldr	r3, [pc, #92]	; (8001f64 <MX_ADC1_Init+0x98>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f0c:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <MX_ADC1_Init+0x98>)
 8001f0e:	4a17      	ldr	r2, [pc, #92]	; (8001f6c <MX_ADC1_Init+0xa0>)
 8001f10:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f12:	4b14      	ldr	r3, [pc, #80]	; (8001f64 <MX_ADC1_Init+0x98>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001f18:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <MX_ADC1_Init+0x98>)
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001f1e:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <MX_ADC1_Init+0x98>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f26:	4b0f      	ldr	r3, [pc, #60]	; (8001f64 <MX_ADC1_Init+0x98>)
 8001f28:	2201      	movs	r2, #1
 8001f2a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f2c:	480d      	ldr	r0, [pc, #52]	; (8001f64 <MX_ADC1_Init+0x98>)
 8001f2e:	f000 fed1 	bl	8002cd4 <HAL_ADC_Init>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001f38:	f000 fb04 	bl	8002544 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001f40:	2301      	movs	r3, #1
 8001f42:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001f44:	2300      	movs	r3, #0
 8001f46:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f48:	463b      	mov	r3, r7
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4805      	ldr	r0, [pc, #20]	; (8001f64 <MX_ADC1_Init+0x98>)
 8001f4e:	f001 f885 	bl	800305c <HAL_ADC_ConfigChannel>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001f58:	f000 faf4 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f5c:	bf00      	nop
 8001f5e:	3710      	adds	r7, #16
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	200001f4 	.word	0x200001f4
 8001f68:	40012000 	.word	0x40012000
 8001f6c:	0f000001 	.word	0x0f000001

08001f70 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f74:	4b12      	ldr	r3, [pc, #72]	; (8001fc0 <MX_I2C1_Init+0x50>)
 8001f76:	4a13      	ldr	r2, [pc, #76]	; (8001fc4 <MX_I2C1_Init+0x54>)
 8001f78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f7a:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <MX_I2C1_Init+0x50>)
 8001f7c:	4a12      	ldr	r2, [pc, #72]	; (8001fc8 <MX_I2C1_Init+0x58>)
 8001f7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f80:	4b0f      	ldr	r3, [pc, #60]	; (8001fc0 <MX_I2C1_Init+0x50>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f86:	4b0e      	ldr	r3, [pc, #56]	; (8001fc0 <MX_I2C1_Init+0x50>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f8c:	4b0c      	ldr	r3, [pc, #48]	; (8001fc0 <MX_I2C1_Init+0x50>)
 8001f8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f92:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f94:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <MX_I2C1_Init+0x50>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f9a:	4b09      	ldr	r3, [pc, #36]	; (8001fc0 <MX_I2C1_Init+0x50>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fa0:	4b07      	ldr	r3, [pc, #28]	; (8001fc0 <MX_I2C1_Init+0x50>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fa6:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <MX_I2C1_Init+0x50>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001fac:	4804      	ldr	r0, [pc, #16]	; (8001fc0 <MX_I2C1_Init+0x50>)
 8001fae:	f001 fd0f 	bl	80039d0 <HAL_I2C_Init>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001fb8:	f000 fac4 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001fbc:	bf00      	nop
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	20000158 	.word	0x20000158
 8001fc4:	40005400 	.word	0x40005400
 8001fc8:	000186a0 	.word	0x000186a0

08001fcc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001fd0:	4b12      	ldr	r3, [pc, #72]	; (800201c <MX_I2C3_Init+0x50>)
 8001fd2:	4a13      	ldr	r2, [pc, #76]	; (8002020 <MX_I2C3_Init+0x54>)
 8001fd4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001fd6:	4b11      	ldr	r3, [pc, #68]	; (800201c <MX_I2C3_Init+0x50>)
 8001fd8:	4a12      	ldr	r2, [pc, #72]	; (8002024 <MX_I2C3_Init+0x58>)
 8001fda:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fdc:	4b0f      	ldr	r3, [pc, #60]	; (800201c <MX_I2C3_Init+0x50>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001fe2:	4b0e      	ldr	r3, [pc, #56]	; (800201c <MX_I2C3_Init+0x50>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fe8:	4b0c      	ldr	r3, [pc, #48]	; (800201c <MX_I2C3_Init+0x50>)
 8001fea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fee:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ff0:	4b0a      	ldr	r3, [pc, #40]	; (800201c <MX_I2C3_Init+0x50>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001ff6:	4b09      	ldr	r3, [pc, #36]	; (800201c <MX_I2C3_Init+0x50>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ffc:	4b07      	ldr	r3, [pc, #28]	; (800201c <MX_I2C3_Init+0x50>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002002:	4b06      	ldr	r3, [pc, #24]	; (800201c <MX_I2C3_Init+0x50>)
 8002004:	2200      	movs	r2, #0
 8002006:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002008:	4804      	ldr	r0, [pc, #16]	; (800201c <MX_I2C3_Init+0x50>)
 800200a:	f001 fce1 	bl	80039d0 <HAL_I2C_Init>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002014:	f000 fa96 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002018:	bf00      	nop
 800201a:	bd80      	pop	{r7, pc}
 800201c:	200000bc 	.word	0x200000bc
 8002020:	40005c00 	.word	0x40005c00
 8002024:	000186a0 	.word	0x000186a0

08002028 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b092      	sub	sp, #72	; 0x48
 800202c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800202e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002038:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	609a      	str	r2, [r3, #8]
 8002044:	60da      	str	r2, [r3, #12]
 8002046:	611a      	str	r2, [r3, #16]
 8002048:	615a      	str	r2, [r3, #20]
 800204a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800204c:	1d3b      	adds	r3, r7, #4
 800204e:	2220      	movs	r2, #32
 8002050:	2100      	movs	r1, #0
 8002052:	4618      	mov	r0, r3
 8002054:	f004 f846 	bl	80060e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002058:	4b31      	ldr	r3, [pc, #196]	; (8002120 <MX_TIM1_Init+0xf8>)
 800205a:	4a32      	ldr	r2, [pc, #200]	; (8002124 <MX_TIM1_Init+0xfc>)
 800205c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 800205e:	4b30      	ldr	r3, [pc, #192]	; (8002120 <MX_TIM1_Init+0xf8>)
 8002060:	2253      	movs	r2, #83	; 0x53
 8002062:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002064:	4b2e      	ldr	r3, [pc, #184]	; (8002120 <MX_TIM1_Init+0xf8>)
 8002066:	2200      	movs	r2, #0
 8002068:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49;
 800206a:	4b2d      	ldr	r3, [pc, #180]	; (8002120 <MX_TIM1_Init+0xf8>)
 800206c:	2231      	movs	r2, #49	; 0x31
 800206e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002070:	4b2b      	ldr	r3, [pc, #172]	; (8002120 <MX_TIM1_Init+0xf8>)
 8002072:	2200      	movs	r2, #0
 8002074:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002076:	4b2a      	ldr	r3, [pc, #168]	; (8002120 <MX_TIM1_Init+0xf8>)
 8002078:	2200      	movs	r2, #0
 800207a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800207c:	4b28      	ldr	r3, [pc, #160]	; (8002120 <MX_TIM1_Init+0xf8>)
 800207e:	2200      	movs	r2, #0
 8002080:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002082:	4827      	ldr	r0, [pc, #156]	; (8002120 <MX_TIM1_Init+0xf8>)
 8002084:	f002 ff06 	bl	8004e94 <HAL_TIM_PWM_Init>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 800208e:	f000 fa59 	bl	8002544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002092:	2300      	movs	r3, #0
 8002094:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002096:	2300      	movs	r3, #0
 8002098:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800209a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800209e:	4619      	mov	r1, r3
 80020a0:	481f      	ldr	r0, [pc, #124]	; (8002120 <MX_TIM1_Init+0xf8>)
 80020a2:	f003 fc1f 	bl	80058e4 <HAL_TIMEx_MasterConfigSynchronization>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80020ac:	f000 fa4a 	bl	8002544 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020b0:	2360      	movs	r3, #96	; 0x60
 80020b2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80020b4:	2300      	movs	r3, #0
 80020b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020b8:	2300      	movs	r3, #0
 80020ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020bc:	2300      	movs	r3, #0
 80020be:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80020c0:	2300      	movs	r3, #0
 80020c2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80020c4:	2300      	movs	r3, #0
 80020c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80020c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020cc:	220c      	movs	r2, #12
 80020ce:	4619      	mov	r1, r3
 80020d0:	4813      	ldr	r0, [pc, #76]	; (8002120 <MX_TIM1_Init+0xf8>)
 80020d2:	f003 f913 	bl	80052fc <HAL_TIM_PWM_ConfigChannel>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 80020dc:	f000 fa32 	bl	8002544 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80020e0:	2300      	movs	r3, #0
 80020e2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80020e4:	2300      	movs	r3, #0
 80020e6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80020e8:	2300      	movs	r3, #0
 80020ea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80020ec:	2300      	movs	r3, #0
 80020ee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80020f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020f8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80020fa:	2300      	movs	r3, #0
 80020fc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80020fe:	1d3b      	adds	r3, r7, #4
 8002100:	4619      	mov	r1, r3
 8002102:	4807      	ldr	r0, [pc, #28]	; (8002120 <MX_TIM1_Init+0xf8>)
 8002104:	f003 fc5c 	bl	80059c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <MX_TIM1_Init+0xea>
  {
    Error_Handler();
 800210e:	f000 fa19 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002112:	4803      	ldr	r0, [pc, #12]	; (8002120 <MX_TIM1_Init+0xf8>)
 8002114:	f000 fbbc 	bl	8002890 <HAL_TIM_MspPostInit>

}
 8002118:	bf00      	nop
 800211a:	3748      	adds	r7, #72	; 0x48
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	2000023c 	.word	0x2000023c
 8002124:	40010000 	.word	0x40010000

08002128 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08a      	sub	sp, #40	; 0x28
 800212c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800212e:	f107 0320 	add.w	r3, r7, #32
 8002132:	2200      	movs	r2, #0
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002138:	1d3b      	adds	r3, r7, #4
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	605a      	str	r2, [r3, #4]
 8002140:	609a      	str	r2, [r3, #8]
 8002142:	60da      	str	r2, [r3, #12]
 8002144:	611a      	str	r2, [r3, #16]
 8002146:	615a      	str	r2, [r3, #20]
 8002148:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800214a:	4b22      	ldr	r3, [pc, #136]	; (80021d4 <MX_TIM2_Init+0xac>)
 800214c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002150:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8002152:	4b20      	ldr	r3, [pc, #128]	; (80021d4 <MX_TIM2_Init+0xac>)
 8002154:	2253      	movs	r2, #83	; 0x53
 8002156:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002158:	4b1e      	ldr	r3, [pc, #120]	; (80021d4 <MX_TIM2_Init+0xac>)
 800215a:	2200      	movs	r2, #0
 800215c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800215e:	4b1d      	ldr	r3, [pc, #116]	; (80021d4 <MX_TIM2_Init+0xac>)
 8002160:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002164:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002166:	4b1b      	ldr	r3, [pc, #108]	; (80021d4 <MX_TIM2_Init+0xac>)
 8002168:	2200      	movs	r2, #0
 800216a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800216c:	4b19      	ldr	r3, [pc, #100]	; (80021d4 <MX_TIM2_Init+0xac>)
 800216e:	2200      	movs	r2, #0
 8002170:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002172:	4818      	ldr	r0, [pc, #96]	; (80021d4 <MX_TIM2_Init+0xac>)
 8002174:	f002 fe8e 	bl	8004e94 <HAL_TIM_PWM_Init>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800217e:	f000 f9e1 	bl	8002544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002182:	2300      	movs	r3, #0
 8002184:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002186:	2300      	movs	r3, #0
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800218a:	f107 0320 	add.w	r3, r7, #32
 800218e:	4619      	mov	r1, r3
 8002190:	4810      	ldr	r0, [pc, #64]	; (80021d4 <MX_TIM2_Init+0xac>)
 8002192:	f003 fba7 	bl	80058e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800219c:	f000 f9d2 	bl	8002544 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021a0:	2360      	movs	r3, #96	; 0x60
 80021a2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80021a4:	2300      	movs	r3, #0
 80021a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021a8:	2300      	movs	r3, #0
 80021aa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021ac:	2300      	movs	r3, #0
 80021ae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021b0:	1d3b      	adds	r3, r7, #4
 80021b2:	2200      	movs	r2, #0
 80021b4:	4619      	mov	r1, r3
 80021b6:	4807      	ldr	r0, [pc, #28]	; (80021d4 <MX_TIM2_Init+0xac>)
 80021b8:	f003 f8a0 	bl	80052fc <HAL_TIM_PWM_ConfigChannel>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80021c2:	f000 f9bf 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80021c6:	4803      	ldr	r0, [pc, #12]	; (80021d4 <MX_TIM2_Init+0xac>)
 80021c8:	f000 fb62 	bl	8002890 <HAL_TIM_MspPostInit>

}
 80021cc:	bf00      	nop
 80021ce:	3728      	adds	r7, #40	; 0x28
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	20000284 	.word	0x20000284

080021d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b08a      	sub	sp, #40	; 0x28
 80021dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021de:	f107 0320 	add.w	r3, r7, #32
 80021e2:	2200      	movs	r2, #0
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021e8:	1d3b      	adds	r3, r7, #4
 80021ea:	2200      	movs	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	605a      	str	r2, [r3, #4]
 80021f0:	609a      	str	r2, [r3, #8]
 80021f2:	60da      	str	r2, [r3, #12]
 80021f4:	611a      	str	r2, [r3, #16]
 80021f6:	615a      	str	r2, [r3, #20]
 80021f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021fa:	4b2c      	ldr	r3, [pc, #176]	; (80022ac <MX_TIM3_Init+0xd4>)
 80021fc:	4a2c      	ldr	r2, [pc, #176]	; (80022b0 <MX_TIM3_Init+0xd8>)
 80021fe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8002200:	4b2a      	ldr	r3, [pc, #168]	; (80022ac <MX_TIM3_Init+0xd4>)
 8002202:	2253      	movs	r2, #83	; 0x53
 8002204:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002206:	4b29      	ldr	r3, [pc, #164]	; (80022ac <MX_TIM3_Init+0xd4>)
 8002208:	2200      	movs	r2, #0
 800220a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49;
 800220c:	4b27      	ldr	r3, [pc, #156]	; (80022ac <MX_TIM3_Init+0xd4>)
 800220e:	2231      	movs	r2, #49	; 0x31
 8002210:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002212:	4b26      	ldr	r3, [pc, #152]	; (80022ac <MX_TIM3_Init+0xd4>)
 8002214:	2200      	movs	r2, #0
 8002216:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002218:	4b24      	ldr	r3, [pc, #144]	; (80022ac <MX_TIM3_Init+0xd4>)
 800221a:	2200      	movs	r2, #0
 800221c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800221e:	4823      	ldr	r0, [pc, #140]	; (80022ac <MX_TIM3_Init+0xd4>)
 8002220:	f002 fe38 	bl	8004e94 <HAL_TIM_PWM_Init>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800222a:	f000 f98b 	bl	8002544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800222e:	2300      	movs	r3, #0
 8002230:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002232:	2300      	movs	r3, #0
 8002234:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002236:	f107 0320 	add.w	r3, r7, #32
 800223a:	4619      	mov	r1, r3
 800223c:	481b      	ldr	r0, [pc, #108]	; (80022ac <MX_TIM3_Init+0xd4>)
 800223e:	f003 fb51 	bl	80058e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8002248:	f000 f97c 	bl	8002544 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800224c:	2360      	movs	r3, #96	; 0x60
 800224e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002250:	2300      	movs	r3, #0
 8002252:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002254:	2300      	movs	r3, #0
 8002256:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002258:	2300      	movs	r3, #0
 800225a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800225c:	1d3b      	adds	r3, r7, #4
 800225e:	2200      	movs	r2, #0
 8002260:	4619      	mov	r1, r3
 8002262:	4812      	ldr	r0, [pc, #72]	; (80022ac <MX_TIM3_Init+0xd4>)
 8002264:	f003 f84a 	bl	80052fc <HAL_TIM_PWM_ConfigChannel>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800226e:	f000 f969 	bl	8002544 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002272:	1d3b      	adds	r3, r7, #4
 8002274:	2204      	movs	r2, #4
 8002276:	4619      	mov	r1, r3
 8002278:	480c      	ldr	r0, [pc, #48]	; (80022ac <MX_TIM3_Init+0xd4>)
 800227a:	f003 f83f 	bl	80052fc <HAL_TIM_PWM_ConfigChannel>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002284:	f000 f95e 	bl	8002544 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002288:	1d3b      	adds	r3, r7, #4
 800228a:	2208      	movs	r2, #8
 800228c:	4619      	mov	r1, r3
 800228e:	4807      	ldr	r0, [pc, #28]	; (80022ac <MX_TIM3_Init+0xd4>)
 8002290:	f003 f834 	bl	80052fc <HAL_TIM_PWM_ConfigChannel>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 800229a:	f000 f953 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800229e:	4803      	ldr	r0, [pc, #12]	; (80022ac <MX_TIM3_Init+0xd4>)
 80022a0:	f000 faf6 	bl	8002890 <HAL_TIM_MspPostInit>

}
 80022a4:	bf00      	nop
 80022a6:	3728      	adds	r7, #40	; 0x28
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	200001ac 	.word	0x200001ac
 80022b0:	40000400 	.word	0x40000400

080022b4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b08c      	sub	sp, #48	; 0x30
 80022b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80022ba:	f107 030c 	add.w	r3, r7, #12
 80022be:	2224      	movs	r2, #36	; 0x24
 80022c0:	2100      	movs	r1, #0
 80022c2:	4618      	mov	r0, r3
 80022c4:	f003 ff0e 	bl	80060e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022c8:	1d3b      	adds	r3, r7, #4
 80022ca:	2200      	movs	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80022d0:	4b20      	ldr	r3, [pc, #128]	; (8002354 <MX_TIM4_Init+0xa0>)
 80022d2:	4a21      	ldr	r2, [pc, #132]	; (8002358 <MX_TIM4_Init+0xa4>)
 80022d4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80022d6:	4b1f      	ldr	r3, [pc, #124]	; (8002354 <MX_TIM4_Init+0xa0>)
 80022d8:	2200      	movs	r2, #0
 80022da:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022dc:	4b1d      	ldr	r3, [pc, #116]	; (8002354 <MX_TIM4_Init+0xa0>)
 80022de:	2200      	movs	r2, #0
 80022e0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80022e2:	4b1c      	ldr	r3, [pc, #112]	; (8002354 <MX_TIM4_Init+0xa0>)
 80022e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022e8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ea:	4b1a      	ldr	r3, [pc, #104]	; (8002354 <MX_TIM4_Init+0xa0>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022f0:	4b18      	ldr	r3, [pc, #96]	; (8002354 <MX_TIM4_Init+0xa0>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80022f6:	2303      	movs	r3, #3
 80022f8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80022fa:	2300      	movs	r3, #0
 80022fc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80022fe:	2301      	movs	r3, #1
 8002300:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002302:	2300      	movs	r3, #0
 8002304:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002306:	2300      	movs	r3, #0
 8002308:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800230a:	2300      	movs	r3, #0
 800230c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800230e:	2301      	movs	r3, #1
 8002310:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002312:	2300      	movs	r3, #0
 8002314:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002316:	2300      	movs	r3, #0
 8002318:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800231a:	f107 030c 	add.w	r3, r7, #12
 800231e:	4619      	mov	r1, r3
 8002320:	480c      	ldr	r0, [pc, #48]	; (8002354 <MX_TIM4_Init+0xa0>)
 8002322:	f002 feb7 	bl	8005094 <HAL_TIM_Encoder_Init>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800232c:	f000 f90a 	bl	8002544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002330:	2300      	movs	r3, #0
 8002332:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002334:	2300      	movs	r3, #0
 8002336:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002338:	1d3b      	adds	r3, r7, #4
 800233a:	4619      	mov	r1, r3
 800233c:	4805      	ldr	r0, [pc, #20]	; (8002354 <MX_TIM4_Init+0xa0>)
 800233e:	f003 fad1 	bl	80058e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002348:	f000 f8fc 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800234c:	bf00      	nop
 800234e:	3730      	adds	r7, #48	; 0x30
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	20000110 	.word	0x20000110
 8002358:	40000800 	.word	0x40000800

0800235c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002360:	4b11      	ldr	r3, [pc, #68]	; (80023a8 <MX_USART2_UART_Init+0x4c>)
 8002362:	4a12      	ldr	r2, [pc, #72]	; (80023ac <MX_USART2_UART_Init+0x50>)
 8002364:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002366:	4b10      	ldr	r3, [pc, #64]	; (80023a8 <MX_USART2_UART_Init+0x4c>)
 8002368:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800236c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800236e:	4b0e      	ldr	r3, [pc, #56]	; (80023a8 <MX_USART2_UART_Init+0x4c>)
 8002370:	2200      	movs	r2, #0
 8002372:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002374:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <MX_USART2_UART_Init+0x4c>)
 8002376:	2200      	movs	r2, #0
 8002378:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800237a:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <MX_USART2_UART_Init+0x4c>)
 800237c:	2200      	movs	r2, #0
 800237e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002380:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <MX_USART2_UART_Init+0x4c>)
 8002382:	220c      	movs	r2, #12
 8002384:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002386:	4b08      	ldr	r3, [pc, #32]	; (80023a8 <MX_USART2_UART_Init+0x4c>)
 8002388:	2200      	movs	r2, #0
 800238a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800238c:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <MX_USART2_UART_Init+0x4c>)
 800238e:	2200      	movs	r2, #0
 8002390:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002392:	4805      	ldr	r0, [pc, #20]	; (80023a8 <MX_USART2_UART_Init+0x4c>)
 8002394:	f003 fb66 	bl	8005a64 <HAL_UART_Init>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800239e:	f000 f8d1 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023a2:	bf00      	nop
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	200002cc 	.word	0x200002cc
 80023ac:	40004400 	.word	0x40004400

080023b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b08a      	sub	sp, #40	; 0x28
 80023b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b6:	f107 0314 	add.w	r3, r7, #20
 80023ba:	2200      	movs	r2, #0
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	605a      	str	r2, [r3, #4]
 80023c0:	609a      	str	r2, [r3, #8]
 80023c2:	60da      	str	r2, [r3, #12]
 80023c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	613b      	str	r3, [r7, #16]
 80023ca:	4b5a      	ldr	r3, [pc, #360]	; (8002534 <MX_GPIO_Init+0x184>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	4a59      	ldr	r2, [pc, #356]	; (8002534 <MX_GPIO_Init+0x184>)
 80023d0:	f043 0304 	orr.w	r3, r3, #4
 80023d4:	6313      	str	r3, [r2, #48]	; 0x30
 80023d6:	4b57      	ldr	r3, [pc, #348]	; (8002534 <MX_GPIO_Init+0x184>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	f003 0304 	and.w	r3, r3, #4
 80023de:	613b      	str	r3, [r7, #16]
 80023e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	4b53      	ldr	r3, [pc, #332]	; (8002534 <MX_GPIO_Init+0x184>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	4a52      	ldr	r2, [pc, #328]	; (8002534 <MX_GPIO_Init+0x184>)
 80023ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023f0:	6313      	str	r3, [r2, #48]	; 0x30
 80023f2:	4b50      	ldr	r3, [pc, #320]	; (8002534 <MX_GPIO_Init+0x184>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023fe:	2300      	movs	r3, #0
 8002400:	60bb      	str	r3, [r7, #8]
 8002402:	4b4c      	ldr	r3, [pc, #304]	; (8002534 <MX_GPIO_Init+0x184>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	4a4b      	ldr	r2, [pc, #300]	; (8002534 <MX_GPIO_Init+0x184>)
 8002408:	f043 0301 	orr.w	r3, r3, #1
 800240c:	6313      	str	r3, [r2, #48]	; 0x30
 800240e:	4b49      	ldr	r3, [pc, #292]	; (8002534 <MX_GPIO_Init+0x184>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	60bb      	str	r3, [r7, #8]
 8002418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800241a:	2300      	movs	r3, #0
 800241c:	607b      	str	r3, [r7, #4]
 800241e:	4b45      	ldr	r3, [pc, #276]	; (8002534 <MX_GPIO_Init+0x184>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	4a44      	ldr	r2, [pc, #272]	; (8002534 <MX_GPIO_Init+0x184>)
 8002424:	f043 0302 	orr.w	r3, r3, #2
 8002428:	6313      	str	r3, [r2, #48]	; 0x30
 800242a:	4b42      	ldr	r3, [pc, #264]	; (8002534 <MX_GPIO_Init+0x184>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	607b      	str	r3, [r7, #4]
 8002434:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8002436:	2200      	movs	r2, #0
 8002438:	f44f 7108 	mov.w	r1, #544	; 0x220
 800243c:	483e      	ldr	r0, [pc, #248]	; (8002538 <MX_GPIO_Init+0x188>)
 800243e:	f001 faad 	bl	800399c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_5, GPIO_PIN_RESET);
 8002442:	2200      	movs	r2, #0
 8002444:	f242 0120 	movw	r1, #8224	; 0x2020
 8002448:	483c      	ldr	r0, [pc, #240]	; (800253c <MX_GPIO_Init+0x18c>)
 800244a:	f001 faa7 	bl	800399c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800244e:	2200      	movs	r2, #0
 8002450:	2140      	movs	r1, #64	; 0x40
 8002452:	483b      	ldr	r0, [pc, #236]	; (8002540 <MX_GPIO_Init+0x190>)
 8002454:	f001 faa2 	bl	800399c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002458:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800245c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800245e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002462:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002464:	2300      	movs	r3, #0
 8002466:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002468:	f107 0314 	add.w	r3, r7, #20
 800246c:	4619      	mov	r1, r3
 800246e:	4834      	ldr	r0, [pc, #208]	; (8002540 <MX_GPIO_Init+0x190>)
 8002470:	f001 f8f8 	bl	8003664 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002474:	2310      	movs	r3, #16
 8002476:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002478:	2300      	movs	r3, #0
 800247a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247c:	2300      	movs	r3, #0
 800247e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002480:	f107 0314 	add.w	r3, r7, #20
 8002484:	4619      	mov	r1, r3
 8002486:	482c      	ldr	r0, [pc, #176]	; (8002538 <MX_GPIO_Init+0x188>)
 8002488:	f001 f8ec 	bl	8003664 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9;
 800248c:	f44f 7308 	mov.w	r3, #544	; 0x220
 8002490:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002492:	2301      	movs	r3, #1
 8002494:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002496:	2300      	movs	r3, #0
 8002498:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249a:	2300      	movs	r3, #0
 800249c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800249e:	f107 0314 	add.w	r3, r7, #20
 80024a2:	4619      	mov	r1, r3
 80024a4:	4824      	ldr	r0, [pc, #144]	; (8002538 <MX_GPIO_Init+0x188>)
 80024a6:	f001 f8dd 	bl	8003664 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024aa:	23c0      	movs	r3, #192	; 0xc0
 80024ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024ae:	2300      	movs	r3, #0
 80024b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80024b2:	2302      	movs	r3, #2
 80024b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024b6:	f107 0314 	add.w	r3, r7, #20
 80024ba:	4619      	mov	r1, r3
 80024bc:	481e      	ldr	r0, [pc, #120]	; (8002538 <MX_GPIO_Init+0x188>)
 80024be:	f001 f8d1 	bl	8003664 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80024c2:	2310      	movs	r3, #16
 80024c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024c6:	2300      	movs	r3, #0
 80024c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80024ca:	2302      	movs	r3, #2
 80024cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024ce:	f107 0314 	add.w	r3, r7, #20
 80024d2:	4619      	mov	r1, r3
 80024d4:	481a      	ldr	r0, [pc, #104]	; (8002540 <MX_GPIO_Init+0x190>)
 80024d6:	f001 f8c5 	bl	8003664 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80024da:	2301      	movs	r3, #1
 80024dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024de:	2300      	movs	r3, #0
 80024e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e2:	2300      	movs	r3, #0
 80024e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024e6:	f107 0314 	add.w	r3, r7, #20
 80024ea:	4619      	mov	r1, r3
 80024ec:	4813      	ldr	r0, [pc, #76]	; (800253c <MX_GPIO_Init+0x18c>)
 80024ee:	f001 f8b9 	bl	8003664 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 80024f2:	f242 0320 	movw	r3, #8224	; 0x2020
 80024f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024f8:	2301      	movs	r3, #1
 80024fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fc:	2300      	movs	r3, #0
 80024fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002500:	2300      	movs	r3, #0
 8002502:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002504:	f107 0314 	add.w	r3, r7, #20
 8002508:	4619      	mov	r1, r3
 800250a:	480c      	ldr	r0, [pc, #48]	; (800253c <MX_GPIO_Init+0x18c>)
 800250c:	f001 f8aa 	bl	8003664 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002510:	2340      	movs	r3, #64	; 0x40
 8002512:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002514:	2301      	movs	r3, #1
 8002516:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002518:	2300      	movs	r3, #0
 800251a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251c:	2300      	movs	r3, #0
 800251e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002520:	f107 0314 	add.w	r3, r7, #20
 8002524:	4619      	mov	r1, r3
 8002526:	4806      	ldr	r0, [pc, #24]	; (8002540 <MX_GPIO_Init+0x190>)
 8002528:	f001 f89c 	bl	8003664 <HAL_GPIO_Init>

}
 800252c:	bf00      	nop
 800252e:	3728      	adds	r7, #40	; 0x28
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	40023800 	.word	0x40023800
 8002538:	40020000 	.word	0x40020000
 800253c:	40020400 	.word	0x40020400
 8002540:	40020800 	.word	0x40020800

08002544 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002548:	b672      	cpsid	i
}
 800254a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800254c:	e7fe      	b.n	800254c <Error_Handler+0x8>
	...

08002550 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002556:	2300      	movs	r3, #0
 8002558:	607b      	str	r3, [r7, #4]
 800255a:	4b10      	ldr	r3, [pc, #64]	; (800259c <HAL_MspInit+0x4c>)
 800255c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255e:	4a0f      	ldr	r2, [pc, #60]	; (800259c <HAL_MspInit+0x4c>)
 8002560:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002564:	6453      	str	r3, [r2, #68]	; 0x44
 8002566:	4b0d      	ldr	r3, [pc, #52]	; (800259c <HAL_MspInit+0x4c>)
 8002568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800256e:	607b      	str	r3, [r7, #4]
 8002570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	603b      	str	r3, [r7, #0]
 8002576:	4b09      	ldr	r3, [pc, #36]	; (800259c <HAL_MspInit+0x4c>)
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	4a08      	ldr	r2, [pc, #32]	; (800259c <HAL_MspInit+0x4c>)
 800257c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002580:	6413      	str	r3, [r2, #64]	; 0x40
 8002582:	4b06      	ldr	r3, [pc, #24]	; (800259c <HAL_MspInit+0x4c>)
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258a:	603b      	str	r3, [r7, #0]
 800258c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800258e:	2007      	movs	r0, #7
 8002590:	f001 f834 	bl	80035fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002594:	bf00      	nop
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40023800 	.word	0x40023800

080025a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b08a      	sub	sp, #40	; 0x28
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a8:	f107 0314 	add.w	r3, r7, #20
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	605a      	str	r2, [r3, #4]
 80025b2:	609a      	str	r2, [r3, #8]
 80025b4:	60da      	str	r2, [r3, #12]
 80025b6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a17      	ldr	r2, [pc, #92]	; (800261c <HAL_ADC_MspInit+0x7c>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d127      	bne.n	8002612 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	613b      	str	r3, [r7, #16]
 80025c6:	4b16      	ldr	r3, [pc, #88]	; (8002620 <HAL_ADC_MspInit+0x80>)
 80025c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ca:	4a15      	ldr	r2, [pc, #84]	; (8002620 <HAL_ADC_MspInit+0x80>)
 80025cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025d0:	6453      	str	r3, [r2, #68]	; 0x44
 80025d2:	4b13      	ldr	r3, [pc, #76]	; (8002620 <HAL_ADC_MspInit+0x80>)
 80025d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025da:	613b      	str	r3, [r7, #16]
 80025dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	60fb      	str	r3, [r7, #12]
 80025e2:	4b0f      	ldr	r3, [pc, #60]	; (8002620 <HAL_ADC_MspInit+0x80>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	4a0e      	ldr	r2, [pc, #56]	; (8002620 <HAL_ADC_MspInit+0x80>)
 80025e8:	f043 0301 	orr.w	r3, r3, #1
 80025ec:	6313      	str	r3, [r2, #48]	; 0x30
 80025ee:	4b0c      	ldr	r3, [pc, #48]	; (8002620 <HAL_ADC_MspInit+0x80>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80025fa:	2301      	movs	r3, #1
 80025fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025fe:	2303      	movs	r3, #3
 8002600:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002602:	2300      	movs	r3, #0
 8002604:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002606:	f107 0314 	add.w	r3, r7, #20
 800260a:	4619      	mov	r1, r3
 800260c:	4805      	ldr	r0, [pc, #20]	; (8002624 <HAL_ADC_MspInit+0x84>)
 800260e:	f001 f829 	bl	8003664 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002612:	bf00      	nop
 8002614:	3728      	adds	r7, #40	; 0x28
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40012000 	.word	0x40012000
 8002620:	40023800 	.word	0x40023800
 8002624:	40020000 	.word	0x40020000

08002628 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b08c      	sub	sp, #48	; 0x30
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002630:	f107 031c 	add.w	r3, r7, #28
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	605a      	str	r2, [r3, #4]
 800263a:	609a      	str	r2, [r3, #8]
 800263c:	60da      	str	r2, [r3, #12]
 800263e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a42      	ldr	r2, [pc, #264]	; (8002750 <HAL_I2C_MspInit+0x128>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d12d      	bne.n	80026a6 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800264a:	2300      	movs	r3, #0
 800264c:	61bb      	str	r3, [r7, #24]
 800264e:	4b41      	ldr	r3, [pc, #260]	; (8002754 <HAL_I2C_MspInit+0x12c>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002652:	4a40      	ldr	r2, [pc, #256]	; (8002754 <HAL_I2C_MspInit+0x12c>)
 8002654:	f043 0302 	orr.w	r3, r3, #2
 8002658:	6313      	str	r3, [r2, #48]	; 0x30
 800265a:	4b3e      	ldr	r3, [pc, #248]	; (8002754 <HAL_I2C_MspInit+0x12c>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	61bb      	str	r3, [r7, #24]
 8002664:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002666:	f44f 7340 	mov.w	r3, #768	; 0x300
 800266a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800266c:	2312      	movs	r3, #18
 800266e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002670:	2300      	movs	r3, #0
 8002672:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002674:	2303      	movs	r3, #3
 8002676:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002678:	2304      	movs	r3, #4
 800267a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800267c:	f107 031c 	add.w	r3, r7, #28
 8002680:	4619      	mov	r1, r3
 8002682:	4835      	ldr	r0, [pc, #212]	; (8002758 <HAL_I2C_MspInit+0x130>)
 8002684:	f000 ffee 	bl	8003664 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002688:	2300      	movs	r3, #0
 800268a:	617b      	str	r3, [r7, #20]
 800268c:	4b31      	ldr	r3, [pc, #196]	; (8002754 <HAL_I2C_MspInit+0x12c>)
 800268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002690:	4a30      	ldr	r2, [pc, #192]	; (8002754 <HAL_I2C_MspInit+0x12c>)
 8002692:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002696:	6413      	str	r3, [r2, #64]	; 0x40
 8002698:	4b2e      	ldr	r3, [pc, #184]	; (8002754 <HAL_I2C_MspInit+0x12c>)
 800269a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026a0:	617b      	str	r3, [r7, #20]
 80026a2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80026a4:	e050      	b.n	8002748 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a2c      	ldr	r2, [pc, #176]	; (800275c <HAL_I2C_MspInit+0x134>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d14b      	bne.n	8002748 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026b0:	2300      	movs	r3, #0
 80026b2:	613b      	str	r3, [r7, #16]
 80026b4:	4b27      	ldr	r3, [pc, #156]	; (8002754 <HAL_I2C_MspInit+0x12c>)
 80026b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b8:	4a26      	ldr	r2, [pc, #152]	; (8002754 <HAL_I2C_MspInit+0x12c>)
 80026ba:	f043 0304 	orr.w	r3, r3, #4
 80026be:	6313      	str	r3, [r2, #48]	; 0x30
 80026c0:	4b24      	ldr	r3, [pc, #144]	; (8002754 <HAL_I2C_MspInit+0x12c>)
 80026c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c4:	f003 0304 	and.w	r3, r3, #4
 80026c8:	613b      	str	r3, [r7, #16]
 80026ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026cc:	2300      	movs	r3, #0
 80026ce:	60fb      	str	r3, [r7, #12]
 80026d0:	4b20      	ldr	r3, [pc, #128]	; (8002754 <HAL_I2C_MspInit+0x12c>)
 80026d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d4:	4a1f      	ldr	r2, [pc, #124]	; (8002754 <HAL_I2C_MspInit+0x12c>)
 80026d6:	f043 0301 	orr.w	r3, r3, #1
 80026da:	6313      	str	r3, [r2, #48]	; 0x30
 80026dc:	4b1d      	ldr	r3, [pc, #116]	; (8002754 <HAL_I2C_MspInit+0x12c>)
 80026de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	60fb      	str	r3, [r7, #12]
 80026e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80026e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026ee:	2312      	movs	r3, #18
 80026f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f2:	2300      	movs	r3, #0
 80026f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026f6:	2303      	movs	r3, #3
 80026f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80026fa:	2304      	movs	r3, #4
 80026fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026fe:	f107 031c 	add.w	r3, r7, #28
 8002702:	4619      	mov	r1, r3
 8002704:	4816      	ldr	r0, [pc, #88]	; (8002760 <HAL_I2C_MspInit+0x138>)
 8002706:	f000 ffad 	bl	8003664 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800270a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800270e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002710:	2312      	movs	r3, #18
 8002712:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002714:	2300      	movs	r3, #0
 8002716:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002718:	2303      	movs	r3, #3
 800271a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800271c:	2304      	movs	r3, #4
 800271e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002720:	f107 031c 	add.w	r3, r7, #28
 8002724:	4619      	mov	r1, r3
 8002726:	480f      	ldr	r0, [pc, #60]	; (8002764 <HAL_I2C_MspInit+0x13c>)
 8002728:	f000 ff9c 	bl	8003664 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800272c:	2300      	movs	r3, #0
 800272e:	60bb      	str	r3, [r7, #8]
 8002730:	4b08      	ldr	r3, [pc, #32]	; (8002754 <HAL_I2C_MspInit+0x12c>)
 8002732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002734:	4a07      	ldr	r2, [pc, #28]	; (8002754 <HAL_I2C_MspInit+0x12c>)
 8002736:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800273a:	6413      	str	r3, [r2, #64]	; 0x40
 800273c:	4b05      	ldr	r3, [pc, #20]	; (8002754 <HAL_I2C_MspInit+0x12c>)
 800273e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002740:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002744:	60bb      	str	r3, [r7, #8]
 8002746:	68bb      	ldr	r3, [r7, #8]
}
 8002748:	bf00      	nop
 800274a:	3730      	adds	r7, #48	; 0x30
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	40005400 	.word	0x40005400
 8002754:	40023800 	.word	0x40023800
 8002758:	40020400 	.word	0x40020400
 800275c:	40005c00 	.word	0x40005c00
 8002760:	40020800 	.word	0x40020800
 8002764:	40020000 	.word	0x40020000

08002768 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002768:	b480      	push	{r7}
 800276a:	b087      	sub	sp, #28
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a1f      	ldr	r2, [pc, #124]	; (80027f4 <HAL_TIM_PWM_MspInit+0x8c>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d10e      	bne.n	8002798 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	617b      	str	r3, [r7, #20]
 800277e:	4b1e      	ldr	r3, [pc, #120]	; (80027f8 <HAL_TIM_PWM_MspInit+0x90>)
 8002780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002782:	4a1d      	ldr	r2, [pc, #116]	; (80027f8 <HAL_TIM_PWM_MspInit+0x90>)
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	6453      	str	r3, [r2, #68]	; 0x44
 800278a:	4b1b      	ldr	r3, [pc, #108]	; (80027f8 <HAL_TIM_PWM_MspInit+0x90>)
 800278c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	617b      	str	r3, [r7, #20]
 8002794:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002796:	e026      	b.n	80027e6 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM2)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027a0:	d10e      	bne.n	80027c0 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027a2:	2300      	movs	r3, #0
 80027a4:	613b      	str	r3, [r7, #16]
 80027a6:	4b14      	ldr	r3, [pc, #80]	; (80027f8 <HAL_TIM_PWM_MspInit+0x90>)
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	4a13      	ldr	r2, [pc, #76]	; (80027f8 <HAL_TIM_PWM_MspInit+0x90>)
 80027ac:	f043 0301 	orr.w	r3, r3, #1
 80027b0:	6413      	str	r3, [r2, #64]	; 0x40
 80027b2:	4b11      	ldr	r3, [pc, #68]	; (80027f8 <HAL_TIM_PWM_MspInit+0x90>)
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	613b      	str	r3, [r7, #16]
 80027bc:	693b      	ldr	r3, [r7, #16]
}
 80027be:	e012      	b.n	80027e6 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a0d      	ldr	r2, [pc, #52]	; (80027fc <HAL_TIM_PWM_MspInit+0x94>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d10d      	bne.n	80027e6 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027ca:	2300      	movs	r3, #0
 80027cc:	60fb      	str	r3, [r7, #12]
 80027ce:	4b0a      	ldr	r3, [pc, #40]	; (80027f8 <HAL_TIM_PWM_MspInit+0x90>)
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	4a09      	ldr	r2, [pc, #36]	; (80027f8 <HAL_TIM_PWM_MspInit+0x90>)
 80027d4:	f043 0302 	orr.w	r3, r3, #2
 80027d8:	6413      	str	r3, [r2, #64]	; 0x40
 80027da:	4b07      	ldr	r3, [pc, #28]	; (80027f8 <HAL_TIM_PWM_MspInit+0x90>)
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	68fb      	ldr	r3, [r7, #12]
}
 80027e6:	bf00      	nop
 80027e8:	371c      	adds	r7, #28
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	40010000 	.word	0x40010000
 80027f8:	40023800 	.word	0x40023800
 80027fc:	40000400 	.word	0x40000400

08002800 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b08a      	sub	sp, #40	; 0x28
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002808:	f107 0314 	add.w	r3, r7, #20
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	605a      	str	r2, [r3, #4]
 8002812:	609a      	str	r2, [r3, #8]
 8002814:	60da      	str	r2, [r3, #12]
 8002816:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a19      	ldr	r2, [pc, #100]	; (8002884 <HAL_TIM_Encoder_MspInit+0x84>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d12b      	bne.n	800287a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002822:	2300      	movs	r3, #0
 8002824:	613b      	str	r3, [r7, #16]
 8002826:	4b18      	ldr	r3, [pc, #96]	; (8002888 <HAL_TIM_Encoder_MspInit+0x88>)
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	4a17      	ldr	r2, [pc, #92]	; (8002888 <HAL_TIM_Encoder_MspInit+0x88>)
 800282c:	f043 0304 	orr.w	r3, r3, #4
 8002830:	6413      	str	r3, [r2, #64]	; 0x40
 8002832:	4b15      	ldr	r3, [pc, #84]	; (8002888 <HAL_TIM_Encoder_MspInit+0x88>)
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	f003 0304 	and.w	r3, r3, #4
 800283a:	613b      	str	r3, [r7, #16]
 800283c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800283e:	2300      	movs	r3, #0
 8002840:	60fb      	str	r3, [r7, #12]
 8002842:	4b11      	ldr	r3, [pc, #68]	; (8002888 <HAL_TIM_Encoder_MspInit+0x88>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	4a10      	ldr	r2, [pc, #64]	; (8002888 <HAL_TIM_Encoder_MspInit+0x88>)
 8002848:	f043 0302 	orr.w	r3, r3, #2
 800284c:	6313      	str	r3, [r2, #48]	; 0x30
 800284e:	4b0e      	ldr	r3, [pc, #56]	; (8002888 <HAL_TIM_Encoder_MspInit+0x88>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	60fb      	str	r3, [r7, #12]
 8002858:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800285a:	23c0      	movs	r3, #192	; 0xc0
 800285c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285e:	2302      	movs	r3, #2
 8002860:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002862:	2300      	movs	r3, #0
 8002864:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002866:	2300      	movs	r3, #0
 8002868:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800286a:	2302      	movs	r3, #2
 800286c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800286e:	f107 0314 	add.w	r3, r7, #20
 8002872:	4619      	mov	r1, r3
 8002874:	4805      	ldr	r0, [pc, #20]	; (800288c <HAL_TIM_Encoder_MspInit+0x8c>)
 8002876:	f000 fef5 	bl	8003664 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800287a:	bf00      	nop
 800287c:	3728      	adds	r7, #40	; 0x28
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40000800 	.word	0x40000800
 8002888:	40023800 	.word	0x40023800
 800288c:	40020400 	.word	0x40020400

08002890 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b08c      	sub	sp, #48	; 0x30
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002898:	f107 031c 	add.w	r3, r7, #28
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	605a      	str	r2, [r3, #4]
 80028a2:	609a      	str	r2, [r3, #8]
 80028a4:	60da      	str	r2, [r3, #12]
 80028a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a46      	ldr	r2, [pc, #280]	; (80029c8 <HAL_TIM_MspPostInit+0x138>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d11f      	bne.n	80028f2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b2:	2300      	movs	r3, #0
 80028b4:	61bb      	str	r3, [r7, #24]
 80028b6:	4b45      	ldr	r3, [pc, #276]	; (80029cc <HAL_TIM_MspPostInit+0x13c>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ba:	4a44      	ldr	r2, [pc, #272]	; (80029cc <HAL_TIM_MspPostInit+0x13c>)
 80028bc:	f043 0301 	orr.w	r3, r3, #1
 80028c0:	6313      	str	r3, [r2, #48]	; 0x30
 80028c2:	4b42      	ldr	r3, [pc, #264]	; (80029cc <HAL_TIM_MspPostInit+0x13c>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	61bb      	str	r3, [r7, #24]
 80028cc:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80028ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80028d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d4:	2302      	movs	r3, #2
 80028d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d8:	2300      	movs	r3, #0
 80028da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028dc:	2300      	movs	r3, #0
 80028de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80028e0:	2301      	movs	r3, #1
 80028e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028e4:	f107 031c 	add.w	r3, r7, #28
 80028e8:	4619      	mov	r1, r3
 80028ea:	4839      	ldr	r0, [pc, #228]	; (80029d0 <HAL_TIM_MspPostInit+0x140>)
 80028ec:	f000 feba 	bl	8003664 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80028f0:	e066      	b.n	80029c0 <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM2)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028fa:	d11f      	bne.n	800293c <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028fc:	2300      	movs	r3, #0
 80028fe:	617b      	str	r3, [r7, #20]
 8002900:	4b32      	ldr	r3, [pc, #200]	; (80029cc <HAL_TIM_MspPostInit+0x13c>)
 8002902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002904:	4a31      	ldr	r2, [pc, #196]	; (80029cc <HAL_TIM_MspPostInit+0x13c>)
 8002906:	f043 0301 	orr.w	r3, r3, #1
 800290a:	6313      	str	r3, [r2, #48]	; 0x30
 800290c:	4b2f      	ldr	r3, [pc, #188]	; (80029cc <HAL_TIM_MspPostInit+0x13c>)
 800290e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002910:	f003 0301 	and.w	r3, r3, #1
 8002914:	617b      	str	r3, [r7, #20]
 8002916:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002918:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800291c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291e:	2302      	movs	r3, #2
 8002920:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002922:	2300      	movs	r3, #0
 8002924:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002926:	2300      	movs	r3, #0
 8002928:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800292a:	2301      	movs	r3, #1
 800292c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800292e:	f107 031c 	add.w	r3, r7, #28
 8002932:	4619      	mov	r1, r3
 8002934:	4826      	ldr	r0, [pc, #152]	; (80029d0 <HAL_TIM_MspPostInit+0x140>)
 8002936:	f000 fe95 	bl	8003664 <HAL_GPIO_Init>
}
 800293a:	e041      	b.n	80029c0 <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM3)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a24      	ldr	r2, [pc, #144]	; (80029d4 <HAL_TIM_MspPostInit+0x144>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d13c      	bne.n	80029c0 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002946:	2300      	movs	r3, #0
 8002948:	613b      	str	r3, [r7, #16]
 800294a:	4b20      	ldr	r3, [pc, #128]	; (80029cc <HAL_TIM_MspPostInit+0x13c>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294e:	4a1f      	ldr	r2, [pc, #124]	; (80029cc <HAL_TIM_MspPostInit+0x13c>)
 8002950:	f043 0304 	orr.w	r3, r3, #4
 8002954:	6313      	str	r3, [r2, #48]	; 0x30
 8002956:	4b1d      	ldr	r3, [pc, #116]	; (80029cc <HAL_TIM_MspPostInit+0x13c>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295a:	f003 0304 	and.w	r3, r3, #4
 800295e:	613b      	str	r3, [r7, #16]
 8002960:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002962:	2300      	movs	r3, #0
 8002964:	60fb      	str	r3, [r7, #12]
 8002966:	4b19      	ldr	r3, [pc, #100]	; (80029cc <HAL_TIM_MspPostInit+0x13c>)
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296a:	4a18      	ldr	r2, [pc, #96]	; (80029cc <HAL_TIM_MspPostInit+0x13c>)
 800296c:	f043 0302 	orr.w	r3, r3, #2
 8002970:	6313      	str	r3, [r2, #48]	; 0x30
 8002972:	4b16      	ldr	r3, [pc, #88]	; (80029cc <HAL_TIM_MspPostInit+0x13c>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	60fb      	str	r3, [r7, #12]
 800297c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800297e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002984:	2302      	movs	r3, #2
 8002986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002988:	2300      	movs	r3, #0
 800298a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298c:	2300      	movs	r3, #0
 800298e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002990:	2302      	movs	r3, #2
 8002992:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002994:	f107 031c 	add.w	r3, r7, #28
 8002998:	4619      	mov	r1, r3
 800299a:	480f      	ldr	r0, [pc, #60]	; (80029d8 <HAL_TIM_MspPostInit+0x148>)
 800299c:	f000 fe62 	bl	8003664 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80029a0:	2310      	movs	r3, #16
 80029a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a4:	2302      	movs	r3, #2
 80029a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a8:	2300      	movs	r3, #0
 80029aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ac:	2300      	movs	r3, #0
 80029ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80029b0:	2302      	movs	r3, #2
 80029b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029b4:	f107 031c 	add.w	r3, r7, #28
 80029b8:	4619      	mov	r1, r3
 80029ba:	4808      	ldr	r0, [pc, #32]	; (80029dc <HAL_TIM_MspPostInit+0x14c>)
 80029bc:	f000 fe52 	bl	8003664 <HAL_GPIO_Init>
}
 80029c0:	bf00      	nop
 80029c2:	3730      	adds	r7, #48	; 0x30
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	40010000 	.word	0x40010000
 80029cc:	40023800 	.word	0x40023800
 80029d0:	40020000 	.word	0x40020000
 80029d4:	40000400 	.word	0x40000400
 80029d8:	40020800 	.word	0x40020800
 80029dc:	40020400 	.word	0x40020400

080029e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b08a      	sub	sp, #40	; 0x28
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e8:	f107 0314 	add.w	r3, r7, #20
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	605a      	str	r2, [r3, #4]
 80029f2:	609a      	str	r2, [r3, #8]
 80029f4:	60da      	str	r2, [r3, #12]
 80029f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a19      	ldr	r2, [pc, #100]	; (8002a64 <HAL_UART_MspInit+0x84>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d12b      	bne.n	8002a5a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a02:	2300      	movs	r3, #0
 8002a04:	613b      	str	r3, [r7, #16]
 8002a06:	4b18      	ldr	r3, [pc, #96]	; (8002a68 <HAL_UART_MspInit+0x88>)
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	4a17      	ldr	r2, [pc, #92]	; (8002a68 <HAL_UART_MspInit+0x88>)
 8002a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a10:	6413      	str	r3, [r2, #64]	; 0x40
 8002a12:	4b15      	ldr	r3, [pc, #84]	; (8002a68 <HAL_UART_MspInit+0x88>)
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1a:	613b      	str	r3, [r7, #16]
 8002a1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <HAL_UART_MspInit+0x88>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	4a10      	ldr	r2, [pc, #64]	; (8002a68 <HAL_UART_MspInit+0x88>)
 8002a28:	f043 0301 	orr.w	r3, r3, #1
 8002a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a2e:	4b0e      	ldr	r3, [pc, #56]	; (8002a68 <HAL_UART_MspInit+0x88>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002a3a:	230c      	movs	r3, #12
 8002a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3e:	2302      	movs	r3, #2
 8002a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a42:	2300      	movs	r3, #0
 8002a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a46:	2300      	movs	r3, #0
 8002a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a4a:	2307      	movs	r3, #7
 8002a4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a4e:	f107 0314 	add.w	r3, r7, #20
 8002a52:	4619      	mov	r1, r3
 8002a54:	4805      	ldr	r0, [pc, #20]	; (8002a6c <HAL_UART_MspInit+0x8c>)
 8002a56:	f000 fe05 	bl	8003664 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a5a:	bf00      	nop
 8002a5c:	3728      	adds	r7, #40	; 0x28
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40004400 	.word	0x40004400
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	40020000 	.word	0x40020000

08002a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a74:	e7fe      	b.n	8002a74 <NMI_Handler+0x4>

08002a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a76:	b480      	push	{r7}
 8002a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a7a:	e7fe      	b.n	8002a7a <HardFault_Handler+0x4>

08002a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a80:	e7fe      	b.n	8002a80 <MemManage_Handler+0x4>

08002a82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a82:	b480      	push	{r7}
 8002a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a86:	e7fe      	b.n	8002a86 <BusFault_Handler+0x4>

08002a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a8c:	e7fe      	b.n	8002a8c <UsageFault_Handler+0x4>

08002a8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a92:	bf00      	nop
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002aa0:	bf00      	nop
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002aae:	bf00      	nop
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002abc:	f000 f8c6 	bl	8002c4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ac0:	bf00      	nop
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002acc:	4a14      	ldr	r2, [pc, #80]	; (8002b20 <_sbrk+0x5c>)
 8002ace:	4b15      	ldr	r3, [pc, #84]	; (8002b24 <_sbrk+0x60>)
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ad8:	4b13      	ldr	r3, [pc, #76]	; (8002b28 <_sbrk+0x64>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d102      	bne.n	8002ae6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ae0:	4b11      	ldr	r3, [pc, #68]	; (8002b28 <_sbrk+0x64>)
 8002ae2:	4a12      	ldr	r2, [pc, #72]	; (8002b2c <_sbrk+0x68>)
 8002ae4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ae6:	4b10      	ldr	r3, [pc, #64]	; (8002b28 <_sbrk+0x64>)
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4413      	add	r3, r2
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d207      	bcs.n	8002b04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002af4:	f003 facc 	bl	8006090 <__errno>
 8002af8:	4603      	mov	r3, r0
 8002afa:	220c      	movs	r2, #12
 8002afc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002afe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b02:	e009      	b.n	8002b18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b04:	4b08      	ldr	r3, [pc, #32]	; (8002b28 <_sbrk+0x64>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b0a:	4b07      	ldr	r3, [pc, #28]	; (8002b28 <_sbrk+0x64>)
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4413      	add	r3, r2
 8002b12:	4a05      	ldr	r2, [pc, #20]	; (8002b28 <_sbrk+0x64>)
 8002b14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b16:	68fb      	ldr	r3, [r7, #12]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3718      	adds	r7, #24
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	20018000 	.word	0x20018000
 8002b24:	00000400 	.word	0x00000400
 8002b28:	200000b0 	.word	0x200000b0
 8002b2c:	20000328 	.word	0x20000328

08002b30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b34:	4b06      	ldr	r3, [pc, #24]	; (8002b50 <SystemInit+0x20>)
 8002b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3a:	4a05      	ldr	r2, [pc, #20]	; (8002b50 <SystemInit+0x20>)
 8002b3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b44:	bf00      	nop
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	e000ed00 	.word	0xe000ed00

08002b54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b58:	480d      	ldr	r0, [pc, #52]	; (8002b90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b5a:	490e      	ldr	r1, [pc, #56]	; (8002b94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b5c:	4a0e      	ldr	r2, [pc, #56]	; (8002b98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b60:	e002      	b.n	8002b68 <LoopCopyDataInit>

08002b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b66:	3304      	adds	r3, #4

08002b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b6c:	d3f9      	bcc.n	8002b62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b6e:	4a0b      	ldr	r2, [pc, #44]	; (8002b9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002b70:	4c0b      	ldr	r4, [pc, #44]	; (8002ba0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b74:	e001      	b.n	8002b7a <LoopFillZerobss>

08002b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b78:	3204      	adds	r2, #4

08002b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b7c:	d3fb      	bcc.n	8002b76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002b7e:	f7ff ffd7 	bl	8002b30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b82:	f003 fa8b 	bl	800609c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b86:	f7fe ff9d 	bl	8001ac4 <main>
  bx  lr    
 8002b8a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b8c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b94:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002b98:	08008bc0 	.word	0x08008bc0
  ldr r2, =_sbss
 8002b9c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002ba0:	20000324 	.word	0x20000324

08002ba4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ba4:	e7fe      	b.n	8002ba4 <ADC_IRQHandler>
	...

08002ba8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002bac:	4b0e      	ldr	r3, [pc, #56]	; (8002be8 <HAL_Init+0x40>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a0d      	ldr	r2, [pc, #52]	; (8002be8 <HAL_Init+0x40>)
 8002bb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002bb8:	4b0b      	ldr	r3, [pc, #44]	; (8002be8 <HAL_Init+0x40>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a0a      	ldr	r2, [pc, #40]	; (8002be8 <HAL_Init+0x40>)
 8002bbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bc4:	4b08      	ldr	r3, [pc, #32]	; (8002be8 <HAL_Init+0x40>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a07      	ldr	r2, [pc, #28]	; (8002be8 <HAL_Init+0x40>)
 8002bca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bd0:	2003      	movs	r0, #3
 8002bd2:	f000 fd13 	bl	80035fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bd6:	2000      	movs	r0, #0
 8002bd8:	f000 f808 	bl	8002bec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bdc:	f7ff fcb8 	bl	8002550 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	40023c00 	.word	0x40023c00

08002bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bf4:	4b12      	ldr	r3, [pc, #72]	; (8002c40 <HAL_InitTick+0x54>)
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	4b12      	ldr	r3, [pc, #72]	; (8002c44 <HAL_InitTick+0x58>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c02:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 fd1d 	bl	800364a <HAL_SYSTICK_Config>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e00e      	b.n	8002c38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2b0f      	cmp	r3, #15
 8002c1e:	d80a      	bhi.n	8002c36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c20:	2200      	movs	r2, #0
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c28:	f000 fcf3 	bl	8003612 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c2c:	4a06      	ldr	r2, [pc, #24]	; (8002c48 <HAL_InitTick+0x5c>)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
 8002c34:	e000      	b.n	8002c38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3708      	adds	r7, #8
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	20000004 	.word	0x20000004
 8002c44:	2000000c 	.word	0x2000000c
 8002c48:	20000008 	.word	0x20000008

08002c4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c50:	4b06      	ldr	r3, [pc, #24]	; (8002c6c <HAL_IncTick+0x20>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	461a      	mov	r2, r3
 8002c56:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <HAL_IncTick+0x24>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	4a04      	ldr	r2, [pc, #16]	; (8002c70 <HAL_IncTick+0x24>)
 8002c5e:	6013      	str	r3, [r2, #0]
}
 8002c60:	bf00      	nop
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	2000000c 	.word	0x2000000c
 8002c70:	20000310 	.word	0x20000310

08002c74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  return uwTick;
 8002c78:	4b03      	ldr	r3, [pc, #12]	; (8002c88 <HAL_GetTick+0x14>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	20000310 	.word	0x20000310

08002c8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c94:	f7ff ffee 	bl	8002c74 <HAL_GetTick>
 8002c98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ca4:	d005      	beq.n	8002cb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ca6:	4b0a      	ldr	r3, [pc, #40]	; (8002cd0 <HAL_Delay+0x44>)
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	461a      	mov	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	4413      	add	r3, r2
 8002cb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002cb2:	bf00      	nop
 8002cb4:	f7ff ffde 	bl	8002c74 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d8f7      	bhi.n	8002cb4 <HAL_Delay+0x28>
  {
  }
}
 8002cc4:	bf00      	nop
 8002cc6:	bf00      	nop
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	2000000c 	.word	0x2000000c

08002cd4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e033      	b.n	8002d52 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d109      	bne.n	8002d06 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7ff fc54 	bl	80025a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	f003 0310 	and.w	r3, r3, #16
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d118      	bne.n	8002d44 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d1a:	f023 0302 	bic.w	r3, r3, #2
 8002d1e:	f043 0202 	orr.w	r2, r3, #2
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 faba 	bl	80032a0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	f023 0303 	bic.w	r3, r3, #3
 8002d3a:	f043 0201 	orr.w	r2, r3, #1
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	641a      	str	r2, [r3, #64]	; 0x40
 8002d42:	e001      	b.n	8002d48 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
	...

08002d5c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002d64:	2300      	movs	r3, #0
 8002d66:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d101      	bne.n	8002d76 <HAL_ADC_Start+0x1a>
 8002d72:	2302      	movs	r3, #2
 8002d74:	e097      	b.n	8002ea6 <HAL_ADC_Start+0x14a>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d018      	beq.n	8002dbe <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689a      	ldr	r2, [r3, #8]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f042 0201 	orr.w	r2, r2, #1
 8002d9a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002d9c:	4b45      	ldr	r3, [pc, #276]	; (8002eb4 <HAL_ADC_Start+0x158>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a45      	ldr	r2, [pc, #276]	; (8002eb8 <HAL_ADC_Start+0x15c>)
 8002da2:	fba2 2303 	umull	r2, r3, r2, r3
 8002da6:	0c9a      	lsrs	r2, r3, #18
 8002da8:	4613      	mov	r3, r2
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	4413      	add	r3, r2
 8002dae:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002db0:	e002      	b.n	8002db8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	3b01      	subs	r3, #1
 8002db6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d1f9      	bne.n	8002db2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d15f      	bne.n	8002e8c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002dd4:	f023 0301 	bic.w	r3, r3, #1
 8002dd8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d007      	beq.n	8002dfe <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002df6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e0a:	d106      	bne.n	8002e1a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e10:	f023 0206 	bic.w	r2, r3, #6
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	645a      	str	r2, [r3, #68]	; 0x44
 8002e18:	e002      	b.n	8002e20 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e28:	4b24      	ldr	r3, [pc, #144]	; (8002ebc <HAL_ADC_Start+0x160>)
 8002e2a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002e34:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f003 031f 	and.w	r3, r3, #31
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10f      	bne.n	8002e62 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d129      	bne.n	8002ea4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689a      	ldr	r2, [r3, #8]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002e5e:	609a      	str	r2, [r3, #8]
 8002e60:	e020      	b.n	8002ea4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a16      	ldr	r2, [pc, #88]	; (8002ec0 <HAL_ADC_Start+0x164>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d11b      	bne.n	8002ea4 <HAL_ADC_Start+0x148>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d114      	bne.n	8002ea4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002e88:	609a      	str	r2, [r3, #8]
 8002e8a:	e00b      	b.n	8002ea4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e90:	f043 0210 	orr.w	r2, r3, #16
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9c:	f043 0201 	orr.w	r2, r3, #1
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3714      	adds	r7, #20
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	20000004 	.word	0x20000004
 8002eb8:	431bde83 	.word	0x431bde83
 8002ebc:	40012300 	.word	0x40012300
 8002ec0:	40012000 	.word	0x40012000

08002ec4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d101      	bne.n	8002eda <HAL_ADC_Stop+0x16>
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	e021      	b.n	8002f1e <HAL_ADC_Stop+0x5a>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 0201 	bic.w	r2, r2, #1
 8002ef0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f003 0301 	and.w	r3, r3, #1
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d109      	bne.n	8002f14 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f04:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f08:	f023 0301 	bic.w	r3, r3, #1
 8002f0c:	f043 0201 	orr.w	r2, r3, #1
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b084      	sub	sp, #16
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
 8002f32:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002f34:	2300      	movs	r3, #0
 8002f36:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f46:	d113      	bne.n	8002f70 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002f52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f56:	d10b      	bne.n	8002f70 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5c:	f043 0220 	orr.w	r2, r3, #32
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e063      	b.n	8003038 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002f70:	f7ff fe80 	bl	8002c74 <HAL_GetTick>
 8002f74:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002f76:	e021      	b.n	8002fbc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f7e:	d01d      	beq.n	8002fbc <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d007      	beq.n	8002f96 <HAL_ADC_PollForConversion+0x6c>
 8002f86:	f7ff fe75 	bl	8002c74 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d212      	bcs.n	8002fbc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d00b      	beq.n	8002fbc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa8:	f043 0204 	orr.w	r2, r3, #4
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e03d      	b.n	8003038 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d1d6      	bne.n	8002f78 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f06f 0212 	mvn.w	r2, #18
 8002fd2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d123      	bne.n	8003036 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d11f      	bne.n	8003036 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003000:	2b00      	cmp	r3, #0
 8003002:	d006      	beq.n	8003012 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800300e:	2b00      	cmp	r3, #0
 8003010:	d111      	bne.n	8003036 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d105      	bne.n	8003036 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	f043 0201 	orr.w	r2, r3, #1
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800304e:	4618      	mov	r0, r3
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
	...

0800305c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800305c:	b480      	push	{r7}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003066:	2300      	movs	r3, #0
 8003068:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003070:	2b01      	cmp	r3, #1
 8003072:	d101      	bne.n	8003078 <HAL_ADC_ConfigChannel+0x1c>
 8003074:	2302      	movs	r3, #2
 8003076:	e105      	b.n	8003284 <HAL_ADC_ConfigChannel+0x228>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2b09      	cmp	r3, #9
 8003086:	d925      	bls.n	80030d4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68d9      	ldr	r1, [r3, #12]
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	b29b      	uxth	r3, r3
 8003094:	461a      	mov	r2, r3
 8003096:	4613      	mov	r3, r2
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	4413      	add	r3, r2
 800309c:	3b1e      	subs	r3, #30
 800309e:	2207      	movs	r2, #7
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	43da      	mvns	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	400a      	ands	r2, r1
 80030ac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68d9      	ldr	r1, [r3, #12]
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	b29b      	uxth	r3, r3
 80030be:	4618      	mov	r0, r3
 80030c0:	4603      	mov	r3, r0
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	4403      	add	r3, r0
 80030c6:	3b1e      	subs	r3, #30
 80030c8:	409a      	lsls	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	60da      	str	r2, [r3, #12]
 80030d2:	e022      	b.n	800311a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6919      	ldr	r1, [r3, #16]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	b29b      	uxth	r3, r3
 80030e0:	461a      	mov	r2, r3
 80030e2:	4613      	mov	r3, r2
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	4413      	add	r3, r2
 80030e8:	2207      	movs	r2, #7
 80030ea:	fa02 f303 	lsl.w	r3, r2, r3
 80030ee:	43da      	mvns	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	400a      	ands	r2, r1
 80030f6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6919      	ldr	r1, [r3, #16]
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	689a      	ldr	r2, [r3, #8]
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	b29b      	uxth	r3, r3
 8003108:	4618      	mov	r0, r3
 800310a:	4603      	mov	r3, r0
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	4403      	add	r3, r0
 8003110:	409a      	lsls	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	2b06      	cmp	r3, #6
 8003120:	d824      	bhi.n	800316c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	4613      	mov	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	3b05      	subs	r3, #5
 8003134:	221f      	movs	r2, #31
 8003136:	fa02 f303 	lsl.w	r3, r2, r3
 800313a:	43da      	mvns	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	400a      	ands	r2, r1
 8003142:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	b29b      	uxth	r3, r3
 8003150:	4618      	mov	r0, r3
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685a      	ldr	r2, [r3, #4]
 8003156:	4613      	mov	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4413      	add	r3, r2
 800315c:	3b05      	subs	r3, #5
 800315e:	fa00 f203 	lsl.w	r2, r0, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	430a      	orrs	r2, r1
 8003168:	635a      	str	r2, [r3, #52]	; 0x34
 800316a:	e04c      	b.n	8003206 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	2b0c      	cmp	r3, #12
 8003172:	d824      	bhi.n	80031be <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685a      	ldr	r2, [r3, #4]
 800317e:	4613      	mov	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4413      	add	r3, r2
 8003184:	3b23      	subs	r3, #35	; 0x23
 8003186:	221f      	movs	r2, #31
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	43da      	mvns	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	400a      	ands	r2, r1
 8003194:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	4618      	mov	r0, r3
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	4613      	mov	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4413      	add	r3, r2
 80031ae:	3b23      	subs	r3, #35	; 0x23
 80031b0:	fa00 f203 	lsl.w	r2, r0, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	430a      	orrs	r2, r1
 80031ba:	631a      	str	r2, [r3, #48]	; 0x30
 80031bc:	e023      	b.n	8003206 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	4613      	mov	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	4413      	add	r3, r2
 80031ce:	3b41      	subs	r3, #65	; 0x41
 80031d0:	221f      	movs	r2, #31
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	43da      	mvns	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	400a      	ands	r2, r1
 80031de:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	4618      	mov	r0, r3
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	4613      	mov	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4413      	add	r3, r2
 80031f8:	3b41      	subs	r3, #65	; 0x41
 80031fa:	fa00 f203 	lsl.w	r2, r0, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	430a      	orrs	r2, r1
 8003204:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003206:	4b22      	ldr	r3, [pc, #136]	; (8003290 <HAL_ADC_ConfigChannel+0x234>)
 8003208:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a21      	ldr	r2, [pc, #132]	; (8003294 <HAL_ADC_ConfigChannel+0x238>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d109      	bne.n	8003228 <HAL_ADC_ConfigChannel+0x1cc>
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2b12      	cmp	r3, #18
 800321a:	d105      	bne.n	8003228 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a19      	ldr	r2, [pc, #100]	; (8003294 <HAL_ADC_ConfigChannel+0x238>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d123      	bne.n	800327a <HAL_ADC_ConfigChannel+0x21e>
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2b10      	cmp	r3, #16
 8003238:	d003      	beq.n	8003242 <HAL_ADC_ConfigChannel+0x1e6>
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2b11      	cmp	r3, #17
 8003240:	d11b      	bne.n	800327a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2b10      	cmp	r3, #16
 8003254:	d111      	bne.n	800327a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003256:	4b10      	ldr	r3, [pc, #64]	; (8003298 <HAL_ADC_ConfigChannel+0x23c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a10      	ldr	r2, [pc, #64]	; (800329c <HAL_ADC_ConfigChannel+0x240>)
 800325c:	fba2 2303 	umull	r2, r3, r2, r3
 8003260:	0c9a      	lsrs	r2, r3, #18
 8003262:	4613      	mov	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4413      	add	r3, r2
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800326c:	e002      	b.n	8003274 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	3b01      	subs	r3, #1
 8003272:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1f9      	bne.n	800326e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3714      	adds	r7, #20
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	40012300 	.word	0x40012300
 8003294:	40012000 	.word	0x40012000
 8003298:	20000004 	.word	0x20000004
 800329c:	431bde83 	.word	0x431bde83

080032a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032a8:	4b79      	ldr	r3, [pc, #484]	; (8003490 <ADC_Init+0x1f0>)
 80032aa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	685a      	ldr	r2, [r3, #4]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	431a      	orrs	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	685a      	ldr	r2, [r3, #4]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	6859      	ldr	r1, [r3, #4]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	021a      	lsls	r2, r3, #8
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80032f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	6859      	ldr	r1, [r3, #4]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689a      	ldr	r2, [r3, #8]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	430a      	orrs	r2, r1
 800330a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	689a      	ldr	r2, [r3, #8]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800331a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6899      	ldr	r1, [r3, #8]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68da      	ldr	r2, [r3, #12]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	430a      	orrs	r2, r1
 800332c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003332:	4a58      	ldr	r2, [pc, #352]	; (8003494 <ADC_Init+0x1f4>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d022      	beq.n	800337e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	689a      	ldr	r2, [r3, #8]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003346:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6899      	ldr	r1, [r3, #8]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003368:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6899      	ldr	r1, [r3, #8]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	430a      	orrs	r2, r1
 800337a:	609a      	str	r2, [r3, #8]
 800337c:	e00f      	b.n	800339e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800338c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	689a      	ldr	r2, [r3, #8]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800339c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 0202 	bic.w	r2, r2, #2
 80033ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6899      	ldr	r1, [r3, #8]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	7e1b      	ldrb	r3, [r3, #24]
 80033b8:	005a      	lsls	r2, r3, #1
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d01b      	beq.n	8003404 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	685a      	ldr	r2, [r3, #4]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033da:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80033ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6859      	ldr	r1, [r3, #4]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f6:	3b01      	subs	r3, #1
 80033f8:	035a      	lsls	r2, r3, #13
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	430a      	orrs	r2, r1
 8003400:	605a      	str	r2, [r3, #4]
 8003402:	e007      	b.n	8003414 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003412:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003422:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	3b01      	subs	r3, #1
 8003430:	051a      	lsls	r2, r3, #20
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	430a      	orrs	r2, r1
 8003438:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689a      	ldr	r2, [r3, #8]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003448:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	6899      	ldr	r1, [r3, #8]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003456:	025a      	lsls	r2, r3, #9
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689a      	ldr	r2, [r3, #8]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800346e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	6899      	ldr	r1, [r3, #8]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	029a      	lsls	r2, r3, #10
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	430a      	orrs	r2, r1
 8003482:	609a      	str	r2, [r3, #8]
}
 8003484:	bf00      	nop
 8003486:	3714      	adds	r7, #20
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr
 8003490:	40012300 	.word	0x40012300
 8003494:	0f000001 	.word	0x0f000001

08003498 <__NVIC_SetPriorityGrouping>:
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034a8:	4b0c      	ldr	r3, [pc, #48]	; (80034dc <__NVIC_SetPriorityGrouping+0x44>)
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034b4:	4013      	ands	r3, r2
 80034b6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034ca:	4a04      	ldr	r2, [pc, #16]	; (80034dc <__NVIC_SetPriorityGrouping+0x44>)
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	60d3      	str	r3, [r2, #12]
}
 80034d0:	bf00      	nop
 80034d2:	3714      	adds	r7, #20
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	e000ed00 	.word	0xe000ed00

080034e0 <__NVIC_GetPriorityGrouping>:
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034e4:	4b04      	ldr	r3, [pc, #16]	; (80034f8 <__NVIC_GetPriorityGrouping+0x18>)
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	0a1b      	lsrs	r3, r3, #8
 80034ea:	f003 0307 	and.w	r3, r3, #7
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr
 80034f8:	e000ed00 	.word	0xe000ed00

080034fc <__NVIC_SetPriority>:
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	4603      	mov	r3, r0
 8003504:	6039      	str	r1, [r7, #0]
 8003506:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800350c:	2b00      	cmp	r3, #0
 800350e:	db0a      	blt.n	8003526 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	b2da      	uxtb	r2, r3
 8003514:	490c      	ldr	r1, [pc, #48]	; (8003548 <__NVIC_SetPriority+0x4c>)
 8003516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800351a:	0112      	lsls	r2, r2, #4
 800351c:	b2d2      	uxtb	r2, r2
 800351e:	440b      	add	r3, r1
 8003520:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003524:	e00a      	b.n	800353c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	b2da      	uxtb	r2, r3
 800352a:	4908      	ldr	r1, [pc, #32]	; (800354c <__NVIC_SetPriority+0x50>)
 800352c:	79fb      	ldrb	r3, [r7, #7]
 800352e:	f003 030f 	and.w	r3, r3, #15
 8003532:	3b04      	subs	r3, #4
 8003534:	0112      	lsls	r2, r2, #4
 8003536:	b2d2      	uxtb	r2, r2
 8003538:	440b      	add	r3, r1
 800353a:	761a      	strb	r2, [r3, #24]
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr
 8003548:	e000e100 	.word	0xe000e100
 800354c:	e000ed00 	.word	0xe000ed00

08003550 <NVIC_EncodePriority>:
{
 8003550:	b480      	push	{r7}
 8003552:	b089      	sub	sp, #36	; 0x24
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f003 0307 	and.w	r3, r3, #7
 8003562:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	f1c3 0307 	rsb	r3, r3, #7
 800356a:	2b04      	cmp	r3, #4
 800356c:	bf28      	it	cs
 800356e:	2304      	movcs	r3, #4
 8003570:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	3304      	adds	r3, #4
 8003576:	2b06      	cmp	r3, #6
 8003578:	d902      	bls.n	8003580 <NVIC_EncodePriority+0x30>
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	3b03      	subs	r3, #3
 800357e:	e000      	b.n	8003582 <NVIC_EncodePriority+0x32>
 8003580:	2300      	movs	r3, #0
 8003582:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003584:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	fa02 f303 	lsl.w	r3, r2, r3
 800358e:	43da      	mvns	r2, r3
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	401a      	ands	r2, r3
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003598:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	fa01 f303 	lsl.w	r3, r1, r3
 80035a2:	43d9      	mvns	r1, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035a8:	4313      	orrs	r3, r2
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3724      	adds	r7, #36	; 0x24
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
	...

080035b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	3b01      	subs	r3, #1
 80035c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035c8:	d301      	bcc.n	80035ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035ca:	2301      	movs	r3, #1
 80035cc:	e00f      	b.n	80035ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035ce:	4a0a      	ldr	r2, [pc, #40]	; (80035f8 <SysTick_Config+0x40>)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	3b01      	subs	r3, #1
 80035d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035d6:	210f      	movs	r1, #15
 80035d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035dc:	f7ff ff8e 	bl	80034fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035e0:	4b05      	ldr	r3, [pc, #20]	; (80035f8 <SysTick_Config+0x40>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035e6:	4b04      	ldr	r3, [pc, #16]	; (80035f8 <SysTick_Config+0x40>)
 80035e8:	2207      	movs	r2, #7
 80035ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	e000e010 	.word	0xe000e010

080035fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f7ff ff47 	bl	8003498 <__NVIC_SetPriorityGrouping>
}
 800360a:	bf00      	nop
 800360c:	3708      	adds	r7, #8
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003612:	b580      	push	{r7, lr}
 8003614:	b086      	sub	sp, #24
 8003616:	af00      	add	r7, sp, #0
 8003618:	4603      	mov	r3, r0
 800361a:	60b9      	str	r1, [r7, #8]
 800361c:	607a      	str	r2, [r7, #4]
 800361e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003620:	2300      	movs	r3, #0
 8003622:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003624:	f7ff ff5c 	bl	80034e0 <__NVIC_GetPriorityGrouping>
 8003628:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	68b9      	ldr	r1, [r7, #8]
 800362e:	6978      	ldr	r0, [r7, #20]
 8003630:	f7ff ff8e 	bl	8003550 <NVIC_EncodePriority>
 8003634:	4602      	mov	r2, r0
 8003636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800363a:	4611      	mov	r1, r2
 800363c:	4618      	mov	r0, r3
 800363e:	f7ff ff5d 	bl	80034fc <__NVIC_SetPriority>
}
 8003642:	bf00      	nop
 8003644:	3718      	adds	r7, #24
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800364a:	b580      	push	{r7, lr}
 800364c:	b082      	sub	sp, #8
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7ff ffb0 	bl	80035b8 <SysTick_Config>
 8003658:	4603      	mov	r3, r0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3708      	adds	r7, #8
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
	...

08003664 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003664:	b480      	push	{r7}
 8003666:	b089      	sub	sp, #36	; 0x24
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800366e:	2300      	movs	r3, #0
 8003670:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003672:	2300      	movs	r3, #0
 8003674:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003676:	2300      	movs	r3, #0
 8003678:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800367a:	2300      	movs	r3, #0
 800367c:	61fb      	str	r3, [r7, #28]
 800367e:	e159      	b.n	8003934 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003680:	2201      	movs	r2, #1
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	fa02 f303 	lsl.w	r3, r2, r3
 8003688:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	4013      	ands	r3, r2
 8003692:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	429a      	cmp	r2, r3
 800369a:	f040 8148 	bne.w	800392e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f003 0303 	and.w	r3, r3, #3
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d005      	beq.n	80036b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d130      	bne.n	8003718 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	2203      	movs	r2, #3
 80036c2:	fa02 f303 	lsl.w	r3, r2, r3
 80036c6:	43db      	mvns	r3, r3
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	4013      	ands	r3, r2
 80036cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	68da      	ldr	r2, [r3, #12]
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	005b      	lsls	r3, r3, #1
 80036d6:	fa02 f303 	lsl.w	r3, r2, r3
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	4313      	orrs	r3, r2
 80036de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036ec:	2201      	movs	r2, #1
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	43db      	mvns	r3, r3
 80036f6:	69ba      	ldr	r2, [r7, #24]
 80036f8:	4013      	ands	r3, r2
 80036fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	091b      	lsrs	r3, r3, #4
 8003702:	f003 0201 	and.w	r2, r3, #1
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	fa02 f303 	lsl.w	r3, r2, r3
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	4313      	orrs	r3, r2
 8003710:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f003 0303 	and.w	r3, r3, #3
 8003720:	2b03      	cmp	r3, #3
 8003722:	d017      	beq.n	8003754 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	2203      	movs	r2, #3
 8003730:	fa02 f303 	lsl.w	r3, r2, r3
 8003734:	43db      	mvns	r3, r3
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	4013      	ands	r3, r2
 800373a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	689a      	ldr	r2, [r3, #8]
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	fa02 f303 	lsl.w	r3, r2, r3
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	4313      	orrs	r3, r2
 800374c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f003 0303 	and.w	r3, r3, #3
 800375c:	2b02      	cmp	r3, #2
 800375e:	d123      	bne.n	80037a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	08da      	lsrs	r2, r3, #3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	3208      	adds	r2, #8
 8003768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800376c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	f003 0307 	and.w	r3, r3, #7
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	220f      	movs	r2, #15
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	43db      	mvns	r3, r3
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	4013      	ands	r3, r2
 8003782:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	691a      	ldr	r2, [r3, #16]
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	f003 0307 	and.w	r3, r3, #7
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	4313      	orrs	r3, r2
 8003798:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	08da      	lsrs	r2, r3, #3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	3208      	adds	r2, #8
 80037a2:	69b9      	ldr	r1, [r7, #24]
 80037a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	2203      	movs	r2, #3
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	43db      	mvns	r3, r3
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	4013      	ands	r3, r2
 80037be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f003 0203 	and.w	r2, r3, #3
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	005b      	lsls	r3, r3, #1
 80037cc:	fa02 f303 	lsl.w	r3, r2, r3
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f000 80a2 	beq.w	800392e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ea:	2300      	movs	r3, #0
 80037ec:	60fb      	str	r3, [r7, #12]
 80037ee:	4b57      	ldr	r3, [pc, #348]	; (800394c <HAL_GPIO_Init+0x2e8>)
 80037f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f2:	4a56      	ldr	r2, [pc, #344]	; (800394c <HAL_GPIO_Init+0x2e8>)
 80037f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037f8:	6453      	str	r3, [r2, #68]	; 0x44
 80037fa:	4b54      	ldr	r3, [pc, #336]	; (800394c <HAL_GPIO_Init+0x2e8>)
 80037fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003802:	60fb      	str	r3, [r7, #12]
 8003804:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003806:	4a52      	ldr	r2, [pc, #328]	; (8003950 <HAL_GPIO_Init+0x2ec>)
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	089b      	lsrs	r3, r3, #2
 800380c:	3302      	adds	r3, #2
 800380e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003812:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	f003 0303 	and.w	r3, r3, #3
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	220f      	movs	r2, #15
 800381e:	fa02 f303 	lsl.w	r3, r2, r3
 8003822:	43db      	mvns	r3, r3
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	4013      	ands	r3, r2
 8003828:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a49      	ldr	r2, [pc, #292]	; (8003954 <HAL_GPIO_Init+0x2f0>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d019      	beq.n	8003866 <HAL_GPIO_Init+0x202>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a48      	ldr	r2, [pc, #288]	; (8003958 <HAL_GPIO_Init+0x2f4>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d013      	beq.n	8003862 <HAL_GPIO_Init+0x1fe>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a47      	ldr	r2, [pc, #284]	; (800395c <HAL_GPIO_Init+0x2f8>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d00d      	beq.n	800385e <HAL_GPIO_Init+0x1fa>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a46      	ldr	r2, [pc, #280]	; (8003960 <HAL_GPIO_Init+0x2fc>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d007      	beq.n	800385a <HAL_GPIO_Init+0x1f6>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a45      	ldr	r2, [pc, #276]	; (8003964 <HAL_GPIO_Init+0x300>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d101      	bne.n	8003856 <HAL_GPIO_Init+0x1f2>
 8003852:	2304      	movs	r3, #4
 8003854:	e008      	b.n	8003868 <HAL_GPIO_Init+0x204>
 8003856:	2307      	movs	r3, #7
 8003858:	e006      	b.n	8003868 <HAL_GPIO_Init+0x204>
 800385a:	2303      	movs	r3, #3
 800385c:	e004      	b.n	8003868 <HAL_GPIO_Init+0x204>
 800385e:	2302      	movs	r3, #2
 8003860:	e002      	b.n	8003868 <HAL_GPIO_Init+0x204>
 8003862:	2301      	movs	r3, #1
 8003864:	e000      	b.n	8003868 <HAL_GPIO_Init+0x204>
 8003866:	2300      	movs	r3, #0
 8003868:	69fa      	ldr	r2, [r7, #28]
 800386a:	f002 0203 	and.w	r2, r2, #3
 800386e:	0092      	lsls	r2, r2, #2
 8003870:	4093      	lsls	r3, r2
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	4313      	orrs	r3, r2
 8003876:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003878:	4935      	ldr	r1, [pc, #212]	; (8003950 <HAL_GPIO_Init+0x2ec>)
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	089b      	lsrs	r3, r3, #2
 800387e:	3302      	adds	r3, #2
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003886:	4b38      	ldr	r3, [pc, #224]	; (8003968 <HAL_GPIO_Init+0x304>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	43db      	mvns	r3, r3
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	4013      	ands	r3, r2
 8003894:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d003      	beq.n	80038aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038aa:	4a2f      	ldr	r2, [pc, #188]	; (8003968 <HAL_GPIO_Init+0x304>)
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80038b0:	4b2d      	ldr	r3, [pc, #180]	; (8003968 <HAL_GPIO_Init+0x304>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	43db      	mvns	r3, r3
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	4013      	ands	r3, r2
 80038be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d003      	beq.n	80038d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038d4:	4a24      	ldr	r2, [pc, #144]	; (8003968 <HAL_GPIO_Init+0x304>)
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038da:	4b23      	ldr	r3, [pc, #140]	; (8003968 <HAL_GPIO_Init+0x304>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	43db      	mvns	r3, r3
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	4013      	ands	r3, r2
 80038e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d003      	beq.n	80038fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038fe:	4a1a      	ldr	r2, [pc, #104]	; (8003968 <HAL_GPIO_Init+0x304>)
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003904:	4b18      	ldr	r3, [pc, #96]	; (8003968 <HAL_GPIO_Init+0x304>)
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	43db      	mvns	r3, r3
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	4013      	ands	r3, r2
 8003912:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d003      	beq.n	8003928 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	4313      	orrs	r3, r2
 8003926:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003928:	4a0f      	ldr	r2, [pc, #60]	; (8003968 <HAL_GPIO_Init+0x304>)
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	3301      	adds	r3, #1
 8003932:	61fb      	str	r3, [r7, #28]
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	2b0f      	cmp	r3, #15
 8003938:	f67f aea2 	bls.w	8003680 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800393c:	bf00      	nop
 800393e:	bf00      	nop
 8003940:	3724      	adds	r7, #36	; 0x24
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	40023800 	.word	0x40023800
 8003950:	40013800 	.word	0x40013800
 8003954:	40020000 	.word	0x40020000
 8003958:	40020400 	.word	0x40020400
 800395c:	40020800 	.word	0x40020800
 8003960:	40020c00 	.word	0x40020c00
 8003964:	40021000 	.word	0x40021000
 8003968:	40013c00 	.word	0x40013c00

0800396c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	460b      	mov	r3, r1
 8003976:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	691a      	ldr	r2, [r3, #16]
 800397c:	887b      	ldrh	r3, [r7, #2]
 800397e:	4013      	ands	r3, r2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d002      	beq.n	800398a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003984:	2301      	movs	r3, #1
 8003986:	73fb      	strb	r3, [r7, #15]
 8003988:	e001      	b.n	800398e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800398a:	2300      	movs	r3, #0
 800398c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800398e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003990:	4618      	mov	r0, r3
 8003992:	3714      	adds	r7, #20
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	460b      	mov	r3, r1
 80039a6:	807b      	strh	r3, [r7, #2]
 80039a8:	4613      	mov	r3, r2
 80039aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039ac:	787b      	ldrb	r3, [r7, #1]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d003      	beq.n	80039ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039b2:	887a      	ldrh	r2, [r7, #2]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039b8:	e003      	b.n	80039c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039ba:	887b      	ldrh	r3, [r7, #2]
 80039bc:	041a      	lsls	r2, r3, #16
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	619a      	str	r2, [r3, #24]
}
 80039c2:	bf00      	nop
 80039c4:	370c      	adds	r7, #12
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
	...

080039d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e12b      	b.n	8003c3a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d106      	bne.n	80039fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f7fe fe16 	bl	8002628 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2224      	movs	r2, #36	; 0x24
 8003a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f022 0201 	bic.w	r2, r2, #1
 8003a12:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a34:	f001 fa06 	bl	8004e44 <HAL_RCC_GetPCLK1Freq>
 8003a38:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	4a81      	ldr	r2, [pc, #516]	; (8003c44 <HAL_I2C_Init+0x274>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d807      	bhi.n	8003a54 <HAL_I2C_Init+0x84>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	4a80      	ldr	r2, [pc, #512]	; (8003c48 <HAL_I2C_Init+0x278>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	bf94      	ite	ls
 8003a4c:	2301      	movls	r3, #1
 8003a4e:	2300      	movhi	r3, #0
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	e006      	b.n	8003a62 <HAL_I2C_Init+0x92>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	4a7d      	ldr	r2, [pc, #500]	; (8003c4c <HAL_I2C_Init+0x27c>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	bf94      	ite	ls
 8003a5c:	2301      	movls	r3, #1
 8003a5e:	2300      	movhi	r3, #0
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e0e7      	b.n	8003c3a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	4a78      	ldr	r2, [pc, #480]	; (8003c50 <HAL_I2C_Init+0x280>)
 8003a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a72:	0c9b      	lsrs	r3, r3, #18
 8003a74:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	4a6a      	ldr	r2, [pc, #424]	; (8003c44 <HAL_I2C_Init+0x274>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d802      	bhi.n	8003aa4 <HAL_I2C_Init+0xd4>
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	e009      	b.n	8003ab8 <HAL_I2C_Init+0xe8>
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003aaa:	fb02 f303 	mul.w	r3, r2, r3
 8003aae:	4a69      	ldr	r2, [pc, #420]	; (8003c54 <HAL_I2C_Init+0x284>)
 8003ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab4:	099b      	lsrs	r3, r3, #6
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	6812      	ldr	r2, [r2, #0]
 8003abc:	430b      	orrs	r3, r1
 8003abe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003aca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	495c      	ldr	r1, [pc, #368]	; (8003c44 <HAL_I2C_Init+0x274>)
 8003ad4:	428b      	cmp	r3, r1
 8003ad6:	d819      	bhi.n	8003b0c <HAL_I2C_Init+0x13c>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	1e59      	subs	r1, r3, #1
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	005b      	lsls	r3, r3, #1
 8003ae2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ae6:	1c59      	adds	r1, r3, #1
 8003ae8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003aec:	400b      	ands	r3, r1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00a      	beq.n	8003b08 <HAL_I2C_Init+0x138>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	1e59      	subs	r1, r3, #1
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	005b      	lsls	r3, r3, #1
 8003afc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b00:	3301      	adds	r3, #1
 8003b02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b06:	e051      	b.n	8003bac <HAL_I2C_Init+0x1dc>
 8003b08:	2304      	movs	r3, #4
 8003b0a:	e04f      	b.n	8003bac <HAL_I2C_Init+0x1dc>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d111      	bne.n	8003b38 <HAL_I2C_Init+0x168>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	1e58      	subs	r0, r3, #1
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6859      	ldr	r1, [r3, #4]
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	005b      	lsls	r3, r3, #1
 8003b20:	440b      	add	r3, r1
 8003b22:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b26:	3301      	adds	r3, #1
 8003b28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	bf0c      	ite	eq
 8003b30:	2301      	moveq	r3, #1
 8003b32:	2300      	movne	r3, #0
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	e012      	b.n	8003b5e <HAL_I2C_Init+0x18e>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	1e58      	subs	r0, r3, #1
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6859      	ldr	r1, [r3, #4]
 8003b40:	460b      	mov	r3, r1
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	440b      	add	r3, r1
 8003b46:	0099      	lsls	r1, r3, #2
 8003b48:	440b      	add	r3, r1
 8003b4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b4e:	3301      	adds	r3, #1
 8003b50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	bf0c      	ite	eq
 8003b58:	2301      	moveq	r3, #1
 8003b5a:	2300      	movne	r3, #0
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <HAL_I2C_Init+0x196>
 8003b62:	2301      	movs	r3, #1
 8003b64:	e022      	b.n	8003bac <HAL_I2C_Init+0x1dc>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10e      	bne.n	8003b8c <HAL_I2C_Init+0x1bc>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	1e58      	subs	r0, r3, #1
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6859      	ldr	r1, [r3, #4]
 8003b76:	460b      	mov	r3, r1
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	440b      	add	r3, r1
 8003b7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b80:	3301      	adds	r3, #1
 8003b82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b8a:	e00f      	b.n	8003bac <HAL_I2C_Init+0x1dc>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	1e58      	subs	r0, r3, #1
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6859      	ldr	r1, [r3, #4]
 8003b94:	460b      	mov	r3, r1
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	440b      	add	r3, r1
 8003b9a:	0099      	lsls	r1, r3, #2
 8003b9c:	440b      	add	r3, r1
 8003b9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ba8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003bac:	6879      	ldr	r1, [r7, #4]
 8003bae:	6809      	ldr	r1, [r1, #0]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	69da      	ldr	r2, [r3, #28]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003bda:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	6911      	ldr	r1, [r2, #16]
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	68d2      	ldr	r2, [r2, #12]
 8003be6:	4311      	orrs	r1, r2
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	6812      	ldr	r2, [r2, #0]
 8003bec:	430b      	orrs	r3, r1
 8003bee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	695a      	ldr	r2, [r3, #20]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	431a      	orrs	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f042 0201 	orr.w	r2, r2, #1
 8003c1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2220      	movs	r2, #32
 8003c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	000186a0 	.word	0x000186a0
 8003c48:	001e847f 	.word	0x001e847f
 8003c4c:	003d08ff 	.word	0x003d08ff
 8003c50:	431bde83 	.word	0x431bde83
 8003c54:	10624dd3 	.word	0x10624dd3

08003c58 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b08c      	sub	sp, #48	; 0x30
 8003c5c:	af02      	add	r7, sp, #8
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	4608      	mov	r0, r1
 8003c62:	4611      	mov	r1, r2
 8003c64:	461a      	mov	r2, r3
 8003c66:	4603      	mov	r3, r0
 8003c68:	817b      	strh	r3, [r7, #10]
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	813b      	strh	r3, [r7, #8]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c72:	f7fe ffff 	bl	8002c74 <HAL_GetTick>
 8003c76:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2b20      	cmp	r3, #32
 8003c82:	f040 8208 	bne.w	8004096 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	2319      	movs	r3, #25
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	497b      	ldr	r1, [pc, #492]	; (8003e7c <HAL_I2C_Mem_Read+0x224>)
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f000 faef 	bl	8004274 <I2C_WaitOnFlagUntilTimeout>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003c9c:	2302      	movs	r3, #2
 8003c9e:	e1fb      	b.n	8004098 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d101      	bne.n	8003cae <HAL_I2C_Mem_Read+0x56>
 8003caa:	2302      	movs	r3, #2
 8003cac:	e1f4      	b.n	8004098 <HAL_I2C_Mem_Read+0x440>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d007      	beq.n	8003cd4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f042 0201 	orr.w	r2, r2, #1
 8003cd2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ce2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2222      	movs	r2, #34	; 0x22
 8003ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2240      	movs	r2, #64	; 0x40
 8003cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cfe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003d04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	4a5b      	ldr	r2, [pc, #364]	; (8003e80 <HAL_I2C_Mem_Read+0x228>)
 8003d14:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d16:	88f8      	ldrh	r0, [r7, #6]
 8003d18:	893a      	ldrh	r2, [r7, #8]
 8003d1a:	8979      	ldrh	r1, [r7, #10]
 8003d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1e:	9301      	str	r3, [sp, #4]
 8003d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d22:	9300      	str	r3, [sp, #0]
 8003d24:	4603      	mov	r3, r0
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	f000 f9bc 	bl	80040a4 <I2C_RequestMemoryRead>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d001      	beq.n	8003d36 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e1b0      	b.n	8004098 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d113      	bne.n	8003d66 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d3e:	2300      	movs	r3, #0
 8003d40:	623b      	str	r3, [r7, #32]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	623b      	str	r3, [r7, #32]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	623b      	str	r3, [r7, #32]
 8003d52:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d62:	601a      	str	r2, [r3, #0]
 8003d64:	e184      	b.n	8004070 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d11b      	bne.n	8003da6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d7e:	2300      	movs	r3, #0
 8003d80:	61fb      	str	r3, [r7, #28]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	695b      	ldr	r3, [r3, #20]
 8003d88:	61fb      	str	r3, [r7, #28]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	61fb      	str	r3, [r7, #28]
 8003d92:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	e164      	b.n	8004070 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d11b      	bne.n	8003de6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dbc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dcc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dce:	2300      	movs	r3, #0
 8003dd0:	61bb      	str	r3, [r7, #24]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	695b      	ldr	r3, [r3, #20]
 8003dd8:	61bb      	str	r3, [r7, #24]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	61bb      	str	r3, [r7, #24]
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	e144      	b.n	8004070 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003de6:	2300      	movs	r3, #0
 8003de8:	617b      	str	r3, [r7, #20]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	695b      	ldr	r3, [r3, #20]
 8003df0:	617b      	str	r3, [r7, #20]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	617b      	str	r3, [r7, #20]
 8003dfa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003dfc:	e138      	b.n	8004070 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e02:	2b03      	cmp	r3, #3
 8003e04:	f200 80f1 	bhi.w	8003fea <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d123      	bne.n	8003e58 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e14:	68f8      	ldr	r0, [r7, #12]
 8003e16:	f000 fb44 	bl	80044a2 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d001      	beq.n	8003e24 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e139      	b.n	8004098 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	691a      	ldr	r2, [r3, #16]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2e:	b2d2      	uxtb	r2, r2
 8003e30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e36:	1c5a      	adds	r2, r3, #1
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e40:	3b01      	subs	r3, #1
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e56:	e10b      	b.n	8004070 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d14e      	bne.n	8003efe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e66:	2200      	movs	r2, #0
 8003e68:	4906      	ldr	r1, [pc, #24]	; (8003e84 <HAL_I2C_Mem_Read+0x22c>)
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f000 fa02 	bl	8004274 <I2C_WaitOnFlagUntilTimeout>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d008      	beq.n	8003e88 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e10e      	b.n	8004098 <HAL_I2C_Mem_Read+0x440>
 8003e7a:	bf00      	nop
 8003e7c:	00100002 	.word	0x00100002
 8003e80:	ffff0000 	.word	0xffff0000
 8003e84:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	691a      	ldr	r2, [r3, #16]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea2:	b2d2      	uxtb	r2, r2
 8003ea4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eaa:	1c5a      	adds	r2, r3, #1
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	691a      	ldr	r2, [r3, #16]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed4:	b2d2      	uxtb	r2, r2
 8003ed6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003edc:	1c5a      	adds	r2, r3, #1
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	b29a      	uxth	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003efc:	e0b8      	b.n	8004070 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f00:	9300      	str	r3, [sp, #0]
 8003f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f04:	2200      	movs	r2, #0
 8003f06:	4966      	ldr	r1, [pc, #408]	; (80040a0 <HAL_I2C_Mem_Read+0x448>)
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f000 f9b3 	bl	8004274 <I2C_WaitOnFlagUntilTimeout>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d001      	beq.n	8003f18 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e0bf      	b.n	8004098 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	691a      	ldr	r2, [r3, #16]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f32:	b2d2      	uxtb	r2, r2
 8003f34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3a:	1c5a      	adds	r2, r3, #1
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f44:	3b01      	subs	r3, #1
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	3b01      	subs	r3, #1
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5c:	9300      	str	r3, [sp, #0]
 8003f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f60:	2200      	movs	r2, #0
 8003f62:	494f      	ldr	r1, [pc, #316]	; (80040a0 <HAL_I2C_Mem_Read+0x448>)
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f000 f985 	bl	8004274 <I2C_WaitOnFlagUntilTimeout>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e091      	b.n	8004098 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	691a      	ldr	r2, [r3, #16]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8e:	b2d2      	uxtb	r2, r2
 8003f90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f96:	1c5a      	adds	r2, r3, #1
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	691a      	ldr	r2, [r3, #16]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc0:	b2d2      	uxtb	r2, r2
 8003fc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc8:	1c5a      	adds	r2, r3, #1
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003fe8:	e042      	b.n	8004070 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f000 fa57 	bl	80044a2 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e04c      	b.n	8004098 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	691a      	ldr	r2, [r3, #16]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004008:	b2d2      	uxtb	r2, r2
 800400a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004010:	1c5a      	adds	r2, r3, #1
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800401a:	3b01      	subs	r3, #1
 800401c:	b29a      	uxth	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004026:	b29b      	uxth	r3, r3
 8004028:	3b01      	subs	r3, #1
 800402a:	b29a      	uxth	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	f003 0304 	and.w	r3, r3, #4
 800403a:	2b04      	cmp	r3, #4
 800403c:	d118      	bne.n	8004070 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	691a      	ldr	r2, [r3, #16]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004048:	b2d2      	uxtb	r2, r2
 800404a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004050:	1c5a      	adds	r2, r3, #1
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800405a:	3b01      	subs	r3, #1
 800405c:	b29a      	uxth	r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004066:	b29b      	uxth	r3, r3
 8004068:	3b01      	subs	r3, #1
 800406a:	b29a      	uxth	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004074:	2b00      	cmp	r3, #0
 8004076:	f47f aec2 	bne.w	8003dfe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2220      	movs	r2, #32
 800407e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004092:	2300      	movs	r3, #0
 8004094:	e000      	b.n	8004098 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004096:	2302      	movs	r3, #2
  }
}
 8004098:	4618      	mov	r0, r3
 800409a:	3728      	adds	r7, #40	; 0x28
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	00010004 	.word	0x00010004

080040a4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b088      	sub	sp, #32
 80040a8:	af02      	add	r7, sp, #8
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	4608      	mov	r0, r1
 80040ae:	4611      	mov	r1, r2
 80040b0:	461a      	mov	r2, r3
 80040b2:	4603      	mov	r3, r0
 80040b4:	817b      	strh	r3, [r7, #10]
 80040b6:	460b      	mov	r3, r1
 80040b8:	813b      	strh	r3, [r7, #8]
 80040ba:	4613      	mov	r3, r2
 80040bc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040cc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e0:	9300      	str	r3, [sp, #0]
 80040e2:	6a3b      	ldr	r3, [r7, #32]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f000 f8c2 	bl	8004274 <I2C_WaitOnFlagUntilTimeout>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00d      	beq.n	8004112 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004100:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004104:	d103      	bne.n	800410e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f44f 7200 	mov.w	r2, #512	; 0x200
 800410c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e0aa      	b.n	8004268 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004112:	897b      	ldrh	r3, [r7, #10]
 8004114:	b2db      	uxtb	r3, r3
 8004116:	461a      	mov	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004120:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004124:	6a3a      	ldr	r2, [r7, #32]
 8004126:	4952      	ldr	r1, [pc, #328]	; (8004270 <I2C_RequestMemoryRead+0x1cc>)
 8004128:	68f8      	ldr	r0, [r7, #12]
 800412a:	f000 f8fa 	bl	8004322 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d001      	beq.n	8004138 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e097      	b.n	8004268 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004138:	2300      	movs	r3, #0
 800413a:	617b      	str	r3, [r7, #20]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	617b      	str	r3, [r7, #20]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	617b      	str	r3, [r7, #20]
 800414c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800414e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004150:	6a39      	ldr	r1, [r7, #32]
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f000 f964 	bl	8004420 <I2C_WaitOnTXEFlagUntilTimeout>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00d      	beq.n	800417a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004162:	2b04      	cmp	r3, #4
 8004164:	d107      	bne.n	8004176 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004174:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e076      	b.n	8004268 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800417a:	88fb      	ldrh	r3, [r7, #6]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d105      	bne.n	800418c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004180:	893b      	ldrh	r3, [r7, #8]
 8004182:	b2da      	uxtb	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	611a      	str	r2, [r3, #16]
 800418a:	e021      	b.n	80041d0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800418c:	893b      	ldrh	r3, [r7, #8]
 800418e:	0a1b      	lsrs	r3, r3, #8
 8004190:	b29b      	uxth	r3, r3
 8004192:	b2da      	uxtb	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800419a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800419c:	6a39      	ldr	r1, [r7, #32]
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	f000 f93e 	bl	8004420 <I2C_WaitOnTXEFlagUntilTimeout>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00d      	beq.n	80041c6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ae:	2b04      	cmp	r3, #4
 80041b0:	d107      	bne.n	80041c2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e050      	b.n	8004268 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041c6:	893b      	ldrh	r3, [r7, #8]
 80041c8:	b2da      	uxtb	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041d2:	6a39      	ldr	r1, [r7, #32]
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f000 f923 	bl	8004420 <I2C_WaitOnTXEFlagUntilTimeout>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d00d      	beq.n	80041fc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e4:	2b04      	cmp	r3, #4
 80041e6:	d107      	bne.n	80041f8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041f6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e035      	b.n	8004268 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800420a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800420c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420e:	9300      	str	r3, [sp, #0]
 8004210:	6a3b      	ldr	r3, [r7, #32]
 8004212:	2200      	movs	r2, #0
 8004214:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f000 f82b 	bl	8004274 <I2C_WaitOnFlagUntilTimeout>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00d      	beq.n	8004240 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800422e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004232:	d103      	bne.n	800423c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f44f 7200 	mov.w	r2, #512	; 0x200
 800423a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e013      	b.n	8004268 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004240:	897b      	ldrh	r3, [r7, #10]
 8004242:	b2db      	uxtb	r3, r3
 8004244:	f043 0301 	orr.w	r3, r3, #1
 8004248:	b2da      	uxtb	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004252:	6a3a      	ldr	r2, [r7, #32]
 8004254:	4906      	ldr	r1, [pc, #24]	; (8004270 <I2C_RequestMemoryRead+0x1cc>)
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	f000 f863 	bl	8004322 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e000      	b.n	8004268 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	3718      	adds	r7, #24
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	00010002 	.word	0x00010002

08004274 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	603b      	str	r3, [r7, #0]
 8004280:	4613      	mov	r3, r2
 8004282:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004284:	e025      	b.n	80042d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800428c:	d021      	beq.n	80042d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800428e:	f7fe fcf1 	bl	8002c74 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	683a      	ldr	r2, [r7, #0]
 800429a:	429a      	cmp	r2, r3
 800429c:	d302      	bcc.n	80042a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d116      	bne.n	80042d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2220      	movs	r2, #32
 80042ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	f043 0220 	orr.w	r2, r3, #32
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e023      	b.n	800431a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	0c1b      	lsrs	r3, r3, #16
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d10d      	bne.n	80042f8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	43da      	mvns	r2, r3
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	4013      	ands	r3, r2
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	bf0c      	ite	eq
 80042ee:	2301      	moveq	r3, #1
 80042f0:	2300      	movne	r3, #0
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	461a      	mov	r2, r3
 80042f6:	e00c      	b.n	8004312 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	43da      	mvns	r2, r3
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	4013      	ands	r3, r2
 8004304:	b29b      	uxth	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	bf0c      	ite	eq
 800430a:	2301      	moveq	r3, #1
 800430c:	2300      	movne	r3, #0
 800430e:	b2db      	uxtb	r3, r3
 8004310:	461a      	mov	r2, r3
 8004312:	79fb      	ldrb	r3, [r7, #7]
 8004314:	429a      	cmp	r2, r3
 8004316:	d0b6      	beq.n	8004286 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}

08004322 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004322:	b580      	push	{r7, lr}
 8004324:	b084      	sub	sp, #16
 8004326:	af00      	add	r7, sp, #0
 8004328:	60f8      	str	r0, [r7, #12]
 800432a:	60b9      	str	r1, [r7, #8]
 800432c:	607a      	str	r2, [r7, #4]
 800432e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004330:	e051      	b.n	80043d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	695b      	ldr	r3, [r3, #20]
 8004338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800433c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004340:	d123      	bne.n	800438a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004350:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800435a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2220      	movs	r2, #32
 8004366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004376:	f043 0204 	orr.w	r2, r3, #4
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e046      	b.n	8004418 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004390:	d021      	beq.n	80043d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004392:	f7fe fc6f 	bl	8002c74 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d302      	bcc.n	80043a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d116      	bne.n	80043d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2220      	movs	r2, #32
 80043b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c2:	f043 0220 	orr.w	r2, r3, #32
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e020      	b.n	8004418 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	0c1b      	lsrs	r3, r3, #16
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d10c      	bne.n	80043fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	43da      	mvns	r2, r3
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	4013      	ands	r3, r2
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	bf14      	ite	ne
 80043f2:	2301      	movne	r3, #1
 80043f4:	2300      	moveq	r3, #0
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	e00b      	b.n	8004412 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	43da      	mvns	r2, r3
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	4013      	ands	r3, r2
 8004406:	b29b      	uxth	r3, r3
 8004408:	2b00      	cmp	r3, #0
 800440a:	bf14      	ite	ne
 800440c:	2301      	movne	r3, #1
 800440e:	2300      	moveq	r3, #0
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d18d      	bne.n	8004332 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	3710      	adds	r7, #16
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800442c:	e02d      	b.n	800448a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f000 f88d 	bl	800454e <I2C_IsAcknowledgeFailed>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d001      	beq.n	800443e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e02d      	b.n	800449a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004444:	d021      	beq.n	800448a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004446:	f7fe fc15 	bl	8002c74 <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	429a      	cmp	r2, r3
 8004454:	d302      	bcc.n	800445c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d116      	bne.n	800448a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2220      	movs	r2, #32
 8004466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004476:	f043 0220 	orr.w	r2, r3, #32
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e007      	b.n	800449a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	695b      	ldr	r3, [r3, #20]
 8004490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004494:	2b80      	cmp	r3, #128	; 0x80
 8004496:	d1ca      	bne.n	800442e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b084      	sub	sp, #16
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	60f8      	str	r0, [r7, #12]
 80044aa:	60b9      	str	r1, [r7, #8]
 80044ac:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044ae:	e042      	b.n	8004536 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	f003 0310 	and.w	r3, r3, #16
 80044ba:	2b10      	cmp	r3, #16
 80044bc:	d119      	bne.n	80044f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f06f 0210 	mvn.w	r2, #16
 80044c6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2220      	movs	r2, #32
 80044d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e029      	b.n	8004546 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044f2:	f7fe fbbf 	bl	8002c74 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	68ba      	ldr	r2, [r7, #8]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d302      	bcc.n	8004508 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d116      	bne.n	8004536 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2220      	movs	r2, #32
 8004512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004522:	f043 0220 	orr.w	r2, r3, #32
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e007      	b.n	8004546 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	695b      	ldr	r3, [r3, #20]
 800453c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004540:	2b40      	cmp	r3, #64	; 0x40
 8004542:	d1b5      	bne.n	80044b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3710      	adds	r7, #16
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800454e:	b480      	push	{r7}
 8004550:	b083      	sub	sp, #12
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	695b      	ldr	r3, [r3, #20]
 800455c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004560:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004564:	d11b      	bne.n	800459e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800456e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2220      	movs	r2, #32
 800457a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458a:	f043 0204 	orr.w	r2, r3, #4
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e000      	b.n	80045a0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b086      	sub	sp, #24
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d101      	bne.n	80045be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e264      	b.n	8004a88 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d075      	beq.n	80046b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045ca:	4ba3      	ldr	r3, [pc, #652]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f003 030c 	and.w	r3, r3, #12
 80045d2:	2b04      	cmp	r3, #4
 80045d4:	d00c      	beq.n	80045f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045d6:	4ba0      	ldr	r3, [pc, #640]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045de:	2b08      	cmp	r3, #8
 80045e0:	d112      	bne.n	8004608 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045e2:	4b9d      	ldr	r3, [pc, #628]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045ee:	d10b      	bne.n	8004608 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045f0:	4b99      	ldr	r3, [pc, #612]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d05b      	beq.n	80046b4 <HAL_RCC_OscConfig+0x108>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d157      	bne.n	80046b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e23f      	b.n	8004a88 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004610:	d106      	bne.n	8004620 <HAL_RCC_OscConfig+0x74>
 8004612:	4b91      	ldr	r3, [pc, #580]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a90      	ldr	r2, [pc, #576]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 8004618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800461c:	6013      	str	r3, [r2, #0]
 800461e:	e01d      	b.n	800465c <HAL_RCC_OscConfig+0xb0>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004628:	d10c      	bne.n	8004644 <HAL_RCC_OscConfig+0x98>
 800462a:	4b8b      	ldr	r3, [pc, #556]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a8a      	ldr	r2, [pc, #552]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 8004630:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004634:	6013      	str	r3, [r2, #0]
 8004636:	4b88      	ldr	r3, [pc, #544]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a87      	ldr	r2, [pc, #540]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 800463c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004640:	6013      	str	r3, [r2, #0]
 8004642:	e00b      	b.n	800465c <HAL_RCC_OscConfig+0xb0>
 8004644:	4b84      	ldr	r3, [pc, #528]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a83      	ldr	r2, [pc, #524]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 800464a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800464e:	6013      	str	r3, [r2, #0]
 8004650:	4b81      	ldr	r3, [pc, #516]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a80      	ldr	r2, [pc, #512]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 8004656:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800465a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d013      	beq.n	800468c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004664:	f7fe fb06 	bl	8002c74 <HAL_GetTick>
 8004668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800466a:	e008      	b.n	800467e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800466c:	f7fe fb02 	bl	8002c74 <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b64      	cmp	r3, #100	; 0x64
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e204      	b.n	8004a88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800467e:	4b76      	ldr	r3, [pc, #472]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d0f0      	beq.n	800466c <HAL_RCC_OscConfig+0xc0>
 800468a:	e014      	b.n	80046b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800468c:	f7fe faf2 	bl	8002c74 <HAL_GetTick>
 8004690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004692:	e008      	b.n	80046a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004694:	f7fe faee 	bl	8002c74 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b64      	cmp	r3, #100	; 0x64
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e1f0      	b.n	8004a88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046a6:	4b6c      	ldr	r3, [pc, #432]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1f0      	bne.n	8004694 <HAL_RCC_OscConfig+0xe8>
 80046b2:	e000      	b.n	80046b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0302 	and.w	r3, r3, #2
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d063      	beq.n	800478a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046c2:	4b65      	ldr	r3, [pc, #404]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f003 030c 	and.w	r3, r3, #12
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00b      	beq.n	80046e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046ce:	4b62      	ldr	r3, [pc, #392]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046d6:	2b08      	cmp	r3, #8
 80046d8:	d11c      	bne.n	8004714 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046da:	4b5f      	ldr	r3, [pc, #380]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d116      	bne.n	8004714 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046e6:	4b5c      	ldr	r3, [pc, #368]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d005      	beq.n	80046fe <HAL_RCC_OscConfig+0x152>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d001      	beq.n	80046fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e1c4      	b.n	8004a88 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046fe:	4b56      	ldr	r3, [pc, #344]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	00db      	lsls	r3, r3, #3
 800470c:	4952      	ldr	r1, [pc, #328]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 800470e:	4313      	orrs	r3, r2
 8004710:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004712:	e03a      	b.n	800478a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d020      	beq.n	800475e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800471c:	4b4f      	ldr	r3, [pc, #316]	; (800485c <HAL_RCC_OscConfig+0x2b0>)
 800471e:	2201      	movs	r2, #1
 8004720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004722:	f7fe faa7 	bl	8002c74 <HAL_GetTick>
 8004726:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004728:	e008      	b.n	800473c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800472a:	f7fe faa3 	bl	8002c74 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	2b02      	cmp	r3, #2
 8004736:	d901      	bls.n	800473c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e1a5      	b.n	8004a88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800473c:	4b46      	ldr	r3, [pc, #280]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0302 	and.w	r3, r3, #2
 8004744:	2b00      	cmp	r3, #0
 8004746:	d0f0      	beq.n	800472a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004748:	4b43      	ldr	r3, [pc, #268]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	00db      	lsls	r3, r3, #3
 8004756:	4940      	ldr	r1, [pc, #256]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 8004758:	4313      	orrs	r3, r2
 800475a:	600b      	str	r3, [r1, #0]
 800475c:	e015      	b.n	800478a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800475e:	4b3f      	ldr	r3, [pc, #252]	; (800485c <HAL_RCC_OscConfig+0x2b0>)
 8004760:	2200      	movs	r2, #0
 8004762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004764:	f7fe fa86 	bl	8002c74 <HAL_GetTick>
 8004768:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800476a:	e008      	b.n	800477e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800476c:	f7fe fa82 	bl	8002c74 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e184      	b.n	8004a88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800477e:	4b36      	ldr	r3, [pc, #216]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1f0      	bne.n	800476c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0308 	and.w	r3, r3, #8
 8004792:	2b00      	cmp	r3, #0
 8004794:	d030      	beq.n	80047f8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d016      	beq.n	80047cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800479e:	4b30      	ldr	r3, [pc, #192]	; (8004860 <HAL_RCC_OscConfig+0x2b4>)
 80047a0:	2201      	movs	r2, #1
 80047a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047a4:	f7fe fa66 	bl	8002c74 <HAL_GetTick>
 80047a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047aa:	e008      	b.n	80047be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047ac:	f7fe fa62 	bl	8002c74 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d901      	bls.n	80047be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e164      	b.n	8004a88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047be:	4b26      	ldr	r3, [pc, #152]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 80047c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d0f0      	beq.n	80047ac <HAL_RCC_OscConfig+0x200>
 80047ca:	e015      	b.n	80047f8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047cc:	4b24      	ldr	r3, [pc, #144]	; (8004860 <HAL_RCC_OscConfig+0x2b4>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047d2:	f7fe fa4f 	bl	8002c74 <HAL_GetTick>
 80047d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047d8:	e008      	b.n	80047ec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047da:	f7fe fa4b 	bl	8002c74 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d901      	bls.n	80047ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e14d      	b.n	8004a88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047ec:	4b1a      	ldr	r3, [pc, #104]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 80047ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047f0:	f003 0302 	and.w	r3, r3, #2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1f0      	bne.n	80047da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0304 	and.w	r3, r3, #4
 8004800:	2b00      	cmp	r3, #0
 8004802:	f000 80a0 	beq.w	8004946 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004806:	2300      	movs	r3, #0
 8004808:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800480a:	4b13      	ldr	r3, [pc, #76]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 800480c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10f      	bne.n	8004836 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004816:	2300      	movs	r3, #0
 8004818:	60bb      	str	r3, [r7, #8]
 800481a:	4b0f      	ldr	r3, [pc, #60]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 800481c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481e:	4a0e      	ldr	r2, [pc, #56]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 8004820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004824:	6413      	str	r3, [r2, #64]	; 0x40
 8004826:	4b0c      	ldr	r3, [pc, #48]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 8004828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800482e:	60bb      	str	r3, [r7, #8]
 8004830:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004832:	2301      	movs	r3, #1
 8004834:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004836:	4b0b      	ldr	r3, [pc, #44]	; (8004864 <HAL_RCC_OscConfig+0x2b8>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800483e:	2b00      	cmp	r3, #0
 8004840:	d121      	bne.n	8004886 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004842:	4b08      	ldr	r3, [pc, #32]	; (8004864 <HAL_RCC_OscConfig+0x2b8>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a07      	ldr	r2, [pc, #28]	; (8004864 <HAL_RCC_OscConfig+0x2b8>)
 8004848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800484c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800484e:	f7fe fa11 	bl	8002c74 <HAL_GetTick>
 8004852:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004854:	e011      	b.n	800487a <HAL_RCC_OscConfig+0x2ce>
 8004856:	bf00      	nop
 8004858:	40023800 	.word	0x40023800
 800485c:	42470000 	.word	0x42470000
 8004860:	42470e80 	.word	0x42470e80
 8004864:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004868:	f7fe fa04 	bl	8002c74 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b02      	cmp	r3, #2
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e106      	b.n	8004a88 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800487a:	4b85      	ldr	r3, [pc, #532]	; (8004a90 <HAL_RCC_OscConfig+0x4e4>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004882:	2b00      	cmp	r3, #0
 8004884:	d0f0      	beq.n	8004868 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	2b01      	cmp	r3, #1
 800488c:	d106      	bne.n	800489c <HAL_RCC_OscConfig+0x2f0>
 800488e:	4b81      	ldr	r3, [pc, #516]	; (8004a94 <HAL_RCC_OscConfig+0x4e8>)
 8004890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004892:	4a80      	ldr	r2, [pc, #512]	; (8004a94 <HAL_RCC_OscConfig+0x4e8>)
 8004894:	f043 0301 	orr.w	r3, r3, #1
 8004898:	6713      	str	r3, [r2, #112]	; 0x70
 800489a:	e01c      	b.n	80048d6 <HAL_RCC_OscConfig+0x32a>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	2b05      	cmp	r3, #5
 80048a2:	d10c      	bne.n	80048be <HAL_RCC_OscConfig+0x312>
 80048a4:	4b7b      	ldr	r3, [pc, #492]	; (8004a94 <HAL_RCC_OscConfig+0x4e8>)
 80048a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a8:	4a7a      	ldr	r2, [pc, #488]	; (8004a94 <HAL_RCC_OscConfig+0x4e8>)
 80048aa:	f043 0304 	orr.w	r3, r3, #4
 80048ae:	6713      	str	r3, [r2, #112]	; 0x70
 80048b0:	4b78      	ldr	r3, [pc, #480]	; (8004a94 <HAL_RCC_OscConfig+0x4e8>)
 80048b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b4:	4a77      	ldr	r2, [pc, #476]	; (8004a94 <HAL_RCC_OscConfig+0x4e8>)
 80048b6:	f043 0301 	orr.w	r3, r3, #1
 80048ba:	6713      	str	r3, [r2, #112]	; 0x70
 80048bc:	e00b      	b.n	80048d6 <HAL_RCC_OscConfig+0x32a>
 80048be:	4b75      	ldr	r3, [pc, #468]	; (8004a94 <HAL_RCC_OscConfig+0x4e8>)
 80048c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c2:	4a74      	ldr	r2, [pc, #464]	; (8004a94 <HAL_RCC_OscConfig+0x4e8>)
 80048c4:	f023 0301 	bic.w	r3, r3, #1
 80048c8:	6713      	str	r3, [r2, #112]	; 0x70
 80048ca:	4b72      	ldr	r3, [pc, #456]	; (8004a94 <HAL_RCC_OscConfig+0x4e8>)
 80048cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ce:	4a71      	ldr	r2, [pc, #452]	; (8004a94 <HAL_RCC_OscConfig+0x4e8>)
 80048d0:	f023 0304 	bic.w	r3, r3, #4
 80048d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d015      	beq.n	800490a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048de:	f7fe f9c9 	bl	8002c74 <HAL_GetTick>
 80048e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048e4:	e00a      	b.n	80048fc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048e6:	f7fe f9c5 	bl	8002c74 <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d901      	bls.n	80048fc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e0c5      	b.n	8004a88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048fc:	4b65      	ldr	r3, [pc, #404]	; (8004a94 <HAL_RCC_OscConfig+0x4e8>)
 80048fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004900:	f003 0302 	and.w	r3, r3, #2
 8004904:	2b00      	cmp	r3, #0
 8004906:	d0ee      	beq.n	80048e6 <HAL_RCC_OscConfig+0x33a>
 8004908:	e014      	b.n	8004934 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800490a:	f7fe f9b3 	bl	8002c74 <HAL_GetTick>
 800490e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004910:	e00a      	b.n	8004928 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004912:	f7fe f9af 	bl	8002c74 <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004920:	4293      	cmp	r3, r2
 8004922:	d901      	bls.n	8004928 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e0af      	b.n	8004a88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004928:	4b5a      	ldr	r3, [pc, #360]	; (8004a94 <HAL_RCC_OscConfig+0x4e8>)
 800492a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800492c:	f003 0302 	and.w	r3, r3, #2
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1ee      	bne.n	8004912 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004934:	7dfb      	ldrb	r3, [r7, #23]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d105      	bne.n	8004946 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800493a:	4b56      	ldr	r3, [pc, #344]	; (8004a94 <HAL_RCC_OscConfig+0x4e8>)
 800493c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493e:	4a55      	ldr	r2, [pc, #340]	; (8004a94 <HAL_RCC_OscConfig+0x4e8>)
 8004940:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004944:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	2b00      	cmp	r3, #0
 800494c:	f000 809b 	beq.w	8004a86 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004950:	4b50      	ldr	r3, [pc, #320]	; (8004a94 <HAL_RCC_OscConfig+0x4e8>)
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f003 030c 	and.w	r3, r3, #12
 8004958:	2b08      	cmp	r3, #8
 800495a:	d05c      	beq.n	8004a16 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	699b      	ldr	r3, [r3, #24]
 8004960:	2b02      	cmp	r3, #2
 8004962:	d141      	bne.n	80049e8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004964:	4b4c      	ldr	r3, [pc, #304]	; (8004a98 <HAL_RCC_OscConfig+0x4ec>)
 8004966:	2200      	movs	r2, #0
 8004968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800496a:	f7fe f983 	bl	8002c74 <HAL_GetTick>
 800496e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004970:	e008      	b.n	8004984 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004972:	f7fe f97f 	bl	8002c74 <HAL_GetTick>
 8004976:	4602      	mov	r2, r0
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	2b02      	cmp	r3, #2
 800497e:	d901      	bls.n	8004984 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e081      	b.n	8004a88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004984:	4b43      	ldr	r3, [pc, #268]	; (8004a94 <HAL_RCC_OscConfig+0x4e8>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d1f0      	bne.n	8004972 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	69da      	ldr	r2, [r3, #28]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a1b      	ldr	r3, [r3, #32]
 8004998:	431a      	orrs	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499e:	019b      	lsls	r3, r3, #6
 80049a0:	431a      	orrs	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a6:	085b      	lsrs	r3, r3, #1
 80049a8:	3b01      	subs	r3, #1
 80049aa:	041b      	lsls	r3, r3, #16
 80049ac:	431a      	orrs	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b2:	061b      	lsls	r3, r3, #24
 80049b4:	4937      	ldr	r1, [pc, #220]	; (8004a94 <HAL_RCC_OscConfig+0x4e8>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049ba:	4b37      	ldr	r3, [pc, #220]	; (8004a98 <HAL_RCC_OscConfig+0x4ec>)
 80049bc:	2201      	movs	r2, #1
 80049be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c0:	f7fe f958 	bl	8002c74 <HAL_GetTick>
 80049c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049c6:	e008      	b.n	80049da <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049c8:	f7fe f954 	bl	8002c74 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d901      	bls.n	80049da <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e056      	b.n	8004a88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049da:	4b2e      	ldr	r3, [pc, #184]	; (8004a94 <HAL_RCC_OscConfig+0x4e8>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d0f0      	beq.n	80049c8 <HAL_RCC_OscConfig+0x41c>
 80049e6:	e04e      	b.n	8004a86 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049e8:	4b2b      	ldr	r3, [pc, #172]	; (8004a98 <HAL_RCC_OscConfig+0x4ec>)
 80049ea:	2200      	movs	r2, #0
 80049ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ee:	f7fe f941 	bl	8002c74 <HAL_GetTick>
 80049f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049f4:	e008      	b.n	8004a08 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049f6:	f7fe f93d 	bl	8002c74 <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d901      	bls.n	8004a08 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e03f      	b.n	8004a88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a08:	4b22      	ldr	r3, [pc, #136]	; (8004a94 <HAL_RCC_OscConfig+0x4e8>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1f0      	bne.n	80049f6 <HAL_RCC_OscConfig+0x44a>
 8004a14:	e037      	b.n	8004a86 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d101      	bne.n	8004a22 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e032      	b.n	8004a88 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a22:	4b1c      	ldr	r3, [pc, #112]	; (8004a94 <HAL_RCC_OscConfig+0x4e8>)
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d028      	beq.n	8004a82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d121      	bne.n	8004a82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d11a      	bne.n	8004a82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a52:	4013      	ands	r3, r2
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a58:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d111      	bne.n	8004a82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a68:	085b      	lsrs	r3, r3, #1
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d107      	bne.n	8004a82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d001      	beq.n	8004a86 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e000      	b.n	8004a88 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3718      	adds	r7, #24
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	40007000 	.word	0x40007000
 8004a94:	40023800 	.word	0x40023800
 8004a98:	42470060 	.word	0x42470060

08004a9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d101      	bne.n	8004ab0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e0cc      	b.n	8004c4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ab0:	4b68      	ldr	r3, [pc, #416]	; (8004c54 <HAL_RCC_ClockConfig+0x1b8>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0307 	and.w	r3, r3, #7
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d90c      	bls.n	8004ad8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004abe:	4b65      	ldr	r3, [pc, #404]	; (8004c54 <HAL_RCC_ClockConfig+0x1b8>)
 8004ac0:	683a      	ldr	r2, [r7, #0]
 8004ac2:	b2d2      	uxtb	r2, r2
 8004ac4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ac6:	4b63      	ldr	r3, [pc, #396]	; (8004c54 <HAL_RCC_ClockConfig+0x1b8>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0307 	and.w	r3, r3, #7
 8004ace:	683a      	ldr	r2, [r7, #0]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d001      	beq.n	8004ad8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e0b8      	b.n	8004c4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0302 	and.w	r3, r3, #2
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d020      	beq.n	8004b26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0304 	and.w	r3, r3, #4
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d005      	beq.n	8004afc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004af0:	4b59      	ldr	r3, [pc, #356]	; (8004c58 <HAL_RCC_ClockConfig+0x1bc>)
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	4a58      	ldr	r2, [pc, #352]	; (8004c58 <HAL_RCC_ClockConfig+0x1bc>)
 8004af6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004afa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0308 	and.w	r3, r3, #8
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d005      	beq.n	8004b14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b08:	4b53      	ldr	r3, [pc, #332]	; (8004c58 <HAL_RCC_ClockConfig+0x1bc>)
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	4a52      	ldr	r2, [pc, #328]	; (8004c58 <HAL_RCC_ClockConfig+0x1bc>)
 8004b0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b14:	4b50      	ldr	r3, [pc, #320]	; (8004c58 <HAL_RCC_ClockConfig+0x1bc>)
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	494d      	ldr	r1, [pc, #308]	; (8004c58 <HAL_RCC_ClockConfig+0x1bc>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d044      	beq.n	8004bbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d107      	bne.n	8004b4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b3a:	4b47      	ldr	r3, [pc, #284]	; (8004c58 <HAL_RCC_ClockConfig+0x1bc>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d119      	bne.n	8004b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e07f      	b.n	8004c4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d003      	beq.n	8004b5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b56:	2b03      	cmp	r3, #3
 8004b58:	d107      	bne.n	8004b6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b5a:	4b3f      	ldr	r3, [pc, #252]	; (8004c58 <HAL_RCC_ClockConfig+0x1bc>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d109      	bne.n	8004b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e06f      	b.n	8004c4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b6a:	4b3b      	ldr	r3, [pc, #236]	; (8004c58 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0302 	and.w	r3, r3, #2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d101      	bne.n	8004b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e067      	b.n	8004c4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b7a:	4b37      	ldr	r3, [pc, #220]	; (8004c58 <HAL_RCC_ClockConfig+0x1bc>)
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f023 0203 	bic.w	r2, r3, #3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	4934      	ldr	r1, [pc, #208]	; (8004c58 <HAL_RCC_ClockConfig+0x1bc>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b8c:	f7fe f872 	bl	8002c74 <HAL_GetTick>
 8004b90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b92:	e00a      	b.n	8004baa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b94:	f7fe f86e 	bl	8002c74 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d901      	bls.n	8004baa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e04f      	b.n	8004c4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004baa:	4b2b      	ldr	r3, [pc, #172]	; (8004c58 <HAL_RCC_ClockConfig+0x1bc>)
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f003 020c 	and.w	r2, r3, #12
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d1eb      	bne.n	8004b94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bbc:	4b25      	ldr	r3, [pc, #148]	; (8004c54 <HAL_RCC_ClockConfig+0x1b8>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0307 	and.w	r3, r3, #7
 8004bc4:	683a      	ldr	r2, [r7, #0]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d20c      	bcs.n	8004be4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bca:	4b22      	ldr	r3, [pc, #136]	; (8004c54 <HAL_RCC_ClockConfig+0x1b8>)
 8004bcc:	683a      	ldr	r2, [r7, #0]
 8004bce:	b2d2      	uxtb	r2, r2
 8004bd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bd2:	4b20      	ldr	r3, [pc, #128]	; (8004c54 <HAL_RCC_ClockConfig+0x1b8>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0307 	and.w	r3, r3, #7
 8004bda:	683a      	ldr	r2, [r7, #0]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d001      	beq.n	8004be4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e032      	b.n	8004c4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0304 	and.w	r3, r3, #4
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d008      	beq.n	8004c02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bf0:	4b19      	ldr	r3, [pc, #100]	; (8004c58 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	4916      	ldr	r1, [pc, #88]	; (8004c58 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0308 	and.w	r3, r3, #8
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d009      	beq.n	8004c22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c0e:	4b12      	ldr	r3, [pc, #72]	; (8004c58 <HAL_RCC_ClockConfig+0x1bc>)
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	00db      	lsls	r3, r3, #3
 8004c1c:	490e      	ldr	r1, [pc, #56]	; (8004c58 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c22:	f000 f821 	bl	8004c68 <HAL_RCC_GetSysClockFreq>
 8004c26:	4602      	mov	r2, r0
 8004c28:	4b0b      	ldr	r3, [pc, #44]	; (8004c58 <HAL_RCC_ClockConfig+0x1bc>)
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	091b      	lsrs	r3, r3, #4
 8004c2e:	f003 030f 	and.w	r3, r3, #15
 8004c32:	490a      	ldr	r1, [pc, #40]	; (8004c5c <HAL_RCC_ClockConfig+0x1c0>)
 8004c34:	5ccb      	ldrb	r3, [r1, r3]
 8004c36:	fa22 f303 	lsr.w	r3, r2, r3
 8004c3a:	4a09      	ldr	r2, [pc, #36]	; (8004c60 <HAL_RCC_ClockConfig+0x1c4>)
 8004c3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c3e:	4b09      	ldr	r3, [pc, #36]	; (8004c64 <HAL_RCC_ClockConfig+0x1c8>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7fd ffd2 	bl	8002bec <HAL_InitTick>

  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	40023c00 	.word	0x40023c00
 8004c58:	40023800 	.word	0x40023800
 8004c5c:	08008948 	.word	0x08008948
 8004c60:	20000004 	.word	0x20000004
 8004c64:	20000008 	.word	0x20000008

08004c68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004c6c:	b084      	sub	sp, #16
 8004c6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c70:	2300      	movs	r3, #0
 8004c72:	607b      	str	r3, [r7, #4]
 8004c74:	2300      	movs	r3, #0
 8004c76:	60fb      	str	r3, [r7, #12]
 8004c78:	2300      	movs	r3, #0
 8004c7a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c80:	4b67      	ldr	r3, [pc, #412]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f003 030c 	and.w	r3, r3, #12
 8004c88:	2b08      	cmp	r3, #8
 8004c8a:	d00d      	beq.n	8004ca8 <HAL_RCC_GetSysClockFreq+0x40>
 8004c8c:	2b08      	cmp	r3, #8
 8004c8e:	f200 80bd 	bhi.w	8004e0c <HAL_RCC_GetSysClockFreq+0x1a4>
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d002      	beq.n	8004c9c <HAL_RCC_GetSysClockFreq+0x34>
 8004c96:	2b04      	cmp	r3, #4
 8004c98:	d003      	beq.n	8004ca2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004c9a:	e0b7      	b.n	8004e0c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c9c:	4b61      	ldr	r3, [pc, #388]	; (8004e24 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004c9e:	60bb      	str	r3, [r7, #8]
       break;
 8004ca0:	e0b7      	b.n	8004e12 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ca2:	4b61      	ldr	r3, [pc, #388]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004ca4:	60bb      	str	r3, [r7, #8]
      break;
 8004ca6:	e0b4      	b.n	8004e12 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ca8:	4b5d      	ldr	r3, [pc, #372]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cb0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cb2:	4b5b      	ldr	r3, [pc, #364]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d04d      	beq.n	8004d5a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cbe:	4b58      	ldr	r3, [pc, #352]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	099b      	lsrs	r3, r3, #6
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	f04f 0300 	mov.w	r3, #0
 8004cca:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004cce:	f04f 0100 	mov.w	r1, #0
 8004cd2:	ea02 0800 	and.w	r8, r2, r0
 8004cd6:	ea03 0901 	and.w	r9, r3, r1
 8004cda:	4640      	mov	r0, r8
 8004cdc:	4649      	mov	r1, r9
 8004cde:	f04f 0200 	mov.w	r2, #0
 8004ce2:	f04f 0300 	mov.w	r3, #0
 8004ce6:	014b      	lsls	r3, r1, #5
 8004ce8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004cec:	0142      	lsls	r2, r0, #5
 8004cee:	4610      	mov	r0, r2
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	ebb0 0008 	subs.w	r0, r0, r8
 8004cf6:	eb61 0109 	sbc.w	r1, r1, r9
 8004cfa:	f04f 0200 	mov.w	r2, #0
 8004cfe:	f04f 0300 	mov.w	r3, #0
 8004d02:	018b      	lsls	r3, r1, #6
 8004d04:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004d08:	0182      	lsls	r2, r0, #6
 8004d0a:	1a12      	subs	r2, r2, r0
 8004d0c:	eb63 0301 	sbc.w	r3, r3, r1
 8004d10:	f04f 0000 	mov.w	r0, #0
 8004d14:	f04f 0100 	mov.w	r1, #0
 8004d18:	00d9      	lsls	r1, r3, #3
 8004d1a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d1e:	00d0      	lsls	r0, r2, #3
 8004d20:	4602      	mov	r2, r0
 8004d22:	460b      	mov	r3, r1
 8004d24:	eb12 0208 	adds.w	r2, r2, r8
 8004d28:	eb43 0309 	adc.w	r3, r3, r9
 8004d2c:	f04f 0000 	mov.w	r0, #0
 8004d30:	f04f 0100 	mov.w	r1, #0
 8004d34:	0259      	lsls	r1, r3, #9
 8004d36:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004d3a:	0250      	lsls	r0, r2, #9
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	460b      	mov	r3, r1
 8004d40:	4610      	mov	r0, r2
 8004d42:	4619      	mov	r1, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	461a      	mov	r2, r3
 8004d48:	f04f 0300 	mov.w	r3, #0
 8004d4c:	f7fb ffa4 	bl	8000c98 <__aeabi_uldivmod>
 8004d50:	4602      	mov	r2, r0
 8004d52:	460b      	mov	r3, r1
 8004d54:	4613      	mov	r3, r2
 8004d56:	60fb      	str	r3, [r7, #12]
 8004d58:	e04a      	b.n	8004df0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d5a:	4b31      	ldr	r3, [pc, #196]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	099b      	lsrs	r3, r3, #6
 8004d60:	461a      	mov	r2, r3
 8004d62:	f04f 0300 	mov.w	r3, #0
 8004d66:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004d6a:	f04f 0100 	mov.w	r1, #0
 8004d6e:	ea02 0400 	and.w	r4, r2, r0
 8004d72:	ea03 0501 	and.w	r5, r3, r1
 8004d76:	4620      	mov	r0, r4
 8004d78:	4629      	mov	r1, r5
 8004d7a:	f04f 0200 	mov.w	r2, #0
 8004d7e:	f04f 0300 	mov.w	r3, #0
 8004d82:	014b      	lsls	r3, r1, #5
 8004d84:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004d88:	0142      	lsls	r2, r0, #5
 8004d8a:	4610      	mov	r0, r2
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	1b00      	subs	r0, r0, r4
 8004d90:	eb61 0105 	sbc.w	r1, r1, r5
 8004d94:	f04f 0200 	mov.w	r2, #0
 8004d98:	f04f 0300 	mov.w	r3, #0
 8004d9c:	018b      	lsls	r3, r1, #6
 8004d9e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004da2:	0182      	lsls	r2, r0, #6
 8004da4:	1a12      	subs	r2, r2, r0
 8004da6:	eb63 0301 	sbc.w	r3, r3, r1
 8004daa:	f04f 0000 	mov.w	r0, #0
 8004dae:	f04f 0100 	mov.w	r1, #0
 8004db2:	00d9      	lsls	r1, r3, #3
 8004db4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004db8:	00d0      	lsls	r0, r2, #3
 8004dba:	4602      	mov	r2, r0
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	1912      	adds	r2, r2, r4
 8004dc0:	eb45 0303 	adc.w	r3, r5, r3
 8004dc4:	f04f 0000 	mov.w	r0, #0
 8004dc8:	f04f 0100 	mov.w	r1, #0
 8004dcc:	0299      	lsls	r1, r3, #10
 8004dce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004dd2:	0290      	lsls	r0, r2, #10
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	4610      	mov	r0, r2
 8004dda:	4619      	mov	r1, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	461a      	mov	r2, r3
 8004de0:	f04f 0300 	mov.w	r3, #0
 8004de4:	f7fb ff58 	bl	8000c98 <__aeabi_uldivmod>
 8004de8:	4602      	mov	r2, r0
 8004dea:	460b      	mov	r3, r1
 8004dec:	4613      	mov	r3, r2
 8004dee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004df0:	4b0b      	ldr	r3, [pc, #44]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	0c1b      	lsrs	r3, r3, #16
 8004df6:	f003 0303 	and.w	r3, r3, #3
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	005b      	lsls	r3, r3, #1
 8004dfe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e08:	60bb      	str	r3, [r7, #8]
      break;
 8004e0a:	e002      	b.n	8004e12 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e0c:	4b05      	ldr	r3, [pc, #20]	; (8004e24 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004e0e:	60bb      	str	r3, [r7, #8]
      break;
 8004e10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e12:	68bb      	ldr	r3, [r7, #8]
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3710      	adds	r7, #16
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004e1e:	bf00      	nop
 8004e20:	40023800 	.word	0x40023800
 8004e24:	00f42400 	.word	0x00f42400
 8004e28:	007a1200 	.word	0x007a1200

08004e2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e30:	4b03      	ldr	r3, [pc, #12]	; (8004e40 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e32:	681b      	ldr	r3, [r3, #0]
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	20000004 	.word	0x20000004

08004e44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e48:	f7ff fff0 	bl	8004e2c <HAL_RCC_GetHCLKFreq>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	4b05      	ldr	r3, [pc, #20]	; (8004e64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	0a9b      	lsrs	r3, r3, #10
 8004e54:	f003 0307 	and.w	r3, r3, #7
 8004e58:	4903      	ldr	r1, [pc, #12]	; (8004e68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e5a:	5ccb      	ldrb	r3, [r1, r3]
 8004e5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	40023800 	.word	0x40023800
 8004e68:	08008958 	.word	0x08008958

08004e6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e70:	f7ff ffdc 	bl	8004e2c <HAL_RCC_GetHCLKFreq>
 8004e74:	4602      	mov	r2, r0
 8004e76:	4b05      	ldr	r3, [pc, #20]	; (8004e8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	0b5b      	lsrs	r3, r3, #13
 8004e7c:	f003 0307 	and.w	r3, r3, #7
 8004e80:	4903      	ldr	r1, [pc, #12]	; (8004e90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e82:	5ccb      	ldrb	r3, [r1, r3]
 8004e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	40023800 	.word	0x40023800
 8004e90:	08008958 	.word	0x08008958

08004e94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e041      	b.n	8004f2a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d106      	bne.n	8004ec0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f7fd fc54 	bl	8002768 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	3304      	adds	r3, #4
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	4610      	mov	r0, r2
 8004ed4:	f000 fad4 	bl	8005480 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3708      	adds	r7, #8
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
	...

08004f34 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d109      	bne.n	8004f58 <HAL_TIM_PWM_Start+0x24>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	bf14      	ite	ne
 8004f50:	2301      	movne	r3, #1
 8004f52:	2300      	moveq	r3, #0
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	e022      	b.n	8004f9e <HAL_TIM_PWM_Start+0x6a>
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	2b04      	cmp	r3, #4
 8004f5c:	d109      	bne.n	8004f72 <HAL_TIM_PWM_Start+0x3e>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	bf14      	ite	ne
 8004f6a:	2301      	movne	r3, #1
 8004f6c:	2300      	moveq	r3, #0
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	e015      	b.n	8004f9e <HAL_TIM_PWM_Start+0x6a>
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	2b08      	cmp	r3, #8
 8004f76:	d109      	bne.n	8004f8c <HAL_TIM_PWM_Start+0x58>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	bf14      	ite	ne
 8004f84:	2301      	movne	r3, #1
 8004f86:	2300      	moveq	r3, #0
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	e008      	b.n	8004f9e <HAL_TIM_PWM_Start+0x6a>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	bf14      	ite	ne
 8004f98:	2301      	movne	r3, #1
 8004f9a:	2300      	moveq	r3, #0
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d001      	beq.n	8004fa6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e068      	b.n	8005078 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d104      	bne.n	8004fb6 <HAL_TIM_PWM_Start+0x82>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2202      	movs	r2, #2
 8004fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fb4:	e013      	b.n	8004fde <HAL_TIM_PWM_Start+0xaa>
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	2b04      	cmp	r3, #4
 8004fba:	d104      	bne.n	8004fc6 <HAL_TIM_PWM_Start+0x92>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2202      	movs	r2, #2
 8004fc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fc4:	e00b      	b.n	8004fde <HAL_TIM_PWM_Start+0xaa>
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	2b08      	cmp	r3, #8
 8004fca:	d104      	bne.n	8004fd6 <HAL_TIM_PWM_Start+0xa2>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2202      	movs	r2, #2
 8004fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fd4:	e003      	b.n	8004fde <HAL_TIM_PWM_Start+0xaa>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2202      	movs	r2, #2
 8004fda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	6839      	ldr	r1, [r7, #0]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f000 fc56 	bl	8005898 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a23      	ldr	r2, [pc, #140]	; (8005080 <HAL_TIM_PWM_Start+0x14c>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d107      	bne.n	8005006 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005004:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a1d      	ldr	r2, [pc, #116]	; (8005080 <HAL_TIM_PWM_Start+0x14c>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d018      	beq.n	8005042 <HAL_TIM_PWM_Start+0x10e>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005018:	d013      	beq.n	8005042 <HAL_TIM_PWM_Start+0x10e>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a19      	ldr	r2, [pc, #100]	; (8005084 <HAL_TIM_PWM_Start+0x150>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d00e      	beq.n	8005042 <HAL_TIM_PWM_Start+0x10e>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a17      	ldr	r2, [pc, #92]	; (8005088 <HAL_TIM_PWM_Start+0x154>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d009      	beq.n	8005042 <HAL_TIM_PWM_Start+0x10e>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a16      	ldr	r2, [pc, #88]	; (800508c <HAL_TIM_PWM_Start+0x158>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d004      	beq.n	8005042 <HAL_TIM_PWM_Start+0x10e>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a14      	ldr	r2, [pc, #80]	; (8005090 <HAL_TIM_PWM_Start+0x15c>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d111      	bne.n	8005066 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f003 0307 	and.w	r3, r3, #7
 800504c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2b06      	cmp	r3, #6
 8005052:	d010      	beq.n	8005076 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f042 0201 	orr.w	r2, r2, #1
 8005062:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005064:	e007      	b.n	8005076 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f042 0201 	orr.w	r2, r2, #1
 8005074:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3710      	adds	r7, #16
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}
 8005080:	40010000 	.word	0x40010000
 8005084:	40000400 	.word	0x40000400
 8005088:	40000800 	.word	0x40000800
 800508c:	40000c00 	.word	0x40000c00
 8005090:	40014000 	.word	0x40014000

08005094 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b086      	sub	sp, #24
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d101      	bne.n	80050a8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e097      	b.n	80051d8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d106      	bne.n	80050c2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f7fd fb9f 	bl	8002800 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2202      	movs	r2, #2
 80050c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	6812      	ldr	r2, [r2, #0]
 80050d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050d8:	f023 0307 	bic.w	r3, r3, #7
 80050dc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	3304      	adds	r3, #4
 80050e6:	4619      	mov	r1, r3
 80050e8:	4610      	mov	r0, r2
 80050ea:	f000 f9c9 	bl	8005480 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	6a1b      	ldr	r3, [r3, #32]
 8005104:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	4313      	orrs	r3, r2
 800510e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005116:	f023 0303 	bic.w	r3, r3, #3
 800511a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	689a      	ldr	r2, [r3, #8]
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	699b      	ldr	r3, [r3, #24]
 8005124:	021b      	lsls	r3, r3, #8
 8005126:	4313      	orrs	r3, r2
 8005128:	693a      	ldr	r2, [r7, #16]
 800512a:	4313      	orrs	r3, r2
 800512c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005134:	f023 030c 	bic.w	r3, r3, #12
 8005138:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005140:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005144:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	68da      	ldr	r2, [r3, #12]
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	69db      	ldr	r3, [r3, #28]
 800514e:	021b      	lsls	r3, r3, #8
 8005150:	4313      	orrs	r3, r2
 8005152:	693a      	ldr	r2, [r7, #16]
 8005154:	4313      	orrs	r3, r2
 8005156:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	011a      	lsls	r2, r3, #4
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	031b      	lsls	r3, r3, #12
 8005164:	4313      	orrs	r3, r2
 8005166:	693a      	ldr	r2, [r7, #16]
 8005168:	4313      	orrs	r3, r2
 800516a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005172:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800517a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	695b      	ldr	r3, [r3, #20]
 8005184:	011b      	lsls	r3, r3, #4
 8005186:	4313      	orrs	r3, r2
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	4313      	orrs	r3, r2
 800518c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	693a      	ldr	r2, [r7, #16]
 800519c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2201      	movs	r2, #1
 80051b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2201      	movs	r2, #1
 80051c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2201      	movs	r2, #1
 80051ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3718      	adds	r7, #24
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051f0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80051f8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005200:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005208:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d110      	bne.n	8005232 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005210:	7bfb      	ldrb	r3, [r7, #15]
 8005212:	2b01      	cmp	r3, #1
 8005214:	d102      	bne.n	800521c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005216:	7b7b      	ldrb	r3, [r7, #13]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d001      	beq.n	8005220 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e069      	b.n	80052f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2202      	movs	r2, #2
 8005224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2202      	movs	r2, #2
 800522c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005230:	e031      	b.n	8005296 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	2b04      	cmp	r3, #4
 8005236:	d110      	bne.n	800525a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005238:	7bbb      	ldrb	r3, [r7, #14]
 800523a:	2b01      	cmp	r3, #1
 800523c:	d102      	bne.n	8005244 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800523e:	7b3b      	ldrb	r3, [r7, #12]
 8005240:	2b01      	cmp	r3, #1
 8005242:	d001      	beq.n	8005248 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e055      	b.n	80052f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2202      	movs	r2, #2
 800524c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2202      	movs	r2, #2
 8005254:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005258:	e01d      	b.n	8005296 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800525a:	7bfb      	ldrb	r3, [r7, #15]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d108      	bne.n	8005272 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005260:	7bbb      	ldrb	r3, [r7, #14]
 8005262:	2b01      	cmp	r3, #1
 8005264:	d105      	bne.n	8005272 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005266:	7b7b      	ldrb	r3, [r7, #13]
 8005268:	2b01      	cmp	r3, #1
 800526a:	d102      	bne.n	8005272 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800526c:	7b3b      	ldrb	r3, [r7, #12]
 800526e:	2b01      	cmp	r3, #1
 8005270:	d001      	beq.n	8005276 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e03e      	b.n	80052f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2202      	movs	r2, #2
 800527a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2202      	movs	r2, #2
 8005282:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2202      	movs	r2, #2
 800528a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2202      	movs	r2, #2
 8005292:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d003      	beq.n	80052a4 <HAL_TIM_Encoder_Start+0xc4>
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	2b04      	cmp	r3, #4
 80052a0:	d008      	beq.n	80052b4 <HAL_TIM_Encoder_Start+0xd4>
 80052a2:	e00f      	b.n	80052c4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2201      	movs	r2, #1
 80052aa:	2100      	movs	r1, #0
 80052ac:	4618      	mov	r0, r3
 80052ae:	f000 faf3 	bl	8005898 <TIM_CCxChannelCmd>
      break;
 80052b2:	e016      	b.n	80052e2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2201      	movs	r2, #1
 80052ba:	2104      	movs	r1, #4
 80052bc:	4618      	mov	r0, r3
 80052be:	f000 faeb 	bl	8005898 <TIM_CCxChannelCmd>
      break;
 80052c2:	e00e      	b.n	80052e2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2201      	movs	r2, #1
 80052ca:	2100      	movs	r1, #0
 80052cc:	4618      	mov	r0, r3
 80052ce:	f000 fae3 	bl	8005898 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2201      	movs	r2, #1
 80052d8:	2104      	movs	r1, #4
 80052da:	4618      	mov	r0, r3
 80052dc:	f000 fadc 	bl	8005898 <TIM_CCxChannelCmd>
      break;
 80052e0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f042 0201 	orr.w	r2, r2, #1
 80052f0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3710      	adds	r7, #16
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005308:	2300      	movs	r3, #0
 800530a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005312:	2b01      	cmp	r3, #1
 8005314:	d101      	bne.n	800531a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005316:	2302      	movs	r3, #2
 8005318:	e0ae      	b.n	8005478 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2b0c      	cmp	r3, #12
 8005326:	f200 809f 	bhi.w	8005468 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800532a:	a201      	add	r2, pc, #4	; (adr r2, 8005330 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800532c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005330:	08005365 	.word	0x08005365
 8005334:	08005469 	.word	0x08005469
 8005338:	08005469 	.word	0x08005469
 800533c:	08005469 	.word	0x08005469
 8005340:	080053a5 	.word	0x080053a5
 8005344:	08005469 	.word	0x08005469
 8005348:	08005469 	.word	0x08005469
 800534c:	08005469 	.word	0x08005469
 8005350:	080053e7 	.word	0x080053e7
 8005354:	08005469 	.word	0x08005469
 8005358:	08005469 	.word	0x08005469
 800535c:	08005469 	.word	0x08005469
 8005360:	08005427 	.word	0x08005427
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68b9      	ldr	r1, [r7, #8]
 800536a:	4618      	mov	r0, r3
 800536c:	f000 f908 	bl	8005580 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	699a      	ldr	r2, [r3, #24]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f042 0208 	orr.w	r2, r2, #8
 800537e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	699a      	ldr	r2, [r3, #24]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f022 0204 	bic.w	r2, r2, #4
 800538e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	6999      	ldr	r1, [r3, #24]
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	691a      	ldr	r2, [r3, #16]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	619a      	str	r2, [r3, #24]
      break;
 80053a2:	e064      	b.n	800546e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68b9      	ldr	r1, [r7, #8]
 80053aa:	4618      	mov	r0, r3
 80053ac:	f000 f94e 	bl	800564c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	699a      	ldr	r2, [r3, #24]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	699a      	ldr	r2, [r3, #24]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6999      	ldr	r1, [r3, #24]
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	021a      	lsls	r2, r3, #8
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	430a      	orrs	r2, r1
 80053e2:	619a      	str	r2, [r3, #24]
      break;
 80053e4:	e043      	b.n	800546e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68b9      	ldr	r1, [r7, #8]
 80053ec:	4618      	mov	r0, r3
 80053ee:	f000 f999 	bl	8005724 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	69da      	ldr	r2, [r3, #28]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f042 0208 	orr.w	r2, r2, #8
 8005400:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	69da      	ldr	r2, [r3, #28]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f022 0204 	bic.w	r2, r2, #4
 8005410:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	69d9      	ldr	r1, [r3, #28]
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	691a      	ldr	r2, [r3, #16]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	430a      	orrs	r2, r1
 8005422:	61da      	str	r2, [r3, #28]
      break;
 8005424:	e023      	b.n	800546e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68b9      	ldr	r1, [r7, #8]
 800542c:	4618      	mov	r0, r3
 800542e:	f000 f9e3 	bl	80057f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	69da      	ldr	r2, [r3, #28]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005440:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	69da      	ldr	r2, [r3, #28]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005450:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	69d9      	ldr	r1, [r3, #28]
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	021a      	lsls	r2, r3, #8
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	430a      	orrs	r2, r1
 8005464:	61da      	str	r2, [r3, #28]
      break;
 8005466:	e002      	b.n	800546e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	75fb      	strb	r3, [r7, #23]
      break;
 800546c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005476:	7dfb      	ldrb	r3, [r7, #23]
}
 8005478:	4618      	mov	r0, r3
 800547a:	3718      	adds	r7, #24
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005480:	b480      	push	{r7}
 8005482:	b085      	sub	sp, #20
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a34      	ldr	r2, [pc, #208]	; (8005564 <TIM_Base_SetConfig+0xe4>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d00f      	beq.n	80054b8 <TIM_Base_SetConfig+0x38>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800549e:	d00b      	beq.n	80054b8 <TIM_Base_SetConfig+0x38>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a31      	ldr	r2, [pc, #196]	; (8005568 <TIM_Base_SetConfig+0xe8>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d007      	beq.n	80054b8 <TIM_Base_SetConfig+0x38>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a30      	ldr	r2, [pc, #192]	; (800556c <TIM_Base_SetConfig+0xec>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d003      	beq.n	80054b8 <TIM_Base_SetConfig+0x38>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a2f      	ldr	r2, [pc, #188]	; (8005570 <TIM_Base_SetConfig+0xf0>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d108      	bne.n	80054ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a25      	ldr	r2, [pc, #148]	; (8005564 <TIM_Base_SetConfig+0xe4>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d01b      	beq.n	800550a <TIM_Base_SetConfig+0x8a>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054d8:	d017      	beq.n	800550a <TIM_Base_SetConfig+0x8a>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a22      	ldr	r2, [pc, #136]	; (8005568 <TIM_Base_SetConfig+0xe8>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d013      	beq.n	800550a <TIM_Base_SetConfig+0x8a>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a21      	ldr	r2, [pc, #132]	; (800556c <TIM_Base_SetConfig+0xec>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d00f      	beq.n	800550a <TIM_Base_SetConfig+0x8a>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a20      	ldr	r2, [pc, #128]	; (8005570 <TIM_Base_SetConfig+0xf0>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d00b      	beq.n	800550a <TIM_Base_SetConfig+0x8a>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a1f      	ldr	r2, [pc, #124]	; (8005574 <TIM_Base_SetConfig+0xf4>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d007      	beq.n	800550a <TIM_Base_SetConfig+0x8a>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a1e      	ldr	r2, [pc, #120]	; (8005578 <TIM_Base_SetConfig+0xf8>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d003      	beq.n	800550a <TIM_Base_SetConfig+0x8a>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a1d      	ldr	r2, [pc, #116]	; (800557c <TIM_Base_SetConfig+0xfc>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d108      	bne.n	800551c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005510:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	4313      	orrs	r3, r2
 800551a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	4313      	orrs	r3, r2
 8005528:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	689a      	ldr	r2, [r3, #8]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a08      	ldr	r2, [pc, #32]	; (8005564 <TIM_Base_SetConfig+0xe4>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d103      	bne.n	8005550 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	691a      	ldr	r2, [r3, #16]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	615a      	str	r2, [r3, #20]
}
 8005556:	bf00      	nop
 8005558:	3714      	adds	r7, #20
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	40010000 	.word	0x40010000
 8005568:	40000400 	.word	0x40000400
 800556c:	40000800 	.word	0x40000800
 8005570:	40000c00 	.word	0x40000c00
 8005574:	40014000 	.word	0x40014000
 8005578:	40014400 	.word	0x40014400
 800557c:	40014800 	.word	0x40014800

08005580 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005580:	b480      	push	{r7}
 8005582:	b087      	sub	sp, #28
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	f023 0201 	bic.w	r2, r3, #1
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f023 0303 	bic.w	r3, r3, #3
 80055b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	4313      	orrs	r3, r2
 80055c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	f023 0302 	bic.w	r3, r3, #2
 80055c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	697a      	ldr	r2, [r7, #20]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a1c      	ldr	r2, [pc, #112]	; (8005648 <TIM_OC1_SetConfig+0xc8>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d10c      	bne.n	80055f6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	f023 0308 	bic.w	r3, r3, #8
 80055e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	f023 0304 	bic.w	r3, r3, #4
 80055f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a13      	ldr	r2, [pc, #76]	; (8005648 <TIM_OC1_SetConfig+0xc8>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d111      	bne.n	8005622 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005604:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800560c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	693a      	ldr	r2, [r7, #16]
 8005614:	4313      	orrs	r3, r2
 8005616:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	699b      	ldr	r3, [r3, #24]
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	4313      	orrs	r3, r2
 8005620:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	685a      	ldr	r2, [r3, #4]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	621a      	str	r2, [r3, #32]
}
 800563c:	bf00      	nop
 800563e:	371c      	adds	r7, #28
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr
 8005648:	40010000 	.word	0x40010000

0800564c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800564c:	b480      	push	{r7}
 800564e:	b087      	sub	sp, #28
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a1b      	ldr	r3, [r3, #32]
 800565a:	f023 0210 	bic.w	r2, r3, #16
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800567a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005682:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	021b      	lsls	r3, r3, #8
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	4313      	orrs	r3, r2
 800568e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	f023 0320 	bic.w	r3, r3, #32
 8005696:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	011b      	lsls	r3, r3, #4
 800569e:	697a      	ldr	r2, [r7, #20]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a1e      	ldr	r2, [pc, #120]	; (8005720 <TIM_OC2_SetConfig+0xd4>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d10d      	bne.n	80056c8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	011b      	lsls	r3, r3, #4
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	4313      	orrs	r3, r2
 80056be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a15      	ldr	r2, [pc, #84]	; (8005720 <TIM_OC2_SetConfig+0xd4>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d113      	bne.n	80056f8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	693a      	ldr	r2, [r7, #16]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	693a      	ldr	r2, [r7, #16]
 80056fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	685a      	ldr	r2, [r3, #4]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	697a      	ldr	r2, [r7, #20]
 8005710:	621a      	str	r2, [r3, #32]
}
 8005712:	bf00      	nop
 8005714:	371c      	adds	r7, #28
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	40010000 	.word	0x40010000

08005724 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005724:	b480      	push	{r7}
 8005726:	b087      	sub	sp, #28
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a1b      	ldr	r3, [r3, #32]
 8005732:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a1b      	ldr	r3, [r3, #32]
 800573e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	69db      	ldr	r3, [r3, #28]
 800574a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f023 0303 	bic.w	r3, r3, #3
 800575a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	4313      	orrs	r3, r2
 8005764:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800576c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	021b      	lsls	r3, r3, #8
 8005774:	697a      	ldr	r2, [r7, #20]
 8005776:	4313      	orrs	r3, r2
 8005778:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a1d      	ldr	r2, [pc, #116]	; (80057f4 <TIM_OC3_SetConfig+0xd0>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d10d      	bne.n	800579e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005788:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	021b      	lsls	r3, r3, #8
 8005790:	697a      	ldr	r2, [r7, #20]
 8005792:	4313      	orrs	r3, r2
 8005794:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800579c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a14      	ldr	r2, [pc, #80]	; (80057f4 <TIM_OC3_SetConfig+0xd0>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d113      	bne.n	80057ce <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	695b      	ldr	r3, [r3, #20]
 80057ba:	011b      	lsls	r3, r3, #4
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	4313      	orrs	r3, r2
 80057c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	011b      	lsls	r3, r3, #4
 80057c8:	693a      	ldr	r2, [r7, #16]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	685a      	ldr	r2, [r3, #4]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	697a      	ldr	r2, [r7, #20]
 80057e6:	621a      	str	r2, [r3, #32]
}
 80057e8:	bf00      	nop
 80057ea:	371c      	adds	r7, #28
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr
 80057f4:	40010000 	.word	0x40010000

080057f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b087      	sub	sp, #28
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a1b      	ldr	r3, [r3, #32]
 8005806:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a1b      	ldr	r3, [r3, #32]
 8005812:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	69db      	ldr	r3, [r3, #28]
 800581e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800582e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	021b      	lsls	r3, r3, #8
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	4313      	orrs	r3, r2
 800583a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005842:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	031b      	lsls	r3, r3, #12
 800584a:	693a      	ldr	r2, [r7, #16]
 800584c:	4313      	orrs	r3, r2
 800584e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a10      	ldr	r2, [pc, #64]	; (8005894 <TIM_OC4_SetConfig+0x9c>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d109      	bne.n	800586c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800585e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	695b      	ldr	r3, [r3, #20]
 8005864:	019b      	lsls	r3, r3, #6
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	4313      	orrs	r3, r2
 800586a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	685a      	ldr	r2, [r3, #4]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	693a      	ldr	r2, [r7, #16]
 8005884:	621a      	str	r2, [r3, #32]
}
 8005886:	bf00      	nop
 8005888:	371c      	adds	r7, #28
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	40010000 	.word	0x40010000

08005898 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005898:	b480      	push	{r7}
 800589a:	b087      	sub	sp, #28
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	f003 031f 	and.w	r3, r3, #31
 80058aa:	2201      	movs	r2, #1
 80058ac:	fa02 f303 	lsl.w	r3, r2, r3
 80058b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6a1a      	ldr	r2, [r3, #32]
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	43db      	mvns	r3, r3
 80058ba:	401a      	ands	r2, r3
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6a1a      	ldr	r2, [r3, #32]
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	f003 031f 	and.w	r3, r3, #31
 80058ca:	6879      	ldr	r1, [r7, #4]
 80058cc:	fa01 f303 	lsl.w	r3, r1, r3
 80058d0:	431a      	orrs	r2, r3
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	621a      	str	r2, [r3, #32]
}
 80058d6:	bf00      	nop
 80058d8:	371c      	adds	r7, #28
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr
	...

080058e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d101      	bne.n	80058fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058f8:	2302      	movs	r3, #2
 80058fa:	e050      	b.n	800599e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2202      	movs	r2, #2
 8005908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005922:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	4313      	orrs	r3, r2
 800592c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a1c      	ldr	r2, [pc, #112]	; (80059ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d018      	beq.n	8005972 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005948:	d013      	beq.n	8005972 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a18      	ldr	r2, [pc, #96]	; (80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d00e      	beq.n	8005972 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a16      	ldr	r2, [pc, #88]	; (80059b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d009      	beq.n	8005972 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a15      	ldr	r2, [pc, #84]	; (80059b8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d004      	beq.n	8005972 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a13      	ldr	r2, [pc, #76]	; (80059bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d10c      	bne.n	800598c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005978:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	68ba      	ldr	r2, [r7, #8]
 8005980:	4313      	orrs	r3, r2
 8005982:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	68ba      	ldr	r2, [r7, #8]
 800598a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3714      	adds	r7, #20
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr
 80059aa:	bf00      	nop
 80059ac:	40010000 	.word	0x40010000
 80059b0:	40000400 	.word	0x40000400
 80059b4:	40000800 	.word	0x40000800
 80059b8:	40000c00 	.word	0x40000c00
 80059bc:	40014000 	.word	0x40014000

080059c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b085      	sub	sp, #20
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80059ca:	2300      	movs	r3, #0
 80059cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d101      	bne.n	80059dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80059d8:	2302      	movs	r3, #2
 80059da:	e03d      	b.n	8005a58 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	695b      	ldr	r3, [r3, #20]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	69db      	ldr	r3, [r3, #28]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3714      	adds	r7, #20
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b082      	sub	sp, #8
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d101      	bne.n	8005a76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e03f      	b.n	8005af6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d106      	bne.n	8005a90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f7fc ffa8 	bl	80029e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2224      	movs	r2, #36	; 0x24
 8005a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	68da      	ldr	r2, [r3, #12]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005aa6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f000 f929 	bl	8005d00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	691a      	ldr	r2, [r3, #16]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005abc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	695a      	ldr	r2, [r3, #20]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005acc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68da      	ldr	r2, [r3, #12]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005adc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2220      	movs	r2, #32
 8005ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2220      	movs	r2, #32
 8005af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3708      	adds	r7, #8
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}

08005afe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005afe:	b580      	push	{r7, lr}
 8005b00:	b08a      	sub	sp, #40	; 0x28
 8005b02:	af02      	add	r7, sp, #8
 8005b04:	60f8      	str	r0, [r7, #12]
 8005b06:	60b9      	str	r1, [r7, #8]
 8005b08:	603b      	str	r3, [r7, #0]
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b20      	cmp	r3, #32
 8005b1c:	d17c      	bne.n	8005c18 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d002      	beq.n	8005b2a <HAL_UART_Transmit+0x2c>
 8005b24:	88fb      	ldrh	r3, [r7, #6]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d101      	bne.n	8005b2e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e075      	b.n	8005c1a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d101      	bne.n	8005b3c <HAL_UART_Transmit+0x3e>
 8005b38:	2302      	movs	r3, #2
 8005b3a:	e06e      	b.n	8005c1a <HAL_UART_Transmit+0x11c>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2221      	movs	r2, #33	; 0x21
 8005b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b52:	f7fd f88f 	bl	8002c74 <HAL_GetTick>
 8005b56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	88fa      	ldrh	r2, [r7, #6]
 8005b5c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	88fa      	ldrh	r2, [r7, #6]
 8005b62:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b6c:	d108      	bne.n	8005b80 <HAL_UART_Transmit+0x82>
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d104      	bne.n	8005b80 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005b76:	2300      	movs	r3, #0
 8005b78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	61bb      	str	r3, [r7, #24]
 8005b7e:	e003      	b.n	8005b88 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b84:	2300      	movs	r3, #0
 8005b86:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005b90:	e02a      	b.n	8005be8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	9300      	str	r3, [sp, #0]
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	2180      	movs	r1, #128	; 0x80
 8005b9c:	68f8      	ldr	r0, [r7, #12]
 8005b9e:	f000 f840 	bl	8005c22 <UART_WaitOnFlagUntilTimeout>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d001      	beq.n	8005bac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	e036      	b.n	8005c1a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d10b      	bne.n	8005bca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	881b      	ldrh	r3, [r3, #0]
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bc0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	3302      	adds	r3, #2
 8005bc6:	61bb      	str	r3, [r7, #24]
 8005bc8:	e007      	b.n	8005bda <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	781a      	ldrb	r2, [r3, #0]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	3b01      	subs	r3, #1
 8005be2:	b29a      	uxth	r2, r3
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1cf      	bne.n	8005b92 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	9300      	str	r3, [sp, #0]
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	2140      	movs	r1, #64	; 0x40
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f000 f810 	bl	8005c22 <UART_WaitOnFlagUntilTimeout>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d001      	beq.n	8005c0c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	e006      	b.n	8005c1a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2220      	movs	r2, #32
 8005c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005c14:	2300      	movs	r3, #0
 8005c16:	e000      	b.n	8005c1a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005c18:	2302      	movs	r3, #2
  }
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3720      	adds	r7, #32
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}

08005c22 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005c22:	b580      	push	{r7, lr}
 8005c24:	b090      	sub	sp, #64	; 0x40
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	60f8      	str	r0, [r7, #12]
 8005c2a:	60b9      	str	r1, [r7, #8]
 8005c2c:	603b      	str	r3, [r7, #0]
 8005c2e:	4613      	mov	r3, r2
 8005c30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c32:	e050      	b.n	8005cd6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c3a:	d04c      	beq.n	8005cd6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005c3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d007      	beq.n	8005c52 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c42:	f7fd f817 	bl	8002c74 <HAL_GetTick>
 8005c46:	4602      	mov	r2, r0
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d241      	bcs.n	8005cd6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	330c      	adds	r3, #12
 8005c58:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5c:	e853 3f00 	ldrex	r3, [r3]
 8005c60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	330c      	adds	r3, #12
 8005c70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c72:	637a      	str	r2, [r7, #52]	; 0x34
 8005c74:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c7a:	e841 2300 	strex	r3, r2, [r1]
 8005c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1e5      	bne.n	8005c52 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	3314      	adds	r3, #20
 8005c8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	e853 3f00 	ldrex	r3, [r3]
 8005c94:	613b      	str	r3, [r7, #16]
   return(result);
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	f023 0301 	bic.w	r3, r3, #1
 8005c9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	3314      	adds	r3, #20
 8005ca4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ca6:	623a      	str	r2, [r7, #32]
 8005ca8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005caa:	69f9      	ldr	r1, [r7, #28]
 8005cac:	6a3a      	ldr	r2, [r7, #32]
 8005cae:	e841 2300 	strex	r3, r2, [r1]
 8005cb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d1e5      	bne.n	8005c86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2220      	movs	r2, #32
 8005cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2220      	movs	r2, #32
 8005cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e00f      	b.n	8005cf6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	4013      	ands	r3, r2
 8005ce0:	68ba      	ldr	r2, [r7, #8]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	bf0c      	ite	eq
 8005ce6:	2301      	moveq	r3, #1
 8005ce8:	2300      	movne	r3, #0
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	461a      	mov	r2, r3
 8005cee:	79fb      	ldrb	r3, [r7, #7]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d09f      	beq.n	8005c34 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3740      	adds	r7, #64	; 0x40
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
	...

08005d00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d04:	b09f      	sub	sp, #124	; 0x7c
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005d14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d16:	68d9      	ldr	r1, [r3, #12]
 8005d18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	ea40 0301 	orr.w	r3, r0, r1
 8005d20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d24:	689a      	ldr	r2, [r3, #8]
 8005d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	431a      	orrs	r2, r3
 8005d2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d2e:	695b      	ldr	r3, [r3, #20]
 8005d30:	431a      	orrs	r2, r3
 8005d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d34:	69db      	ldr	r3, [r3, #28]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005d3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005d44:	f021 010c 	bic.w	r1, r1, #12
 8005d48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d4e:	430b      	orrs	r3, r1
 8005d50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	695b      	ldr	r3, [r3, #20]
 8005d58:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005d5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d5e:	6999      	ldr	r1, [r3, #24]
 8005d60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	ea40 0301 	orr.w	r3, r0, r1
 8005d68:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	4bc5      	ldr	r3, [pc, #788]	; (8006084 <UART_SetConfig+0x384>)
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d004      	beq.n	8005d7e <UART_SetConfig+0x7e>
 8005d74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	4bc3      	ldr	r3, [pc, #780]	; (8006088 <UART_SetConfig+0x388>)
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d103      	bne.n	8005d86 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d7e:	f7ff f875 	bl	8004e6c <HAL_RCC_GetPCLK2Freq>
 8005d82:	6778      	str	r0, [r7, #116]	; 0x74
 8005d84:	e002      	b.n	8005d8c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d86:	f7ff f85d 	bl	8004e44 <HAL_RCC_GetPCLK1Freq>
 8005d8a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d8e:	69db      	ldr	r3, [r3, #28]
 8005d90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d94:	f040 80b6 	bne.w	8005f04 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d9a:	461c      	mov	r4, r3
 8005d9c:	f04f 0500 	mov.w	r5, #0
 8005da0:	4622      	mov	r2, r4
 8005da2:	462b      	mov	r3, r5
 8005da4:	1891      	adds	r1, r2, r2
 8005da6:	6439      	str	r1, [r7, #64]	; 0x40
 8005da8:	415b      	adcs	r3, r3
 8005daa:	647b      	str	r3, [r7, #68]	; 0x44
 8005dac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005db0:	1912      	adds	r2, r2, r4
 8005db2:	eb45 0303 	adc.w	r3, r5, r3
 8005db6:	f04f 0000 	mov.w	r0, #0
 8005dba:	f04f 0100 	mov.w	r1, #0
 8005dbe:	00d9      	lsls	r1, r3, #3
 8005dc0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005dc4:	00d0      	lsls	r0, r2, #3
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	460b      	mov	r3, r1
 8005dca:	1911      	adds	r1, r2, r4
 8005dcc:	6639      	str	r1, [r7, #96]	; 0x60
 8005dce:	416b      	adcs	r3, r5
 8005dd0:	667b      	str	r3, [r7, #100]	; 0x64
 8005dd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	f04f 0300 	mov.w	r3, #0
 8005ddc:	1891      	adds	r1, r2, r2
 8005dde:	63b9      	str	r1, [r7, #56]	; 0x38
 8005de0:	415b      	adcs	r3, r3
 8005de2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005de4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005de8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005dec:	f7fa ff54 	bl	8000c98 <__aeabi_uldivmod>
 8005df0:	4602      	mov	r2, r0
 8005df2:	460b      	mov	r3, r1
 8005df4:	4ba5      	ldr	r3, [pc, #660]	; (800608c <UART_SetConfig+0x38c>)
 8005df6:	fba3 2302 	umull	r2, r3, r3, r2
 8005dfa:	095b      	lsrs	r3, r3, #5
 8005dfc:	011e      	lsls	r6, r3, #4
 8005dfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e00:	461c      	mov	r4, r3
 8005e02:	f04f 0500 	mov.w	r5, #0
 8005e06:	4622      	mov	r2, r4
 8005e08:	462b      	mov	r3, r5
 8005e0a:	1891      	adds	r1, r2, r2
 8005e0c:	6339      	str	r1, [r7, #48]	; 0x30
 8005e0e:	415b      	adcs	r3, r3
 8005e10:	637b      	str	r3, [r7, #52]	; 0x34
 8005e12:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005e16:	1912      	adds	r2, r2, r4
 8005e18:	eb45 0303 	adc.w	r3, r5, r3
 8005e1c:	f04f 0000 	mov.w	r0, #0
 8005e20:	f04f 0100 	mov.w	r1, #0
 8005e24:	00d9      	lsls	r1, r3, #3
 8005e26:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e2a:	00d0      	lsls	r0, r2, #3
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	460b      	mov	r3, r1
 8005e30:	1911      	adds	r1, r2, r4
 8005e32:	65b9      	str	r1, [r7, #88]	; 0x58
 8005e34:	416b      	adcs	r3, r5
 8005e36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	f04f 0300 	mov.w	r3, #0
 8005e42:	1891      	adds	r1, r2, r2
 8005e44:	62b9      	str	r1, [r7, #40]	; 0x28
 8005e46:	415b      	adcs	r3, r3
 8005e48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e4e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005e52:	f7fa ff21 	bl	8000c98 <__aeabi_uldivmod>
 8005e56:	4602      	mov	r2, r0
 8005e58:	460b      	mov	r3, r1
 8005e5a:	4b8c      	ldr	r3, [pc, #560]	; (800608c <UART_SetConfig+0x38c>)
 8005e5c:	fba3 1302 	umull	r1, r3, r3, r2
 8005e60:	095b      	lsrs	r3, r3, #5
 8005e62:	2164      	movs	r1, #100	; 0x64
 8005e64:	fb01 f303 	mul.w	r3, r1, r3
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	00db      	lsls	r3, r3, #3
 8005e6c:	3332      	adds	r3, #50	; 0x32
 8005e6e:	4a87      	ldr	r2, [pc, #540]	; (800608c <UART_SetConfig+0x38c>)
 8005e70:	fba2 2303 	umull	r2, r3, r2, r3
 8005e74:	095b      	lsrs	r3, r3, #5
 8005e76:	005b      	lsls	r3, r3, #1
 8005e78:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e7c:	441e      	add	r6, r3
 8005e7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e80:	4618      	mov	r0, r3
 8005e82:	f04f 0100 	mov.w	r1, #0
 8005e86:	4602      	mov	r2, r0
 8005e88:	460b      	mov	r3, r1
 8005e8a:	1894      	adds	r4, r2, r2
 8005e8c:	623c      	str	r4, [r7, #32]
 8005e8e:	415b      	adcs	r3, r3
 8005e90:	627b      	str	r3, [r7, #36]	; 0x24
 8005e92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e96:	1812      	adds	r2, r2, r0
 8005e98:	eb41 0303 	adc.w	r3, r1, r3
 8005e9c:	f04f 0400 	mov.w	r4, #0
 8005ea0:	f04f 0500 	mov.w	r5, #0
 8005ea4:	00dd      	lsls	r5, r3, #3
 8005ea6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005eaa:	00d4      	lsls	r4, r2, #3
 8005eac:	4622      	mov	r2, r4
 8005eae:	462b      	mov	r3, r5
 8005eb0:	1814      	adds	r4, r2, r0
 8005eb2:	653c      	str	r4, [r7, #80]	; 0x50
 8005eb4:	414b      	adcs	r3, r1
 8005eb6:	657b      	str	r3, [r7, #84]	; 0x54
 8005eb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	f04f 0300 	mov.w	r3, #0
 8005ec2:	1891      	adds	r1, r2, r2
 8005ec4:	61b9      	str	r1, [r7, #24]
 8005ec6:	415b      	adcs	r3, r3
 8005ec8:	61fb      	str	r3, [r7, #28]
 8005eca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ece:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005ed2:	f7fa fee1 	bl	8000c98 <__aeabi_uldivmod>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	460b      	mov	r3, r1
 8005eda:	4b6c      	ldr	r3, [pc, #432]	; (800608c <UART_SetConfig+0x38c>)
 8005edc:	fba3 1302 	umull	r1, r3, r3, r2
 8005ee0:	095b      	lsrs	r3, r3, #5
 8005ee2:	2164      	movs	r1, #100	; 0x64
 8005ee4:	fb01 f303 	mul.w	r3, r1, r3
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	00db      	lsls	r3, r3, #3
 8005eec:	3332      	adds	r3, #50	; 0x32
 8005eee:	4a67      	ldr	r2, [pc, #412]	; (800608c <UART_SetConfig+0x38c>)
 8005ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ef4:	095b      	lsrs	r3, r3, #5
 8005ef6:	f003 0207 	and.w	r2, r3, #7
 8005efa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4432      	add	r2, r6
 8005f00:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f02:	e0b9      	b.n	8006078 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f06:	461c      	mov	r4, r3
 8005f08:	f04f 0500 	mov.w	r5, #0
 8005f0c:	4622      	mov	r2, r4
 8005f0e:	462b      	mov	r3, r5
 8005f10:	1891      	adds	r1, r2, r2
 8005f12:	6139      	str	r1, [r7, #16]
 8005f14:	415b      	adcs	r3, r3
 8005f16:	617b      	str	r3, [r7, #20]
 8005f18:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005f1c:	1912      	adds	r2, r2, r4
 8005f1e:	eb45 0303 	adc.w	r3, r5, r3
 8005f22:	f04f 0000 	mov.w	r0, #0
 8005f26:	f04f 0100 	mov.w	r1, #0
 8005f2a:	00d9      	lsls	r1, r3, #3
 8005f2c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f30:	00d0      	lsls	r0, r2, #3
 8005f32:	4602      	mov	r2, r0
 8005f34:	460b      	mov	r3, r1
 8005f36:	eb12 0804 	adds.w	r8, r2, r4
 8005f3a:	eb43 0905 	adc.w	r9, r3, r5
 8005f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	4618      	mov	r0, r3
 8005f44:	f04f 0100 	mov.w	r1, #0
 8005f48:	f04f 0200 	mov.w	r2, #0
 8005f4c:	f04f 0300 	mov.w	r3, #0
 8005f50:	008b      	lsls	r3, r1, #2
 8005f52:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005f56:	0082      	lsls	r2, r0, #2
 8005f58:	4640      	mov	r0, r8
 8005f5a:	4649      	mov	r1, r9
 8005f5c:	f7fa fe9c 	bl	8000c98 <__aeabi_uldivmod>
 8005f60:	4602      	mov	r2, r0
 8005f62:	460b      	mov	r3, r1
 8005f64:	4b49      	ldr	r3, [pc, #292]	; (800608c <UART_SetConfig+0x38c>)
 8005f66:	fba3 2302 	umull	r2, r3, r3, r2
 8005f6a:	095b      	lsrs	r3, r3, #5
 8005f6c:	011e      	lsls	r6, r3, #4
 8005f6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f70:	4618      	mov	r0, r3
 8005f72:	f04f 0100 	mov.w	r1, #0
 8005f76:	4602      	mov	r2, r0
 8005f78:	460b      	mov	r3, r1
 8005f7a:	1894      	adds	r4, r2, r2
 8005f7c:	60bc      	str	r4, [r7, #8]
 8005f7e:	415b      	adcs	r3, r3
 8005f80:	60fb      	str	r3, [r7, #12]
 8005f82:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f86:	1812      	adds	r2, r2, r0
 8005f88:	eb41 0303 	adc.w	r3, r1, r3
 8005f8c:	f04f 0400 	mov.w	r4, #0
 8005f90:	f04f 0500 	mov.w	r5, #0
 8005f94:	00dd      	lsls	r5, r3, #3
 8005f96:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005f9a:	00d4      	lsls	r4, r2, #3
 8005f9c:	4622      	mov	r2, r4
 8005f9e:	462b      	mov	r3, r5
 8005fa0:	1814      	adds	r4, r2, r0
 8005fa2:	64bc      	str	r4, [r7, #72]	; 0x48
 8005fa4:	414b      	adcs	r3, r1
 8005fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	4618      	mov	r0, r3
 8005fae:	f04f 0100 	mov.w	r1, #0
 8005fb2:	f04f 0200 	mov.w	r2, #0
 8005fb6:	f04f 0300 	mov.w	r3, #0
 8005fba:	008b      	lsls	r3, r1, #2
 8005fbc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005fc0:	0082      	lsls	r2, r0, #2
 8005fc2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005fc6:	f7fa fe67 	bl	8000c98 <__aeabi_uldivmod>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	460b      	mov	r3, r1
 8005fce:	4b2f      	ldr	r3, [pc, #188]	; (800608c <UART_SetConfig+0x38c>)
 8005fd0:	fba3 1302 	umull	r1, r3, r3, r2
 8005fd4:	095b      	lsrs	r3, r3, #5
 8005fd6:	2164      	movs	r1, #100	; 0x64
 8005fd8:	fb01 f303 	mul.w	r3, r1, r3
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	011b      	lsls	r3, r3, #4
 8005fe0:	3332      	adds	r3, #50	; 0x32
 8005fe2:	4a2a      	ldr	r2, [pc, #168]	; (800608c <UART_SetConfig+0x38c>)
 8005fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8005fe8:	095b      	lsrs	r3, r3, #5
 8005fea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fee:	441e      	add	r6, r3
 8005ff0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f04f 0100 	mov.w	r1, #0
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	1894      	adds	r4, r2, r2
 8005ffe:	603c      	str	r4, [r7, #0]
 8006000:	415b      	adcs	r3, r3
 8006002:	607b      	str	r3, [r7, #4]
 8006004:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006008:	1812      	adds	r2, r2, r0
 800600a:	eb41 0303 	adc.w	r3, r1, r3
 800600e:	f04f 0400 	mov.w	r4, #0
 8006012:	f04f 0500 	mov.w	r5, #0
 8006016:	00dd      	lsls	r5, r3, #3
 8006018:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800601c:	00d4      	lsls	r4, r2, #3
 800601e:	4622      	mov	r2, r4
 8006020:	462b      	mov	r3, r5
 8006022:	eb12 0a00 	adds.w	sl, r2, r0
 8006026:	eb43 0b01 	adc.w	fp, r3, r1
 800602a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	4618      	mov	r0, r3
 8006030:	f04f 0100 	mov.w	r1, #0
 8006034:	f04f 0200 	mov.w	r2, #0
 8006038:	f04f 0300 	mov.w	r3, #0
 800603c:	008b      	lsls	r3, r1, #2
 800603e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006042:	0082      	lsls	r2, r0, #2
 8006044:	4650      	mov	r0, sl
 8006046:	4659      	mov	r1, fp
 8006048:	f7fa fe26 	bl	8000c98 <__aeabi_uldivmod>
 800604c:	4602      	mov	r2, r0
 800604e:	460b      	mov	r3, r1
 8006050:	4b0e      	ldr	r3, [pc, #56]	; (800608c <UART_SetConfig+0x38c>)
 8006052:	fba3 1302 	umull	r1, r3, r3, r2
 8006056:	095b      	lsrs	r3, r3, #5
 8006058:	2164      	movs	r1, #100	; 0x64
 800605a:	fb01 f303 	mul.w	r3, r1, r3
 800605e:	1ad3      	subs	r3, r2, r3
 8006060:	011b      	lsls	r3, r3, #4
 8006062:	3332      	adds	r3, #50	; 0x32
 8006064:	4a09      	ldr	r2, [pc, #36]	; (800608c <UART_SetConfig+0x38c>)
 8006066:	fba2 2303 	umull	r2, r3, r2, r3
 800606a:	095b      	lsrs	r3, r3, #5
 800606c:	f003 020f 	and.w	r2, r3, #15
 8006070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4432      	add	r2, r6
 8006076:	609a      	str	r2, [r3, #8]
}
 8006078:	bf00      	nop
 800607a:	377c      	adds	r7, #124	; 0x7c
 800607c:	46bd      	mov	sp, r7
 800607e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006082:	bf00      	nop
 8006084:	40011000 	.word	0x40011000
 8006088:	40011400 	.word	0x40011400
 800608c:	51eb851f 	.word	0x51eb851f

08006090 <__errno>:
 8006090:	4b01      	ldr	r3, [pc, #4]	; (8006098 <__errno+0x8>)
 8006092:	6818      	ldr	r0, [r3, #0]
 8006094:	4770      	bx	lr
 8006096:	bf00      	nop
 8006098:	20000010 	.word	0x20000010

0800609c <__libc_init_array>:
 800609c:	b570      	push	{r4, r5, r6, lr}
 800609e:	4d0d      	ldr	r5, [pc, #52]	; (80060d4 <__libc_init_array+0x38>)
 80060a0:	4c0d      	ldr	r4, [pc, #52]	; (80060d8 <__libc_init_array+0x3c>)
 80060a2:	1b64      	subs	r4, r4, r5
 80060a4:	10a4      	asrs	r4, r4, #2
 80060a6:	2600      	movs	r6, #0
 80060a8:	42a6      	cmp	r6, r4
 80060aa:	d109      	bne.n	80060c0 <__libc_init_array+0x24>
 80060ac:	4d0b      	ldr	r5, [pc, #44]	; (80060dc <__libc_init_array+0x40>)
 80060ae:	4c0c      	ldr	r4, [pc, #48]	; (80060e0 <__libc_init_array+0x44>)
 80060b0:	f002 fc30 	bl	8008914 <_init>
 80060b4:	1b64      	subs	r4, r4, r5
 80060b6:	10a4      	asrs	r4, r4, #2
 80060b8:	2600      	movs	r6, #0
 80060ba:	42a6      	cmp	r6, r4
 80060bc:	d105      	bne.n	80060ca <__libc_init_array+0x2e>
 80060be:	bd70      	pop	{r4, r5, r6, pc}
 80060c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80060c4:	4798      	blx	r3
 80060c6:	3601      	adds	r6, #1
 80060c8:	e7ee      	b.n	80060a8 <__libc_init_array+0xc>
 80060ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80060ce:	4798      	blx	r3
 80060d0:	3601      	adds	r6, #1
 80060d2:	e7f2      	b.n	80060ba <__libc_init_array+0x1e>
 80060d4:	08008bb8 	.word	0x08008bb8
 80060d8:	08008bb8 	.word	0x08008bb8
 80060dc:	08008bb8 	.word	0x08008bb8
 80060e0:	08008bbc 	.word	0x08008bbc

080060e4 <memset>:
 80060e4:	4402      	add	r2, r0
 80060e6:	4603      	mov	r3, r0
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d100      	bne.n	80060ee <memset+0xa>
 80060ec:	4770      	bx	lr
 80060ee:	f803 1b01 	strb.w	r1, [r3], #1
 80060f2:	e7f9      	b.n	80060e8 <memset+0x4>

080060f4 <siprintf>:
 80060f4:	b40e      	push	{r1, r2, r3}
 80060f6:	b500      	push	{lr}
 80060f8:	b09c      	sub	sp, #112	; 0x70
 80060fa:	ab1d      	add	r3, sp, #116	; 0x74
 80060fc:	9002      	str	r0, [sp, #8]
 80060fe:	9006      	str	r0, [sp, #24]
 8006100:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006104:	4809      	ldr	r0, [pc, #36]	; (800612c <siprintf+0x38>)
 8006106:	9107      	str	r1, [sp, #28]
 8006108:	9104      	str	r1, [sp, #16]
 800610a:	4909      	ldr	r1, [pc, #36]	; (8006130 <siprintf+0x3c>)
 800610c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006110:	9105      	str	r1, [sp, #20]
 8006112:	6800      	ldr	r0, [r0, #0]
 8006114:	9301      	str	r3, [sp, #4]
 8006116:	a902      	add	r1, sp, #8
 8006118:	f000 f868 	bl	80061ec <_svfiprintf_r>
 800611c:	9b02      	ldr	r3, [sp, #8]
 800611e:	2200      	movs	r2, #0
 8006120:	701a      	strb	r2, [r3, #0]
 8006122:	b01c      	add	sp, #112	; 0x70
 8006124:	f85d eb04 	ldr.w	lr, [sp], #4
 8006128:	b003      	add	sp, #12
 800612a:	4770      	bx	lr
 800612c:	20000010 	.word	0x20000010
 8006130:	ffff0208 	.word	0xffff0208

08006134 <__ssputs_r>:
 8006134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006138:	688e      	ldr	r6, [r1, #8]
 800613a:	429e      	cmp	r6, r3
 800613c:	4682      	mov	sl, r0
 800613e:	460c      	mov	r4, r1
 8006140:	4690      	mov	r8, r2
 8006142:	461f      	mov	r7, r3
 8006144:	d838      	bhi.n	80061b8 <__ssputs_r+0x84>
 8006146:	898a      	ldrh	r2, [r1, #12]
 8006148:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800614c:	d032      	beq.n	80061b4 <__ssputs_r+0x80>
 800614e:	6825      	ldr	r5, [r4, #0]
 8006150:	6909      	ldr	r1, [r1, #16]
 8006152:	eba5 0901 	sub.w	r9, r5, r1
 8006156:	6965      	ldr	r5, [r4, #20]
 8006158:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800615c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006160:	3301      	adds	r3, #1
 8006162:	444b      	add	r3, r9
 8006164:	106d      	asrs	r5, r5, #1
 8006166:	429d      	cmp	r5, r3
 8006168:	bf38      	it	cc
 800616a:	461d      	movcc	r5, r3
 800616c:	0553      	lsls	r3, r2, #21
 800616e:	d531      	bpl.n	80061d4 <__ssputs_r+0xa0>
 8006170:	4629      	mov	r1, r5
 8006172:	f000 fb47 	bl	8006804 <_malloc_r>
 8006176:	4606      	mov	r6, r0
 8006178:	b950      	cbnz	r0, 8006190 <__ssputs_r+0x5c>
 800617a:	230c      	movs	r3, #12
 800617c:	f8ca 3000 	str.w	r3, [sl]
 8006180:	89a3      	ldrh	r3, [r4, #12]
 8006182:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006186:	81a3      	strh	r3, [r4, #12]
 8006188:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800618c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006190:	6921      	ldr	r1, [r4, #16]
 8006192:	464a      	mov	r2, r9
 8006194:	f000 fabe 	bl	8006714 <memcpy>
 8006198:	89a3      	ldrh	r3, [r4, #12]
 800619a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800619e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061a2:	81a3      	strh	r3, [r4, #12]
 80061a4:	6126      	str	r6, [r4, #16]
 80061a6:	6165      	str	r5, [r4, #20]
 80061a8:	444e      	add	r6, r9
 80061aa:	eba5 0509 	sub.w	r5, r5, r9
 80061ae:	6026      	str	r6, [r4, #0]
 80061b0:	60a5      	str	r5, [r4, #8]
 80061b2:	463e      	mov	r6, r7
 80061b4:	42be      	cmp	r6, r7
 80061b6:	d900      	bls.n	80061ba <__ssputs_r+0x86>
 80061b8:	463e      	mov	r6, r7
 80061ba:	4632      	mov	r2, r6
 80061bc:	6820      	ldr	r0, [r4, #0]
 80061be:	4641      	mov	r1, r8
 80061c0:	f000 fab6 	bl	8006730 <memmove>
 80061c4:	68a3      	ldr	r3, [r4, #8]
 80061c6:	6822      	ldr	r2, [r4, #0]
 80061c8:	1b9b      	subs	r3, r3, r6
 80061ca:	4432      	add	r2, r6
 80061cc:	60a3      	str	r3, [r4, #8]
 80061ce:	6022      	str	r2, [r4, #0]
 80061d0:	2000      	movs	r0, #0
 80061d2:	e7db      	b.n	800618c <__ssputs_r+0x58>
 80061d4:	462a      	mov	r2, r5
 80061d6:	f000 fb6f 	bl	80068b8 <_realloc_r>
 80061da:	4606      	mov	r6, r0
 80061dc:	2800      	cmp	r0, #0
 80061de:	d1e1      	bne.n	80061a4 <__ssputs_r+0x70>
 80061e0:	6921      	ldr	r1, [r4, #16]
 80061e2:	4650      	mov	r0, sl
 80061e4:	f000 fabe 	bl	8006764 <_free_r>
 80061e8:	e7c7      	b.n	800617a <__ssputs_r+0x46>
	...

080061ec <_svfiprintf_r>:
 80061ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061f0:	4698      	mov	r8, r3
 80061f2:	898b      	ldrh	r3, [r1, #12]
 80061f4:	061b      	lsls	r3, r3, #24
 80061f6:	b09d      	sub	sp, #116	; 0x74
 80061f8:	4607      	mov	r7, r0
 80061fa:	460d      	mov	r5, r1
 80061fc:	4614      	mov	r4, r2
 80061fe:	d50e      	bpl.n	800621e <_svfiprintf_r+0x32>
 8006200:	690b      	ldr	r3, [r1, #16]
 8006202:	b963      	cbnz	r3, 800621e <_svfiprintf_r+0x32>
 8006204:	2140      	movs	r1, #64	; 0x40
 8006206:	f000 fafd 	bl	8006804 <_malloc_r>
 800620a:	6028      	str	r0, [r5, #0]
 800620c:	6128      	str	r0, [r5, #16]
 800620e:	b920      	cbnz	r0, 800621a <_svfiprintf_r+0x2e>
 8006210:	230c      	movs	r3, #12
 8006212:	603b      	str	r3, [r7, #0]
 8006214:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006218:	e0d1      	b.n	80063be <_svfiprintf_r+0x1d2>
 800621a:	2340      	movs	r3, #64	; 0x40
 800621c:	616b      	str	r3, [r5, #20]
 800621e:	2300      	movs	r3, #0
 8006220:	9309      	str	r3, [sp, #36]	; 0x24
 8006222:	2320      	movs	r3, #32
 8006224:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006228:	f8cd 800c 	str.w	r8, [sp, #12]
 800622c:	2330      	movs	r3, #48	; 0x30
 800622e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80063d8 <_svfiprintf_r+0x1ec>
 8006232:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006236:	f04f 0901 	mov.w	r9, #1
 800623a:	4623      	mov	r3, r4
 800623c:	469a      	mov	sl, r3
 800623e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006242:	b10a      	cbz	r2, 8006248 <_svfiprintf_r+0x5c>
 8006244:	2a25      	cmp	r2, #37	; 0x25
 8006246:	d1f9      	bne.n	800623c <_svfiprintf_r+0x50>
 8006248:	ebba 0b04 	subs.w	fp, sl, r4
 800624c:	d00b      	beq.n	8006266 <_svfiprintf_r+0x7a>
 800624e:	465b      	mov	r3, fp
 8006250:	4622      	mov	r2, r4
 8006252:	4629      	mov	r1, r5
 8006254:	4638      	mov	r0, r7
 8006256:	f7ff ff6d 	bl	8006134 <__ssputs_r>
 800625a:	3001      	adds	r0, #1
 800625c:	f000 80aa 	beq.w	80063b4 <_svfiprintf_r+0x1c8>
 8006260:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006262:	445a      	add	r2, fp
 8006264:	9209      	str	r2, [sp, #36]	; 0x24
 8006266:	f89a 3000 	ldrb.w	r3, [sl]
 800626a:	2b00      	cmp	r3, #0
 800626c:	f000 80a2 	beq.w	80063b4 <_svfiprintf_r+0x1c8>
 8006270:	2300      	movs	r3, #0
 8006272:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006276:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800627a:	f10a 0a01 	add.w	sl, sl, #1
 800627e:	9304      	str	r3, [sp, #16]
 8006280:	9307      	str	r3, [sp, #28]
 8006282:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006286:	931a      	str	r3, [sp, #104]	; 0x68
 8006288:	4654      	mov	r4, sl
 800628a:	2205      	movs	r2, #5
 800628c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006290:	4851      	ldr	r0, [pc, #324]	; (80063d8 <_svfiprintf_r+0x1ec>)
 8006292:	f7f9 ffad 	bl	80001f0 <memchr>
 8006296:	9a04      	ldr	r2, [sp, #16]
 8006298:	b9d8      	cbnz	r0, 80062d2 <_svfiprintf_r+0xe6>
 800629a:	06d0      	lsls	r0, r2, #27
 800629c:	bf44      	itt	mi
 800629e:	2320      	movmi	r3, #32
 80062a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062a4:	0711      	lsls	r1, r2, #28
 80062a6:	bf44      	itt	mi
 80062a8:	232b      	movmi	r3, #43	; 0x2b
 80062aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062ae:	f89a 3000 	ldrb.w	r3, [sl]
 80062b2:	2b2a      	cmp	r3, #42	; 0x2a
 80062b4:	d015      	beq.n	80062e2 <_svfiprintf_r+0xf6>
 80062b6:	9a07      	ldr	r2, [sp, #28]
 80062b8:	4654      	mov	r4, sl
 80062ba:	2000      	movs	r0, #0
 80062bc:	f04f 0c0a 	mov.w	ip, #10
 80062c0:	4621      	mov	r1, r4
 80062c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062c6:	3b30      	subs	r3, #48	; 0x30
 80062c8:	2b09      	cmp	r3, #9
 80062ca:	d94e      	bls.n	800636a <_svfiprintf_r+0x17e>
 80062cc:	b1b0      	cbz	r0, 80062fc <_svfiprintf_r+0x110>
 80062ce:	9207      	str	r2, [sp, #28]
 80062d0:	e014      	b.n	80062fc <_svfiprintf_r+0x110>
 80062d2:	eba0 0308 	sub.w	r3, r0, r8
 80062d6:	fa09 f303 	lsl.w	r3, r9, r3
 80062da:	4313      	orrs	r3, r2
 80062dc:	9304      	str	r3, [sp, #16]
 80062de:	46a2      	mov	sl, r4
 80062e0:	e7d2      	b.n	8006288 <_svfiprintf_r+0x9c>
 80062e2:	9b03      	ldr	r3, [sp, #12]
 80062e4:	1d19      	adds	r1, r3, #4
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	9103      	str	r1, [sp, #12]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	bfbb      	ittet	lt
 80062ee:	425b      	neglt	r3, r3
 80062f0:	f042 0202 	orrlt.w	r2, r2, #2
 80062f4:	9307      	strge	r3, [sp, #28]
 80062f6:	9307      	strlt	r3, [sp, #28]
 80062f8:	bfb8      	it	lt
 80062fa:	9204      	strlt	r2, [sp, #16]
 80062fc:	7823      	ldrb	r3, [r4, #0]
 80062fe:	2b2e      	cmp	r3, #46	; 0x2e
 8006300:	d10c      	bne.n	800631c <_svfiprintf_r+0x130>
 8006302:	7863      	ldrb	r3, [r4, #1]
 8006304:	2b2a      	cmp	r3, #42	; 0x2a
 8006306:	d135      	bne.n	8006374 <_svfiprintf_r+0x188>
 8006308:	9b03      	ldr	r3, [sp, #12]
 800630a:	1d1a      	adds	r2, r3, #4
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	9203      	str	r2, [sp, #12]
 8006310:	2b00      	cmp	r3, #0
 8006312:	bfb8      	it	lt
 8006314:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006318:	3402      	adds	r4, #2
 800631a:	9305      	str	r3, [sp, #20]
 800631c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80063e8 <_svfiprintf_r+0x1fc>
 8006320:	7821      	ldrb	r1, [r4, #0]
 8006322:	2203      	movs	r2, #3
 8006324:	4650      	mov	r0, sl
 8006326:	f7f9 ff63 	bl	80001f0 <memchr>
 800632a:	b140      	cbz	r0, 800633e <_svfiprintf_r+0x152>
 800632c:	2340      	movs	r3, #64	; 0x40
 800632e:	eba0 000a 	sub.w	r0, r0, sl
 8006332:	fa03 f000 	lsl.w	r0, r3, r0
 8006336:	9b04      	ldr	r3, [sp, #16]
 8006338:	4303      	orrs	r3, r0
 800633a:	3401      	adds	r4, #1
 800633c:	9304      	str	r3, [sp, #16]
 800633e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006342:	4826      	ldr	r0, [pc, #152]	; (80063dc <_svfiprintf_r+0x1f0>)
 8006344:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006348:	2206      	movs	r2, #6
 800634a:	f7f9 ff51 	bl	80001f0 <memchr>
 800634e:	2800      	cmp	r0, #0
 8006350:	d038      	beq.n	80063c4 <_svfiprintf_r+0x1d8>
 8006352:	4b23      	ldr	r3, [pc, #140]	; (80063e0 <_svfiprintf_r+0x1f4>)
 8006354:	bb1b      	cbnz	r3, 800639e <_svfiprintf_r+0x1b2>
 8006356:	9b03      	ldr	r3, [sp, #12]
 8006358:	3307      	adds	r3, #7
 800635a:	f023 0307 	bic.w	r3, r3, #7
 800635e:	3308      	adds	r3, #8
 8006360:	9303      	str	r3, [sp, #12]
 8006362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006364:	4433      	add	r3, r6
 8006366:	9309      	str	r3, [sp, #36]	; 0x24
 8006368:	e767      	b.n	800623a <_svfiprintf_r+0x4e>
 800636a:	fb0c 3202 	mla	r2, ip, r2, r3
 800636e:	460c      	mov	r4, r1
 8006370:	2001      	movs	r0, #1
 8006372:	e7a5      	b.n	80062c0 <_svfiprintf_r+0xd4>
 8006374:	2300      	movs	r3, #0
 8006376:	3401      	adds	r4, #1
 8006378:	9305      	str	r3, [sp, #20]
 800637a:	4619      	mov	r1, r3
 800637c:	f04f 0c0a 	mov.w	ip, #10
 8006380:	4620      	mov	r0, r4
 8006382:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006386:	3a30      	subs	r2, #48	; 0x30
 8006388:	2a09      	cmp	r2, #9
 800638a:	d903      	bls.n	8006394 <_svfiprintf_r+0x1a8>
 800638c:	2b00      	cmp	r3, #0
 800638e:	d0c5      	beq.n	800631c <_svfiprintf_r+0x130>
 8006390:	9105      	str	r1, [sp, #20]
 8006392:	e7c3      	b.n	800631c <_svfiprintf_r+0x130>
 8006394:	fb0c 2101 	mla	r1, ip, r1, r2
 8006398:	4604      	mov	r4, r0
 800639a:	2301      	movs	r3, #1
 800639c:	e7f0      	b.n	8006380 <_svfiprintf_r+0x194>
 800639e:	ab03      	add	r3, sp, #12
 80063a0:	9300      	str	r3, [sp, #0]
 80063a2:	462a      	mov	r2, r5
 80063a4:	4b0f      	ldr	r3, [pc, #60]	; (80063e4 <_svfiprintf_r+0x1f8>)
 80063a6:	a904      	add	r1, sp, #16
 80063a8:	4638      	mov	r0, r7
 80063aa:	f3af 8000 	nop.w
 80063ae:	1c42      	adds	r2, r0, #1
 80063b0:	4606      	mov	r6, r0
 80063b2:	d1d6      	bne.n	8006362 <_svfiprintf_r+0x176>
 80063b4:	89ab      	ldrh	r3, [r5, #12]
 80063b6:	065b      	lsls	r3, r3, #25
 80063b8:	f53f af2c 	bmi.w	8006214 <_svfiprintf_r+0x28>
 80063bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80063be:	b01d      	add	sp, #116	; 0x74
 80063c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063c4:	ab03      	add	r3, sp, #12
 80063c6:	9300      	str	r3, [sp, #0]
 80063c8:	462a      	mov	r2, r5
 80063ca:	4b06      	ldr	r3, [pc, #24]	; (80063e4 <_svfiprintf_r+0x1f8>)
 80063cc:	a904      	add	r1, sp, #16
 80063ce:	4638      	mov	r0, r7
 80063d0:	f000 f87a 	bl	80064c8 <_printf_i>
 80063d4:	e7eb      	b.n	80063ae <_svfiprintf_r+0x1c2>
 80063d6:	bf00      	nop
 80063d8:	08008960 	.word	0x08008960
 80063dc:	0800896a 	.word	0x0800896a
 80063e0:	00000000 	.word	0x00000000
 80063e4:	08006135 	.word	0x08006135
 80063e8:	08008966 	.word	0x08008966

080063ec <_printf_common>:
 80063ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063f0:	4616      	mov	r6, r2
 80063f2:	4699      	mov	r9, r3
 80063f4:	688a      	ldr	r2, [r1, #8]
 80063f6:	690b      	ldr	r3, [r1, #16]
 80063f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80063fc:	4293      	cmp	r3, r2
 80063fe:	bfb8      	it	lt
 8006400:	4613      	movlt	r3, r2
 8006402:	6033      	str	r3, [r6, #0]
 8006404:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006408:	4607      	mov	r7, r0
 800640a:	460c      	mov	r4, r1
 800640c:	b10a      	cbz	r2, 8006412 <_printf_common+0x26>
 800640e:	3301      	adds	r3, #1
 8006410:	6033      	str	r3, [r6, #0]
 8006412:	6823      	ldr	r3, [r4, #0]
 8006414:	0699      	lsls	r1, r3, #26
 8006416:	bf42      	ittt	mi
 8006418:	6833      	ldrmi	r3, [r6, #0]
 800641a:	3302      	addmi	r3, #2
 800641c:	6033      	strmi	r3, [r6, #0]
 800641e:	6825      	ldr	r5, [r4, #0]
 8006420:	f015 0506 	ands.w	r5, r5, #6
 8006424:	d106      	bne.n	8006434 <_printf_common+0x48>
 8006426:	f104 0a19 	add.w	sl, r4, #25
 800642a:	68e3      	ldr	r3, [r4, #12]
 800642c:	6832      	ldr	r2, [r6, #0]
 800642e:	1a9b      	subs	r3, r3, r2
 8006430:	42ab      	cmp	r3, r5
 8006432:	dc26      	bgt.n	8006482 <_printf_common+0x96>
 8006434:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006438:	1e13      	subs	r3, r2, #0
 800643a:	6822      	ldr	r2, [r4, #0]
 800643c:	bf18      	it	ne
 800643e:	2301      	movne	r3, #1
 8006440:	0692      	lsls	r2, r2, #26
 8006442:	d42b      	bmi.n	800649c <_printf_common+0xb0>
 8006444:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006448:	4649      	mov	r1, r9
 800644a:	4638      	mov	r0, r7
 800644c:	47c0      	blx	r8
 800644e:	3001      	adds	r0, #1
 8006450:	d01e      	beq.n	8006490 <_printf_common+0xa4>
 8006452:	6823      	ldr	r3, [r4, #0]
 8006454:	68e5      	ldr	r5, [r4, #12]
 8006456:	6832      	ldr	r2, [r6, #0]
 8006458:	f003 0306 	and.w	r3, r3, #6
 800645c:	2b04      	cmp	r3, #4
 800645e:	bf08      	it	eq
 8006460:	1aad      	subeq	r5, r5, r2
 8006462:	68a3      	ldr	r3, [r4, #8]
 8006464:	6922      	ldr	r2, [r4, #16]
 8006466:	bf0c      	ite	eq
 8006468:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800646c:	2500      	movne	r5, #0
 800646e:	4293      	cmp	r3, r2
 8006470:	bfc4      	itt	gt
 8006472:	1a9b      	subgt	r3, r3, r2
 8006474:	18ed      	addgt	r5, r5, r3
 8006476:	2600      	movs	r6, #0
 8006478:	341a      	adds	r4, #26
 800647a:	42b5      	cmp	r5, r6
 800647c:	d11a      	bne.n	80064b4 <_printf_common+0xc8>
 800647e:	2000      	movs	r0, #0
 8006480:	e008      	b.n	8006494 <_printf_common+0xa8>
 8006482:	2301      	movs	r3, #1
 8006484:	4652      	mov	r2, sl
 8006486:	4649      	mov	r1, r9
 8006488:	4638      	mov	r0, r7
 800648a:	47c0      	blx	r8
 800648c:	3001      	adds	r0, #1
 800648e:	d103      	bne.n	8006498 <_printf_common+0xac>
 8006490:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006498:	3501      	adds	r5, #1
 800649a:	e7c6      	b.n	800642a <_printf_common+0x3e>
 800649c:	18e1      	adds	r1, r4, r3
 800649e:	1c5a      	adds	r2, r3, #1
 80064a0:	2030      	movs	r0, #48	; 0x30
 80064a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80064a6:	4422      	add	r2, r4
 80064a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80064ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80064b0:	3302      	adds	r3, #2
 80064b2:	e7c7      	b.n	8006444 <_printf_common+0x58>
 80064b4:	2301      	movs	r3, #1
 80064b6:	4622      	mov	r2, r4
 80064b8:	4649      	mov	r1, r9
 80064ba:	4638      	mov	r0, r7
 80064bc:	47c0      	blx	r8
 80064be:	3001      	adds	r0, #1
 80064c0:	d0e6      	beq.n	8006490 <_printf_common+0xa4>
 80064c2:	3601      	adds	r6, #1
 80064c4:	e7d9      	b.n	800647a <_printf_common+0x8e>
	...

080064c8 <_printf_i>:
 80064c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064cc:	460c      	mov	r4, r1
 80064ce:	4691      	mov	r9, r2
 80064d0:	7e27      	ldrb	r7, [r4, #24]
 80064d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80064d4:	2f78      	cmp	r7, #120	; 0x78
 80064d6:	4680      	mov	r8, r0
 80064d8:	469a      	mov	sl, r3
 80064da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80064de:	d807      	bhi.n	80064f0 <_printf_i+0x28>
 80064e0:	2f62      	cmp	r7, #98	; 0x62
 80064e2:	d80a      	bhi.n	80064fa <_printf_i+0x32>
 80064e4:	2f00      	cmp	r7, #0
 80064e6:	f000 80d8 	beq.w	800669a <_printf_i+0x1d2>
 80064ea:	2f58      	cmp	r7, #88	; 0x58
 80064ec:	f000 80a3 	beq.w	8006636 <_printf_i+0x16e>
 80064f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80064f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80064f8:	e03a      	b.n	8006570 <_printf_i+0xa8>
 80064fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80064fe:	2b15      	cmp	r3, #21
 8006500:	d8f6      	bhi.n	80064f0 <_printf_i+0x28>
 8006502:	a001      	add	r0, pc, #4	; (adr r0, 8006508 <_printf_i+0x40>)
 8006504:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006508:	08006561 	.word	0x08006561
 800650c:	08006575 	.word	0x08006575
 8006510:	080064f1 	.word	0x080064f1
 8006514:	080064f1 	.word	0x080064f1
 8006518:	080064f1 	.word	0x080064f1
 800651c:	080064f1 	.word	0x080064f1
 8006520:	08006575 	.word	0x08006575
 8006524:	080064f1 	.word	0x080064f1
 8006528:	080064f1 	.word	0x080064f1
 800652c:	080064f1 	.word	0x080064f1
 8006530:	080064f1 	.word	0x080064f1
 8006534:	08006681 	.word	0x08006681
 8006538:	080065a5 	.word	0x080065a5
 800653c:	08006663 	.word	0x08006663
 8006540:	080064f1 	.word	0x080064f1
 8006544:	080064f1 	.word	0x080064f1
 8006548:	080066a3 	.word	0x080066a3
 800654c:	080064f1 	.word	0x080064f1
 8006550:	080065a5 	.word	0x080065a5
 8006554:	080064f1 	.word	0x080064f1
 8006558:	080064f1 	.word	0x080064f1
 800655c:	0800666b 	.word	0x0800666b
 8006560:	680b      	ldr	r3, [r1, #0]
 8006562:	1d1a      	adds	r2, r3, #4
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	600a      	str	r2, [r1, #0]
 8006568:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800656c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006570:	2301      	movs	r3, #1
 8006572:	e0a3      	b.n	80066bc <_printf_i+0x1f4>
 8006574:	6825      	ldr	r5, [r4, #0]
 8006576:	6808      	ldr	r0, [r1, #0]
 8006578:	062e      	lsls	r6, r5, #24
 800657a:	f100 0304 	add.w	r3, r0, #4
 800657e:	d50a      	bpl.n	8006596 <_printf_i+0xce>
 8006580:	6805      	ldr	r5, [r0, #0]
 8006582:	600b      	str	r3, [r1, #0]
 8006584:	2d00      	cmp	r5, #0
 8006586:	da03      	bge.n	8006590 <_printf_i+0xc8>
 8006588:	232d      	movs	r3, #45	; 0x2d
 800658a:	426d      	negs	r5, r5
 800658c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006590:	485e      	ldr	r0, [pc, #376]	; (800670c <_printf_i+0x244>)
 8006592:	230a      	movs	r3, #10
 8006594:	e019      	b.n	80065ca <_printf_i+0x102>
 8006596:	f015 0f40 	tst.w	r5, #64	; 0x40
 800659a:	6805      	ldr	r5, [r0, #0]
 800659c:	600b      	str	r3, [r1, #0]
 800659e:	bf18      	it	ne
 80065a0:	b22d      	sxthne	r5, r5
 80065a2:	e7ef      	b.n	8006584 <_printf_i+0xbc>
 80065a4:	680b      	ldr	r3, [r1, #0]
 80065a6:	6825      	ldr	r5, [r4, #0]
 80065a8:	1d18      	adds	r0, r3, #4
 80065aa:	6008      	str	r0, [r1, #0]
 80065ac:	0628      	lsls	r0, r5, #24
 80065ae:	d501      	bpl.n	80065b4 <_printf_i+0xec>
 80065b0:	681d      	ldr	r5, [r3, #0]
 80065b2:	e002      	b.n	80065ba <_printf_i+0xf2>
 80065b4:	0669      	lsls	r1, r5, #25
 80065b6:	d5fb      	bpl.n	80065b0 <_printf_i+0xe8>
 80065b8:	881d      	ldrh	r5, [r3, #0]
 80065ba:	4854      	ldr	r0, [pc, #336]	; (800670c <_printf_i+0x244>)
 80065bc:	2f6f      	cmp	r7, #111	; 0x6f
 80065be:	bf0c      	ite	eq
 80065c0:	2308      	moveq	r3, #8
 80065c2:	230a      	movne	r3, #10
 80065c4:	2100      	movs	r1, #0
 80065c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80065ca:	6866      	ldr	r6, [r4, #4]
 80065cc:	60a6      	str	r6, [r4, #8]
 80065ce:	2e00      	cmp	r6, #0
 80065d0:	bfa2      	ittt	ge
 80065d2:	6821      	ldrge	r1, [r4, #0]
 80065d4:	f021 0104 	bicge.w	r1, r1, #4
 80065d8:	6021      	strge	r1, [r4, #0]
 80065da:	b90d      	cbnz	r5, 80065e0 <_printf_i+0x118>
 80065dc:	2e00      	cmp	r6, #0
 80065de:	d04d      	beq.n	800667c <_printf_i+0x1b4>
 80065e0:	4616      	mov	r6, r2
 80065e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80065e6:	fb03 5711 	mls	r7, r3, r1, r5
 80065ea:	5dc7      	ldrb	r7, [r0, r7]
 80065ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80065f0:	462f      	mov	r7, r5
 80065f2:	42bb      	cmp	r3, r7
 80065f4:	460d      	mov	r5, r1
 80065f6:	d9f4      	bls.n	80065e2 <_printf_i+0x11a>
 80065f8:	2b08      	cmp	r3, #8
 80065fa:	d10b      	bne.n	8006614 <_printf_i+0x14c>
 80065fc:	6823      	ldr	r3, [r4, #0]
 80065fe:	07df      	lsls	r7, r3, #31
 8006600:	d508      	bpl.n	8006614 <_printf_i+0x14c>
 8006602:	6923      	ldr	r3, [r4, #16]
 8006604:	6861      	ldr	r1, [r4, #4]
 8006606:	4299      	cmp	r1, r3
 8006608:	bfde      	ittt	le
 800660a:	2330      	movle	r3, #48	; 0x30
 800660c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006610:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8006614:	1b92      	subs	r2, r2, r6
 8006616:	6122      	str	r2, [r4, #16]
 8006618:	f8cd a000 	str.w	sl, [sp]
 800661c:	464b      	mov	r3, r9
 800661e:	aa03      	add	r2, sp, #12
 8006620:	4621      	mov	r1, r4
 8006622:	4640      	mov	r0, r8
 8006624:	f7ff fee2 	bl	80063ec <_printf_common>
 8006628:	3001      	adds	r0, #1
 800662a:	d14c      	bne.n	80066c6 <_printf_i+0x1fe>
 800662c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006630:	b004      	add	sp, #16
 8006632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006636:	4835      	ldr	r0, [pc, #212]	; (800670c <_printf_i+0x244>)
 8006638:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800663c:	6823      	ldr	r3, [r4, #0]
 800663e:	680e      	ldr	r6, [r1, #0]
 8006640:	061f      	lsls	r7, r3, #24
 8006642:	f856 5b04 	ldr.w	r5, [r6], #4
 8006646:	600e      	str	r6, [r1, #0]
 8006648:	d514      	bpl.n	8006674 <_printf_i+0x1ac>
 800664a:	07d9      	lsls	r1, r3, #31
 800664c:	bf44      	itt	mi
 800664e:	f043 0320 	orrmi.w	r3, r3, #32
 8006652:	6023      	strmi	r3, [r4, #0]
 8006654:	b91d      	cbnz	r5, 800665e <_printf_i+0x196>
 8006656:	6823      	ldr	r3, [r4, #0]
 8006658:	f023 0320 	bic.w	r3, r3, #32
 800665c:	6023      	str	r3, [r4, #0]
 800665e:	2310      	movs	r3, #16
 8006660:	e7b0      	b.n	80065c4 <_printf_i+0xfc>
 8006662:	6823      	ldr	r3, [r4, #0]
 8006664:	f043 0320 	orr.w	r3, r3, #32
 8006668:	6023      	str	r3, [r4, #0]
 800666a:	2378      	movs	r3, #120	; 0x78
 800666c:	4828      	ldr	r0, [pc, #160]	; (8006710 <_printf_i+0x248>)
 800666e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006672:	e7e3      	b.n	800663c <_printf_i+0x174>
 8006674:	065e      	lsls	r6, r3, #25
 8006676:	bf48      	it	mi
 8006678:	b2ad      	uxthmi	r5, r5
 800667a:	e7e6      	b.n	800664a <_printf_i+0x182>
 800667c:	4616      	mov	r6, r2
 800667e:	e7bb      	b.n	80065f8 <_printf_i+0x130>
 8006680:	680b      	ldr	r3, [r1, #0]
 8006682:	6826      	ldr	r6, [r4, #0]
 8006684:	6960      	ldr	r0, [r4, #20]
 8006686:	1d1d      	adds	r5, r3, #4
 8006688:	600d      	str	r5, [r1, #0]
 800668a:	0635      	lsls	r5, r6, #24
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	d501      	bpl.n	8006694 <_printf_i+0x1cc>
 8006690:	6018      	str	r0, [r3, #0]
 8006692:	e002      	b.n	800669a <_printf_i+0x1d2>
 8006694:	0671      	lsls	r1, r6, #25
 8006696:	d5fb      	bpl.n	8006690 <_printf_i+0x1c8>
 8006698:	8018      	strh	r0, [r3, #0]
 800669a:	2300      	movs	r3, #0
 800669c:	6123      	str	r3, [r4, #16]
 800669e:	4616      	mov	r6, r2
 80066a0:	e7ba      	b.n	8006618 <_printf_i+0x150>
 80066a2:	680b      	ldr	r3, [r1, #0]
 80066a4:	1d1a      	adds	r2, r3, #4
 80066a6:	600a      	str	r2, [r1, #0]
 80066a8:	681e      	ldr	r6, [r3, #0]
 80066aa:	6862      	ldr	r2, [r4, #4]
 80066ac:	2100      	movs	r1, #0
 80066ae:	4630      	mov	r0, r6
 80066b0:	f7f9 fd9e 	bl	80001f0 <memchr>
 80066b4:	b108      	cbz	r0, 80066ba <_printf_i+0x1f2>
 80066b6:	1b80      	subs	r0, r0, r6
 80066b8:	6060      	str	r0, [r4, #4]
 80066ba:	6863      	ldr	r3, [r4, #4]
 80066bc:	6123      	str	r3, [r4, #16]
 80066be:	2300      	movs	r3, #0
 80066c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066c4:	e7a8      	b.n	8006618 <_printf_i+0x150>
 80066c6:	6923      	ldr	r3, [r4, #16]
 80066c8:	4632      	mov	r2, r6
 80066ca:	4649      	mov	r1, r9
 80066cc:	4640      	mov	r0, r8
 80066ce:	47d0      	blx	sl
 80066d0:	3001      	adds	r0, #1
 80066d2:	d0ab      	beq.n	800662c <_printf_i+0x164>
 80066d4:	6823      	ldr	r3, [r4, #0]
 80066d6:	079b      	lsls	r3, r3, #30
 80066d8:	d413      	bmi.n	8006702 <_printf_i+0x23a>
 80066da:	68e0      	ldr	r0, [r4, #12]
 80066dc:	9b03      	ldr	r3, [sp, #12]
 80066de:	4298      	cmp	r0, r3
 80066e0:	bfb8      	it	lt
 80066e2:	4618      	movlt	r0, r3
 80066e4:	e7a4      	b.n	8006630 <_printf_i+0x168>
 80066e6:	2301      	movs	r3, #1
 80066e8:	4632      	mov	r2, r6
 80066ea:	4649      	mov	r1, r9
 80066ec:	4640      	mov	r0, r8
 80066ee:	47d0      	blx	sl
 80066f0:	3001      	adds	r0, #1
 80066f2:	d09b      	beq.n	800662c <_printf_i+0x164>
 80066f4:	3501      	adds	r5, #1
 80066f6:	68e3      	ldr	r3, [r4, #12]
 80066f8:	9903      	ldr	r1, [sp, #12]
 80066fa:	1a5b      	subs	r3, r3, r1
 80066fc:	42ab      	cmp	r3, r5
 80066fe:	dcf2      	bgt.n	80066e6 <_printf_i+0x21e>
 8006700:	e7eb      	b.n	80066da <_printf_i+0x212>
 8006702:	2500      	movs	r5, #0
 8006704:	f104 0619 	add.w	r6, r4, #25
 8006708:	e7f5      	b.n	80066f6 <_printf_i+0x22e>
 800670a:	bf00      	nop
 800670c:	08008971 	.word	0x08008971
 8006710:	08008982 	.word	0x08008982

08006714 <memcpy>:
 8006714:	440a      	add	r2, r1
 8006716:	4291      	cmp	r1, r2
 8006718:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800671c:	d100      	bne.n	8006720 <memcpy+0xc>
 800671e:	4770      	bx	lr
 8006720:	b510      	push	{r4, lr}
 8006722:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006726:	f803 4f01 	strb.w	r4, [r3, #1]!
 800672a:	4291      	cmp	r1, r2
 800672c:	d1f9      	bne.n	8006722 <memcpy+0xe>
 800672e:	bd10      	pop	{r4, pc}

08006730 <memmove>:
 8006730:	4288      	cmp	r0, r1
 8006732:	b510      	push	{r4, lr}
 8006734:	eb01 0402 	add.w	r4, r1, r2
 8006738:	d902      	bls.n	8006740 <memmove+0x10>
 800673a:	4284      	cmp	r4, r0
 800673c:	4623      	mov	r3, r4
 800673e:	d807      	bhi.n	8006750 <memmove+0x20>
 8006740:	1e43      	subs	r3, r0, #1
 8006742:	42a1      	cmp	r1, r4
 8006744:	d008      	beq.n	8006758 <memmove+0x28>
 8006746:	f811 2b01 	ldrb.w	r2, [r1], #1
 800674a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800674e:	e7f8      	b.n	8006742 <memmove+0x12>
 8006750:	4402      	add	r2, r0
 8006752:	4601      	mov	r1, r0
 8006754:	428a      	cmp	r2, r1
 8006756:	d100      	bne.n	800675a <memmove+0x2a>
 8006758:	bd10      	pop	{r4, pc}
 800675a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800675e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006762:	e7f7      	b.n	8006754 <memmove+0x24>

08006764 <_free_r>:
 8006764:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006766:	2900      	cmp	r1, #0
 8006768:	d048      	beq.n	80067fc <_free_r+0x98>
 800676a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800676e:	9001      	str	r0, [sp, #4]
 8006770:	2b00      	cmp	r3, #0
 8006772:	f1a1 0404 	sub.w	r4, r1, #4
 8006776:	bfb8      	it	lt
 8006778:	18e4      	addlt	r4, r4, r3
 800677a:	f000 f8d3 	bl	8006924 <__malloc_lock>
 800677e:	4a20      	ldr	r2, [pc, #128]	; (8006800 <_free_r+0x9c>)
 8006780:	9801      	ldr	r0, [sp, #4]
 8006782:	6813      	ldr	r3, [r2, #0]
 8006784:	4615      	mov	r5, r2
 8006786:	b933      	cbnz	r3, 8006796 <_free_r+0x32>
 8006788:	6063      	str	r3, [r4, #4]
 800678a:	6014      	str	r4, [r2, #0]
 800678c:	b003      	add	sp, #12
 800678e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006792:	f000 b8cd 	b.w	8006930 <__malloc_unlock>
 8006796:	42a3      	cmp	r3, r4
 8006798:	d90b      	bls.n	80067b2 <_free_r+0x4e>
 800679a:	6821      	ldr	r1, [r4, #0]
 800679c:	1862      	adds	r2, r4, r1
 800679e:	4293      	cmp	r3, r2
 80067a0:	bf04      	itt	eq
 80067a2:	681a      	ldreq	r2, [r3, #0]
 80067a4:	685b      	ldreq	r3, [r3, #4]
 80067a6:	6063      	str	r3, [r4, #4]
 80067a8:	bf04      	itt	eq
 80067aa:	1852      	addeq	r2, r2, r1
 80067ac:	6022      	streq	r2, [r4, #0]
 80067ae:	602c      	str	r4, [r5, #0]
 80067b0:	e7ec      	b.n	800678c <_free_r+0x28>
 80067b2:	461a      	mov	r2, r3
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	b10b      	cbz	r3, 80067bc <_free_r+0x58>
 80067b8:	42a3      	cmp	r3, r4
 80067ba:	d9fa      	bls.n	80067b2 <_free_r+0x4e>
 80067bc:	6811      	ldr	r1, [r2, #0]
 80067be:	1855      	adds	r5, r2, r1
 80067c0:	42a5      	cmp	r5, r4
 80067c2:	d10b      	bne.n	80067dc <_free_r+0x78>
 80067c4:	6824      	ldr	r4, [r4, #0]
 80067c6:	4421      	add	r1, r4
 80067c8:	1854      	adds	r4, r2, r1
 80067ca:	42a3      	cmp	r3, r4
 80067cc:	6011      	str	r1, [r2, #0]
 80067ce:	d1dd      	bne.n	800678c <_free_r+0x28>
 80067d0:	681c      	ldr	r4, [r3, #0]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	6053      	str	r3, [r2, #4]
 80067d6:	4421      	add	r1, r4
 80067d8:	6011      	str	r1, [r2, #0]
 80067da:	e7d7      	b.n	800678c <_free_r+0x28>
 80067dc:	d902      	bls.n	80067e4 <_free_r+0x80>
 80067de:	230c      	movs	r3, #12
 80067e0:	6003      	str	r3, [r0, #0]
 80067e2:	e7d3      	b.n	800678c <_free_r+0x28>
 80067e4:	6825      	ldr	r5, [r4, #0]
 80067e6:	1961      	adds	r1, r4, r5
 80067e8:	428b      	cmp	r3, r1
 80067ea:	bf04      	itt	eq
 80067ec:	6819      	ldreq	r1, [r3, #0]
 80067ee:	685b      	ldreq	r3, [r3, #4]
 80067f0:	6063      	str	r3, [r4, #4]
 80067f2:	bf04      	itt	eq
 80067f4:	1949      	addeq	r1, r1, r5
 80067f6:	6021      	streq	r1, [r4, #0]
 80067f8:	6054      	str	r4, [r2, #4]
 80067fa:	e7c7      	b.n	800678c <_free_r+0x28>
 80067fc:	b003      	add	sp, #12
 80067fe:	bd30      	pop	{r4, r5, pc}
 8006800:	200000b4 	.word	0x200000b4

08006804 <_malloc_r>:
 8006804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006806:	1ccd      	adds	r5, r1, #3
 8006808:	f025 0503 	bic.w	r5, r5, #3
 800680c:	3508      	adds	r5, #8
 800680e:	2d0c      	cmp	r5, #12
 8006810:	bf38      	it	cc
 8006812:	250c      	movcc	r5, #12
 8006814:	2d00      	cmp	r5, #0
 8006816:	4606      	mov	r6, r0
 8006818:	db01      	blt.n	800681e <_malloc_r+0x1a>
 800681a:	42a9      	cmp	r1, r5
 800681c:	d903      	bls.n	8006826 <_malloc_r+0x22>
 800681e:	230c      	movs	r3, #12
 8006820:	6033      	str	r3, [r6, #0]
 8006822:	2000      	movs	r0, #0
 8006824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006826:	f000 f87d 	bl	8006924 <__malloc_lock>
 800682a:	4921      	ldr	r1, [pc, #132]	; (80068b0 <_malloc_r+0xac>)
 800682c:	680a      	ldr	r2, [r1, #0]
 800682e:	4614      	mov	r4, r2
 8006830:	b99c      	cbnz	r4, 800685a <_malloc_r+0x56>
 8006832:	4f20      	ldr	r7, [pc, #128]	; (80068b4 <_malloc_r+0xb0>)
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	b923      	cbnz	r3, 8006842 <_malloc_r+0x3e>
 8006838:	4621      	mov	r1, r4
 800683a:	4630      	mov	r0, r6
 800683c:	f000 f862 	bl	8006904 <_sbrk_r>
 8006840:	6038      	str	r0, [r7, #0]
 8006842:	4629      	mov	r1, r5
 8006844:	4630      	mov	r0, r6
 8006846:	f000 f85d 	bl	8006904 <_sbrk_r>
 800684a:	1c43      	adds	r3, r0, #1
 800684c:	d123      	bne.n	8006896 <_malloc_r+0x92>
 800684e:	230c      	movs	r3, #12
 8006850:	6033      	str	r3, [r6, #0]
 8006852:	4630      	mov	r0, r6
 8006854:	f000 f86c 	bl	8006930 <__malloc_unlock>
 8006858:	e7e3      	b.n	8006822 <_malloc_r+0x1e>
 800685a:	6823      	ldr	r3, [r4, #0]
 800685c:	1b5b      	subs	r3, r3, r5
 800685e:	d417      	bmi.n	8006890 <_malloc_r+0x8c>
 8006860:	2b0b      	cmp	r3, #11
 8006862:	d903      	bls.n	800686c <_malloc_r+0x68>
 8006864:	6023      	str	r3, [r4, #0]
 8006866:	441c      	add	r4, r3
 8006868:	6025      	str	r5, [r4, #0]
 800686a:	e004      	b.n	8006876 <_malloc_r+0x72>
 800686c:	6863      	ldr	r3, [r4, #4]
 800686e:	42a2      	cmp	r2, r4
 8006870:	bf0c      	ite	eq
 8006872:	600b      	streq	r3, [r1, #0]
 8006874:	6053      	strne	r3, [r2, #4]
 8006876:	4630      	mov	r0, r6
 8006878:	f000 f85a 	bl	8006930 <__malloc_unlock>
 800687c:	f104 000b 	add.w	r0, r4, #11
 8006880:	1d23      	adds	r3, r4, #4
 8006882:	f020 0007 	bic.w	r0, r0, #7
 8006886:	1ac2      	subs	r2, r0, r3
 8006888:	d0cc      	beq.n	8006824 <_malloc_r+0x20>
 800688a:	1a1b      	subs	r3, r3, r0
 800688c:	50a3      	str	r3, [r4, r2]
 800688e:	e7c9      	b.n	8006824 <_malloc_r+0x20>
 8006890:	4622      	mov	r2, r4
 8006892:	6864      	ldr	r4, [r4, #4]
 8006894:	e7cc      	b.n	8006830 <_malloc_r+0x2c>
 8006896:	1cc4      	adds	r4, r0, #3
 8006898:	f024 0403 	bic.w	r4, r4, #3
 800689c:	42a0      	cmp	r0, r4
 800689e:	d0e3      	beq.n	8006868 <_malloc_r+0x64>
 80068a0:	1a21      	subs	r1, r4, r0
 80068a2:	4630      	mov	r0, r6
 80068a4:	f000 f82e 	bl	8006904 <_sbrk_r>
 80068a8:	3001      	adds	r0, #1
 80068aa:	d1dd      	bne.n	8006868 <_malloc_r+0x64>
 80068ac:	e7cf      	b.n	800684e <_malloc_r+0x4a>
 80068ae:	bf00      	nop
 80068b0:	200000b4 	.word	0x200000b4
 80068b4:	200000b8 	.word	0x200000b8

080068b8 <_realloc_r>:
 80068b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ba:	4607      	mov	r7, r0
 80068bc:	4614      	mov	r4, r2
 80068be:	460e      	mov	r6, r1
 80068c0:	b921      	cbnz	r1, 80068cc <_realloc_r+0x14>
 80068c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80068c6:	4611      	mov	r1, r2
 80068c8:	f7ff bf9c 	b.w	8006804 <_malloc_r>
 80068cc:	b922      	cbnz	r2, 80068d8 <_realloc_r+0x20>
 80068ce:	f7ff ff49 	bl	8006764 <_free_r>
 80068d2:	4625      	mov	r5, r4
 80068d4:	4628      	mov	r0, r5
 80068d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068d8:	f000 f830 	bl	800693c <_malloc_usable_size_r>
 80068dc:	42a0      	cmp	r0, r4
 80068de:	d20f      	bcs.n	8006900 <_realloc_r+0x48>
 80068e0:	4621      	mov	r1, r4
 80068e2:	4638      	mov	r0, r7
 80068e4:	f7ff ff8e 	bl	8006804 <_malloc_r>
 80068e8:	4605      	mov	r5, r0
 80068ea:	2800      	cmp	r0, #0
 80068ec:	d0f2      	beq.n	80068d4 <_realloc_r+0x1c>
 80068ee:	4631      	mov	r1, r6
 80068f0:	4622      	mov	r2, r4
 80068f2:	f7ff ff0f 	bl	8006714 <memcpy>
 80068f6:	4631      	mov	r1, r6
 80068f8:	4638      	mov	r0, r7
 80068fa:	f7ff ff33 	bl	8006764 <_free_r>
 80068fe:	e7e9      	b.n	80068d4 <_realloc_r+0x1c>
 8006900:	4635      	mov	r5, r6
 8006902:	e7e7      	b.n	80068d4 <_realloc_r+0x1c>

08006904 <_sbrk_r>:
 8006904:	b538      	push	{r3, r4, r5, lr}
 8006906:	4d06      	ldr	r5, [pc, #24]	; (8006920 <_sbrk_r+0x1c>)
 8006908:	2300      	movs	r3, #0
 800690a:	4604      	mov	r4, r0
 800690c:	4608      	mov	r0, r1
 800690e:	602b      	str	r3, [r5, #0]
 8006910:	f7fc f8d8 	bl	8002ac4 <_sbrk>
 8006914:	1c43      	adds	r3, r0, #1
 8006916:	d102      	bne.n	800691e <_sbrk_r+0x1a>
 8006918:	682b      	ldr	r3, [r5, #0]
 800691a:	b103      	cbz	r3, 800691e <_sbrk_r+0x1a>
 800691c:	6023      	str	r3, [r4, #0]
 800691e:	bd38      	pop	{r3, r4, r5, pc}
 8006920:	20000314 	.word	0x20000314

08006924 <__malloc_lock>:
 8006924:	4801      	ldr	r0, [pc, #4]	; (800692c <__malloc_lock+0x8>)
 8006926:	f000 b811 	b.w	800694c <__retarget_lock_acquire_recursive>
 800692a:	bf00      	nop
 800692c:	2000031c 	.word	0x2000031c

08006930 <__malloc_unlock>:
 8006930:	4801      	ldr	r0, [pc, #4]	; (8006938 <__malloc_unlock+0x8>)
 8006932:	f000 b80c 	b.w	800694e <__retarget_lock_release_recursive>
 8006936:	bf00      	nop
 8006938:	2000031c 	.word	0x2000031c

0800693c <_malloc_usable_size_r>:
 800693c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006940:	1f18      	subs	r0, r3, #4
 8006942:	2b00      	cmp	r3, #0
 8006944:	bfbc      	itt	lt
 8006946:	580b      	ldrlt	r3, [r1, r0]
 8006948:	18c0      	addlt	r0, r0, r3
 800694a:	4770      	bx	lr

0800694c <__retarget_lock_acquire_recursive>:
 800694c:	4770      	bx	lr

0800694e <__retarget_lock_release_recursive>:
 800694e:	4770      	bx	lr

08006950 <cos>:
 8006950:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006952:	ec53 2b10 	vmov	r2, r3, d0
 8006956:	4824      	ldr	r0, [pc, #144]	; (80069e8 <cos+0x98>)
 8006958:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800695c:	4281      	cmp	r1, r0
 800695e:	dc06      	bgt.n	800696e <cos+0x1e>
 8006960:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 80069e0 <cos+0x90>
 8006964:	f001 f960 	bl	8007c28 <__kernel_cos>
 8006968:	ec51 0b10 	vmov	r0, r1, d0
 800696c:	e007      	b.n	800697e <cos+0x2e>
 800696e:	481f      	ldr	r0, [pc, #124]	; (80069ec <cos+0x9c>)
 8006970:	4281      	cmp	r1, r0
 8006972:	dd09      	ble.n	8006988 <cos+0x38>
 8006974:	ee10 0a10 	vmov	r0, s0
 8006978:	4619      	mov	r1, r3
 800697a:	f7f9 fc8d 	bl	8000298 <__aeabi_dsub>
 800697e:	ec41 0b10 	vmov	d0, r0, r1
 8006982:	b005      	add	sp, #20
 8006984:	f85d fb04 	ldr.w	pc, [sp], #4
 8006988:	4668      	mov	r0, sp
 800698a:	f000 fe8d 	bl	80076a8 <__ieee754_rem_pio2>
 800698e:	f000 0003 	and.w	r0, r0, #3
 8006992:	2801      	cmp	r0, #1
 8006994:	d007      	beq.n	80069a6 <cos+0x56>
 8006996:	2802      	cmp	r0, #2
 8006998:	d012      	beq.n	80069c0 <cos+0x70>
 800699a:	b9c0      	cbnz	r0, 80069ce <cos+0x7e>
 800699c:	ed9d 1b02 	vldr	d1, [sp, #8]
 80069a0:	ed9d 0b00 	vldr	d0, [sp]
 80069a4:	e7de      	b.n	8006964 <cos+0x14>
 80069a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80069aa:	ed9d 0b00 	vldr	d0, [sp]
 80069ae:	f001 fd43 	bl	8008438 <__kernel_sin>
 80069b2:	ec53 2b10 	vmov	r2, r3, d0
 80069b6:	ee10 0a10 	vmov	r0, s0
 80069ba:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80069be:	e7de      	b.n	800697e <cos+0x2e>
 80069c0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80069c4:	ed9d 0b00 	vldr	d0, [sp]
 80069c8:	f001 f92e 	bl	8007c28 <__kernel_cos>
 80069cc:	e7f1      	b.n	80069b2 <cos+0x62>
 80069ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 80069d2:	ed9d 0b00 	vldr	d0, [sp]
 80069d6:	2001      	movs	r0, #1
 80069d8:	f001 fd2e 	bl	8008438 <__kernel_sin>
 80069dc:	e7c4      	b.n	8006968 <cos+0x18>
 80069de:	bf00      	nop
	...
 80069e8:	3fe921fb 	.word	0x3fe921fb
 80069ec:	7fefffff 	.word	0x7fefffff

080069f0 <sin>:
 80069f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80069f2:	ec53 2b10 	vmov	r2, r3, d0
 80069f6:	4826      	ldr	r0, [pc, #152]	; (8006a90 <sin+0xa0>)
 80069f8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80069fc:	4281      	cmp	r1, r0
 80069fe:	dc07      	bgt.n	8006a10 <sin+0x20>
 8006a00:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8006a88 <sin+0x98>
 8006a04:	2000      	movs	r0, #0
 8006a06:	f001 fd17 	bl	8008438 <__kernel_sin>
 8006a0a:	ec51 0b10 	vmov	r0, r1, d0
 8006a0e:	e007      	b.n	8006a20 <sin+0x30>
 8006a10:	4820      	ldr	r0, [pc, #128]	; (8006a94 <sin+0xa4>)
 8006a12:	4281      	cmp	r1, r0
 8006a14:	dd09      	ble.n	8006a2a <sin+0x3a>
 8006a16:	ee10 0a10 	vmov	r0, s0
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	f7f9 fc3c 	bl	8000298 <__aeabi_dsub>
 8006a20:	ec41 0b10 	vmov	d0, r0, r1
 8006a24:	b005      	add	sp, #20
 8006a26:	f85d fb04 	ldr.w	pc, [sp], #4
 8006a2a:	4668      	mov	r0, sp
 8006a2c:	f000 fe3c 	bl	80076a8 <__ieee754_rem_pio2>
 8006a30:	f000 0003 	and.w	r0, r0, #3
 8006a34:	2801      	cmp	r0, #1
 8006a36:	d008      	beq.n	8006a4a <sin+0x5a>
 8006a38:	2802      	cmp	r0, #2
 8006a3a:	d00d      	beq.n	8006a58 <sin+0x68>
 8006a3c:	b9d0      	cbnz	r0, 8006a74 <sin+0x84>
 8006a3e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006a42:	ed9d 0b00 	vldr	d0, [sp]
 8006a46:	2001      	movs	r0, #1
 8006a48:	e7dd      	b.n	8006a06 <sin+0x16>
 8006a4a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006a4e:	ed9d 0b00 	vldr	d0, [sp]
 8006a52:	f001 f8e9 	bl	8007c28 <__kernel_cos>
 8006a56:	e7d8      	b.n	8006a0a <sin+0x1a>
 8006a58:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006a5c:	ed9d 0b00 	vldr	d0, [sp]
 8006a60:	2001      	movs	r0, #1
 8006a62:	f001 fce9 	bl	8008438 <__kernel_sin>
 8006a66:	ec53 2b10 	vmov	r2, r3, d0
 8006a6a:	ee10 0a10 	vmov	r0, s0
 8006a6e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006a72:	e7d5      	b.n	8006a20 <sin+0x30>
 8006a74:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006a78:	ed9d 0b00 	vldr	d0, [sp]
 8006a7c:	f001 f8d4 	bl	8007c28 <__kernel_cos>
 8006a80:	e7f1      	b.n	8006a66 <sin+0x76>
 8006a82:	bf00      	nop
 8006a84:	f3af 8000 	nop.w
	...
 8006a90:	3fe921fb 	.word	0x3fe921fb
 8006a94:	7fefffff 	.word	0x7fefffff

08006a98 <pow>:
 8006a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a9c:	ec59 8b10 	vmov	r8, r9, d0
 8006aa0:	ec57 6b11 	vmov	r6, r7, d1
 8006aa4:	f000 f8dc 	bl	8006c60 <__ieee754_pow>
 8006aa8:	4b4e      	ldr	r3, [pc, #312]	; (8006be4 <pow+0x14c>)
 8006aaa:	f993 3000 	ldrsb.w	r3, [r3]
 8006aae:	3301      	adds	r3, #1
 8006ab0:	ec55 4b10 	vmov	r4, r5, d0
 8006ab4:	d015      	beq.n	8006ae2 <pow+0x4a>
 8006ab6:	4632      	mov	r2, r6
 8006ab8:	463b      	mov	r3, r7
 8006aba:	4630      	mov	r0, r6
 8006abc:	4639      	mov	r1, r7
 8006abe:	f7fa f83d 	bl	8000b3c <__aeabi_dcmpun>
 8006ac2:	b970      	cbnz	r0, 8006ae2 <pow+0x4a>
 8006ac4:	4642      	mov	r2, r8
 8006ac6:	464b      	mov	r3, r9
 8006ac8:	4640      	mov	r0, r8
 8006aca:	4649      	mov	r1, r9
 8006acc:	f7fa f836 	bl	8000b3c <__aeabi_dcmpun>
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	b148      	cbz	r0, 8006aea <pow+0x52>
 8006ad6:	4630      	mov	r0, r6
 8006ad8:	4639      	mov	r1, r7
 8006ada:	f7f9 fffd 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ade:	2800      	cmp	r0, #0
 8006ae0:	d17d      	bne.n	8006bde <pow+0x146>
 8006ae2:	ec45 4b10 	vmov	d0, r4, r5
 8006ae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006aea:	4640      	mov	r0, r8
 8006aec:	4649      	mov	r1, r9
 8006aee:	f7f9 fff3 	bl	8000ad8 <__aeabi_dcmpeq>
 8006af2:	b1e0      	cbz	r0, 8006b2e <pow+0x96>
 8006af4:	2200      	movs	r2, #0
 8006af6:	2300      	movs	r3, #0
 8006af8:	4630      	mov	r0, r6
 8006afa:	4639      	mov	r1, r7
 8006afc:	f7f9 ffec 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b00:	2800      	cmp	r0, #0
 8006b02:	d16c      	bne.n	8006bde <pow+0x146>
 8006b04:	ec47 6b10 	vmov	d0, r6, r7
 8006b08:	f001 fd5d 	bl	80085c6 <finite>
 8006b0c:	2800      	cmp	r0, #0
 8006b0e:	d0e8      	beq.n	8006ae2 <pow+0x4a>
 8006b10:	2200      	movs	r2, #0
 8006b12:	2300      	movs	r3, #0
 8006b14:	4630      	mov	r0, r6
 8006b16:	4639      	mov	r1, r7
 8006b18:	f7f9 ffe8 	bl	8000aec <__aeabi_dcmplt>
 8006b1c:	2800      	cmp	r0, #0
 8006b1e:	d0e0      	beq.n	8006ae2 <pow+0x4a>
 8006b20:	f7ff fab6 	bl	8006090 <__errno>
 8006b24:	2321      	movs	r3, #33	; 0x21
 8006b26:	6003      	str	r3, [r0, #0]
 8006b28:	2400      	movs	r4, #0
 8006b2a:	4d2f      	ldr	r5, [pc, #188]	; (8006be8 <pow+0x150>)
 8006b2c:	e7d9      	b.n	8006ae2 <pow+0x4a>
 8006b2e:	ec45 4b10 	vmov	d0, r4, r5
 8006b32:	f001 fd48 	bl	80085c6 <finite>
 8006b36:	bbb8      	cbnz	r0, 8006ba8 <pow+0x110>
 8006b38:	ec49 8b10 	vmov	d0, r8, r9
 8006b3c:	f001 fd43 	bl	80085c6 <finite>
 8006b40:	b390      	cbz	r0, 8006ba8 <pow+0x110>
 8006b42:	ec47 6b10 	vmov	d0, r6, r7
 8006b46:	f001 fd3e 	bl	80085c6 <finite>
 8006b4a:	b368      	cbz	r0, 8006ba8 <pow+0x110>
 8006b4c:	4622      	mov	r2, r4
 8006b4e:	462b      	mov	r3, r5
 8006b50:	4620      	mov	r0, r4
 8006b52:	4629      	mov	r1, r5
 8006b54:	f7f9 fff2 	bl	8000b3c <__aeabi_dcmpun>
 8006b58:	b160      	cbz	r0, 8006b74 <pow+0xdc>
 8006b5a:	f7ff fa99 	bl	8006090 <__errno>
 8006b5e:	2321      	movs	r3, #33	; 0x21
 8006b60:	6003      	str	r3, [r0, #0]
 8006b62:	2200      	movs	r2, #0
 8006b64:	2300      	movs	r3, #0
 8006b66:	4610      	mov	r0, r2
 8006b68:	4619      	mov	r1, r3
 8006b6a:	f7f9 fe77 	bl	800085c <__aeabi_ddiv>
 8006b6e:	4604      	mov	r4, r0
 8006b70:	460d      	mov	r5, r1
 8006b72:	e7b6      	b.n	8006ae2 <pow+0x4a>
 8006b74:	f7ff fa8c 	bl	8006090 <__errno>
 8006b78:	2322      	movs	r3, #34	; 0x22
 8006b7a:	6003      	str	r3, [r0, #0]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	2300      	movs	r3, #0
 8006b80:	4640      	mov	r0, r8
 8006b82:	4649      	mov	r1, r9
 8006b84:	f7f9 ffb2 	bl	8000aec <__aeabi_dcmplt>
 8006b88:	2400      	movs	r4, #0
 8006b8a:	b158      	cbz	r0, 8006ba4 <pow+0x10c>
 8006b8c:	ec47 6b10 	vmov	d0, r6, r7
 8006b90:	f001 fdae 	bl	80086f0 <rint>
 8006b94:	4632      	mov	r2, r6
 8006b96:	ec51 0b10 	vmov	r0, r1, d0
 8006b9a:	463b      	mov	r3, r7
 8006b9c:	f7f9 ff9c 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ba0:	2800      	cmp	r0, #0
 8006ba2:	d0c2      	beq.n	8006b2a <pow+0x92>
 8006ba4:	4d11      	ldr	r5, [pc, #68]	; (8006bec <pow+0x154>)
 8006ba6:	e79c      	b.n	8006ae2 <pow+0x4a>
 8006ba8:	2200      	movs	r2, #0
 8006baa:	2300      	movs	r3, #0
 8006bac:	4620      	mov	r0, r4
 8006bae:	4629      	mov	r1, r5
 8006bb0:	f7f9 ff92 	bl	8000ad8 <__aeabi_dcmpeq>
 8006bb4:	2800      	cmp	r0, #0
 8006bb6:	d094      	beq.n	8006ae2 <pow+0x4a>
 8006bb8:	ec49 8b10 	vmov	d0, r8, r9
 8006bbc:	f001 fd03 	bl	80085c6 <finite>
 8006bc0:	2800      	cmp	r0, #0
 8006bc2:	d08e      	beq.n	8006ae2 <pow+0x4a>
 8006bc4:	ec47 6b10 	vmov	d0, r6, r7
 8006bc8:	f001 fcfd 	bl	80085c6 <finite>
 8006bcc:	2800      	cmp	r0, #0
 8006bce:	d088      	beq.n	8006ae2 <pow+0x4a>
 8006bd0:	f7ff fa5e 	bl	8006090 <__errno>
 8006bd4:	2322      	movs	r3, #34	; 0x22
 8006bd6:	6003      	str	r3, [r0, #0]
 8006bd8:	2400      	movs	r4, #0
 8006bda:	2500      	movs	r5, #0
 8006bdc:	e781      	b.n	8006ae2 <pow+0x4a>
 8006bde:	4d04      	ldr	r5, [pc, #16]	; (8006bf0 <pow+0x158>)
 8006be0:	2400      	movs	r4, #0
 8006be2:	e77e      	b.n	8006ae2 <pow+0x4a>
 8006be4:	20000074 	.word	0x20000074
 8006be8:	fff00000 	.word	0xfff00000
 8006bec:	7ff00000 	.word	0x7ff00000
 8006bf0:	3ff00000 	.word	0x3ff00000

08006bf4 <sqrt>:
 8006bf4:	b538      	push	{r3, r4, r5, lr}
 8006bf6:	ed2d 8b02 	vpush	{d8}
 8006bfa:	ec55 4b10 	vmov	r4, r5, d0
 8006bfe:	f000 ff5d 	bl	8007abc <__ieee754_sqrt>
 8006c02:	4b15      	ldr	r3, [pc, #84]	; (8006c58 <sqrt+0x64>)
 8006c04:	eeb0 8a40 	vmov.f32	s16, s0
 8006c08:	eef0 8a60 	vmov.f32	s17, s1
 8006c0c:	f993 3000 	ldrsb.w	r3, [r3]
 8006c10:	3301      	adds	r3, #1
 8006c12:	d019      	beq.n	8006c48 <sqrt+0x54>
 8006c14:	4622      	mov	r2, r4
 8006c16:	462b      	mov	r3, r5
 8006c18:	4620      	mov	r0, r4
 8006c1a:	4629      	mov	r1, r5
 8006c1c:	f7f9 ff8e 	bl	8000b3c <__aeabi_dcmpun>
 8006c20:	b990      	cbnz	r0, 8006c48 <sqrt+0x54>
 8006c22:	2200      	movs	r2, #0
 8006c24:	2300      	movs	r3, #0
 8006c26:	4620      	mov	r0, r4
 8006c28:	4629      	mov	r1, r5
 8006c2a:	f7f9 ff5f 	bl	8000aec <__aeabi_dcmplt>
 8006c2e:	b158      	cbz	r0, 8006c48 <sqrt+0x54>
 8006c30:	f7ff fa2e 	bl	8006090 <__errno>
 8006c34:	2321      	movs	r3, #33	; 0x21
 8006c36:	6003      	str	r3, [r0, #0]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	4610      	mov	r0, r2
 8006c3e:	4619      	mov	r1, r3
 8006c40:	f7f9 fe0c 	bl	800085c <__aeabi_ddiv>
 8006c44:	ec41 0b18 	vmov	d8, r0, r1
 8006c48:	eeb0 0a48 	vmov.f32	s0, s16
 8006c4c:	eef0 0a68 	vmov.f32	s1, s17
 8006c50:	ecbd 8b02 	vpop	{d8}
 8006c54:	bd38      	pop	{r3, r4, r5, pc}
 8006c56:	bf00      	nop
 8006c58:	20000074 	.word	0x20000074
 8006c5c:	00000000 	.word	0x00000000

08006c60 <__ieee754_pow>:
 8006c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c64:	ed2d 8b06 	vpush	{d8-d10}
 8006c68:	b08d      	sub	sp, #52	; 0x34
 8006c6a:	ed8d 1b02 	vstr	d1, [sp, #8]
 8006c6e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8006c72:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8006c76:	ea56 0100 	orrs.w	r1, r6, r0
 8006c7a:	ec53 2b10 	vmov	r2, r3, d0
 8006c7e:	f000 84d1 	beq.w	8007624 <__ieee754_pow+0x9c4>
 8006c82:	497f      	ldr	r1, [pc, #508]	; (8006e80 <__ieee754_pow+0x220>)
 8006c84:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8006c88:	428c      	cmp	r4, r1
 8006c8a:	ee10 8a10 	vmov	r8, s0
 8006c8e:	4699      	mov	r9, r3
 8006c90:	dc09      	bgt.n	8006ca6 <__ieee754_pow+0x46>
 8006c92:	d103      	bne.n	8006c9c <__ieee754_pow+0x3c>
 8006c94:	b97a      	cbnz	r2, 8006cb6 <__ieee754_pow+0x56>
 8006c96:	42a6      	cmp	r6, r4
 8006c98:	dd02      	ble.n	8006ca0 <__ieee754_pow+0x40>
 8006c9a:	e00c      	b.n	8006cb6 <__ieee754_pow+0x56>
 8006c9c:	428e      	cmp	r6, r1
 8006c9e:	dc02      	bgt.n	8006ca6 <__ieee754_pow+0x46>
 8006ca0:	428e      	cmp	r6, r1
 8006ca2:	d110      	bne.n	8006cc6 <__ieee754_pow+0x66>
 8006ca4:	b178      	cbz	r0, 8006cc6 <__ieee754_pow+0x66>
 8006ca6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006caa:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006cae:	ea54 0308 	orrs.w	r3, r4, r8
 8006cb2:	f000 84b7 	beq.w	8007624 <__ieee754_pow+0x9c4>
 8006cb6:	4873      	ldr	r0, [pc, #460]	; (8006e84 <__ieee754_pow+0x224>)
 8006cb8:	b00d      	add	sp, #52	; 0x34
 8006cba:	ecbd 8b06 	vpop	{d8-d10}
 8006cbe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cc2:	f001 bd0d 	b.w	80086e0 <nan>
 8006cc6:	f1b9 0f00 	cmp.w	r9, #0
 8006cca:	da36      	bge.n	8006d3a <__ieee754_pow+0xda>
 8006ccc:	496e      	ldr	r1, [pc, #440]	; (8006e88 <__ieee754_pow+0x228>)
 8006cce:	428e      	cmp	r6, r1
 8006cd0:	dc51      	bgt.n	8006d76 <__ieee754_pow+0x116>
 8006cd2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8006cd6:	428e      	cmp	r6, r1
 8006cd8:	f340 84af 	ble.w	800763a <__ieee754_pow+0x9da>
 8006cdc:	1531      	asrs	r1, r6, #20
 8006cde:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8006ce2:	2914      	cmp	r1, #20
 8006ce4:	dd0f      	ble.n	8006d06 <__ieee754_pow+0xa6>
 8006ce6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8006cea:	fa20 fc01 	lsr.w	ip, r0, r1
 8006cee:	fa0c f101 	lsl.w	r1, ip, r1
 8006cf2:	4281      	cmp	r1, r0
 8006cf4:	f040 84a1 	bne.w	800763a <__ieee754_pow+0x9da>
 8006cf8:	f00c 0c01 	and.w	ip, ip, #1
 8006cfc:	f1cc 0102 	rsb	r1, ip, #2
 8006d00:	9100      	str	r1, [sp, #0]
 8006d02:	b180      	cbz	r0, 8006d26 <__ieee754_pow+0xc6>
 8006d04:	e059      	b.n	8006dba <__ieee754_pow+0x15a>
 8006d06:	2800      	cmp	r0, #0
 8006d08:	d155      	bne.n	8006db6 <__ieee754_pow+0x156>
 8006d0a:	f1c1 0114 	rsb	r1, r1, #20
 8006d0e:	fa46 fc01 	asr.w	ip, r6, r1
 8006d12:	fa0c f101 	lsl.w	r1, ip, r1
 8006d16:	42b1      	cmp	r1, r6
 8006d18:	f040 848c 	bne.w	8007634 <__ieee754_pow+0x9d4>
 8006d1c:	f00c 0c01 	and.w	ip, ip, #1
 8006d20:	f1cc 0102 	rsb	r1, ip, #2
 8006d24:	9100      	str	r1, [sp, #0]
 8006d26:	4959      	ldr	r1, [pc, #356]	; (8006e8c <__ieee754_pow+0x22c>)
 8006d28:	428e      	cmp	r6, r1
 8006d2a:	d12d      	bne.n	8006d88 <__ieee754_pow+0x128>
 8006d2c:	2f00      	cmp	r7, #0
 8006d2e:	da79      	bge.n	8006e24 <__ieee754_pow+0x1c4>
 8006d30:	4956      	ldr	r1, [pc, #344]	; (8006e8c <__ieee754_pow+0x22c>)
 8006d32:	2000      	movs	r0, #0
 8006d34:	f7f9 fd92 	bl	800085c <__aeabi_ddiv>
 8006d38:	e016      	b.n	8006d68 <__ieee754_pow+0x108>
 8006d3a:	2100      	movs	r1, #0
 8006d3c:	9100      	str	r1, [sp, #0]
 8006d3e:	2800      	cmp	r0, #0
 8006d40:	d13b      	bne.n	8006dba <__ieee754_pow+0x15a>
 8006d42:	494f      	ldr	r1, [pc, #316]	; (8006e80 <__ieee754_pow+0x220>)
 8006d44:	428e      	cmp	r6, r1
 8006d46:	d1ee      	bne.n	8006d26 <__ieee754_pow+0xc6>
 8006d48:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006d4c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006d50:	ea53 0308 	orrs.w	r3, r3, r8
 8006d54:	f000 8466 	beq.w	8007624 <__ieee754_pow+0x9c4>
 8006d58:	4b4d      	ldr	r3, [pc, #308]	; (8006e90 <__ieee754_pow+0x230>)
 8006d5a:	429c      	cmp	r4, r3
 8006d5c:	dd0d      	ble.n	8006d7a <__ieee754_pow+0x11a>
 8006d5e:	2f00      	cmp	r7, #0
 8006d60:	f280 8464 	bge.w	800762c <__ieee754_pow+0x9cc>
 8006d64:	2000      	movs	r0, #0
 8006d66:	2100      	movs	r1, #0
 8006d68:	ec41 0b10 	vmov	d0, r0, r1
 8006d6c:	b00d      	add	sp, #52	; 0x34
 8006d6e:	ecbd 8b06 	vpop	{d8-d10}
 8006d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d76:	2102      	movs	r1, #2
 8006d78:	e7e0      	b.n	8006d3c <__ieee754_pow+0xdc>
 8006d7a:	2f00      	cmp	r7, #0
 8006d7c:	daf2      	bge.n	8006d64 <__ieee754_pow+0x104>
 8006d7e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8006d82:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006d86:	e7ef      	b.n	8006d68 <__ieee754_pow+0x108>
 8006d88:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8006d8c:	d104      	bne.n	8006d98 <__ieee754_pow+0x138>
 8006d8e:	4610      	mov	r0, r2
 8006d90:	4619      	mov	r1, r3
 8006d92:	f7f9 fc39 	bl	8000608 <__aeabi_dmul>
 8006d96:	e7e7      	b.n	8006d68 <__ieee754_pow+0x108>
 8006d98:	493e      	ldr	r1, [pc, #248]	; (8006e94 <__ieee754_pow+0x234>)
 8006d9a:	428f      	cmp	r7, r1
 8006d9c:	d10d      	bne.n	8006dba <__ieee754_pow+0x15a>
 8006d9e:	f1b9 0f00 	cmp.w	r9, #0
 8006da2:	db0a      	blt.n	8006dba <__ieee754_pow+0x15a>
 8006da4:	ec43 2b10 	vmov	d0, r2, r3
 8006da8:	b00d      	add	sp, #52	; 0x34
 8006daa:	ecbd 8b06 	vpop	{d8-d10}
 8006dae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006db2:	f000 be83 	b.w	8007abc <__ieee754_sqrt>
 8006db6:	2100      	movs	r1, #0
 8006db8:	9100      	str	r1, [sp, #0]
 8006dba:	ec43 2b10 	vmov	d0, r2, r3
 8006dbe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006dc2:	f001 fbf7 	bl	80085b4 <fabs>
 8006dc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dca:	ec51 0b10 	vmov	r0, r1, d0
 8006dce:	f1b8 0f00 	cmp.w	r8, #0
 8006dd2:	d12a      	bne.n	8006e2a <__ieee754_pow+0x1ca>
 8006dd4:	b12c      	cbz	r4, 8006de2 <__ieee754_pow+0x182>
 8006dd6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8006e8c <__ieee754_pow+0x22c>
 8006dda:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8006dde:	45e6      	cmp	lr, ip
 8006de0:	d123      	bne.n	8006e2a <__ieee754_pow+0x1ca>
 8006de2:	2f00      	cmp	r7, #0
 8006de4:	da05      	bge.n	8006df2 <__ieee754_pow+0x192>
 8006de6:	4602      	mov	r2, r0
 8006de8:	460b      	mov	r3, r1
 8006dea:	2000      	movs	r0, #0
 8006dec:	4927      	ldr	r1, [pc, #156]	; (8006e8c <__ieee754_pow+0x22c>)
 8006dee:	f7f9 fd35 	bl	800085c <__aeabi_ddiv>
 8006df2:	f1b9 0f00 	cmp.w	r9, #0
 8006df6:	dab7      	bge.n	8006d68 <__ieee754_pow+0x108>
 8006df8:	9b00      	ldr	r3, [sp, #0]
 8006dfa:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006dfe:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006e02:	4323      	orrs	r3, r4
 8006e04:	d108      	bne.n	8006e18 <__ieee754_pow+0x1b8>
 8006e06:	4602      	mov	r2, r0
 8006e08:	460b      	mov	r3, r1
 8006e0a:	4610      	mov	r0, r2
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	f7f9 fa43 	bl	8000298 <__aeabi_dsub>
 8006e12:	4602      	mov	r2, r0
 8006e14:	460b      	mov	r3, r1
 8006e16:	e78d      	b.n	8006d34 <__ieee754_pow+0xd4>
 8006e18:	9b00      	ldr	r3, [sp, #0]
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d1a4      	bne.n	8006d68 <__ieee754_pow+0x108>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e24:	4610      	mov	r0, r2
 8006e26:	4619      	mov	r1, r3
 8006e28:	e79e      	b.n	8006d68 <__ieee754_pow+0x108>
 8006e2a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8006e2e:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 8006e32:	950a      	str	r5, [sp, #40]	; 0x28
 8006e34:	9d00      	ldr	r5, [sp, #0]
 8006e36:	46ac      	mov	ip, r5
 8006e38:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006e3a:	ea5c 0505 	orrs.w	r5, ip, r5
 8006e3e:	d0e4      	beq.n	8006e0a <__ieee754_pow+0x1aa>
 8006e40:	4b15      	ldr	r3, [pc, #84]	; (8006e98 <__ieee754_pow+0x238>)
 8006e42:	429e      	cmp	r6, r3
 8006e44:	f340 80fc 	ble.w	8007040 <__ieee754_pow+0x3e0>
 8006e48:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006e4c:	429e      	cmp	r6, r3
 8006e4e:	4b10      	ldr	r3, [pc, #64]	; (8006e90 <__ieee754_pow+0x230>)
 8006e50:	dd07      	ble.n	8006e62 <__ieee754_pow+0x202>
 8006e52:	429c      	cmp	r4, r3
 8006e54:	dc0a      	bgt.n	8006e6c <__ieee754_pow+0x20c>
 8006e56:	2f00      	cmp	r7, #0
 8006e58:	da84      	bge.n	8006d64 <__ieee754_pow+0x104>
 8006e5a:	a307      	add	r3, pc, #28	; (adr r3, 8006e78 <__ieee754_pow+0x218>)
 8006e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e60:	e795      	b.n	8006d8e <__ieee754_pow+0x12e>
 8006e62:	429c      	cmp	r4, r3
 8006e64:	dbf7      	blt.n	8006e56 <__ieee754_pow+0x1f6>
 8006e66:	4b09      	ldr	r3, [pc, #36]	; (8006e8c <__ieee754_pow+0x22c>)
 8006e68:	429c      	cmp	r4, r3
 8006e6a:	dd17      	ble.n	8006e9c <__ieee754_pow+0x23c>
 8006e6c:	2f00      	cmp	r7, #0
 8006e6e:	dcf4      	bgt.n	8006e5a <__ieee754_pow+0x1fa>
 8006e70:	e778      	b.n	8006d64 <__ieee754_pow+0x104>
 8006e72:	bf00      	nop
 8006e74:	f3af 8000 	nop.w
 8006e78:	8800759c 	.word	0x8800759c
 8006e7c:	7e37e43c 	.word	0x7e37e43c
 8006e80:	7ff00000 	.word	0x7ff00000
 8006e84:	08008965 	.word	0x08008965
 8006e88:	433fffff 	.word	0x433fffff
 8006e8c:	3ff00000 	.word	0x3ff00000
 8006e90:	3fefffff 	.word	0x3fefffff
 8006e94:	3fe00000 	.word	0x3fe00000
 8006e98:	41e00000 	.word	0x41e00000
 8006e9c:	4b64      	ldr	r3, [pc, #400]	; (8007030 <__ieee754_pow+0x3d0>)
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f7f9 f9fa 	bl	8000298 <__aeabi_dsub>
 8006ea4:	a356      	add	r3, pc, #344	; (adr r3, 8007000 <__ieee754_pow+0x3a0>)
 8006ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eaa:	4604      	mov	r4, r0
 8006eac:	460d      	mov	r5, r1
 8006eae:	f7f9 fbab 	bl	8000608 <__aeabi_dmul>
 8006eb2:	a355      	add	r3, pc, #340	; (adr r3, 8007008 <__ieee754_pow+0x3a8>)
 8006eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb8:	4606      	mov	r6, r0
 8006eba:	460f      	mov	r7, r1
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	4629      	mov	r1, r5
 8006ec0:	f7f9 fba2 	bl	8000608 <__aeabi_dmul>
 8006ec4:	4b5b      	ldr	r3, [pc, #364]	; (8007034 <__ieee754_pow+0x3d4>)
 8006ec6:	4682      	mov	sl, r0
 8006ec8:	468b      	mov	fp, r1
 8006eca:	2200      	movs	r2, #0
 8006ecc:	4620      	mov	r0, r4
 8006ece:	4629      	mov	r1, r5
 8006ed0:	f7f9 fb9a 	bl	8000608 <__aeabi_dmul>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	a14d      	add	r1, pc, #308	; (adr r1, 8007010 <__ieee754_pow+0x3b0>)
 8006eda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ede:	f7f9 f9db 	bl	8000298 <__aeabi_dsub>
 8006ee2:	4622      	mov	r2, r4
 8006ee4:	462b      	mov	r3, r5
 8006ee6:	f7f9 fb8f 	bl	8000608 <__aeabi_dmul>
 8006eea:	4602      	mov	r2, r0
 8006eec:	460b      	mov	r3, r1
 8006eee:	2000      	movs	r0, #0
 8006ef0:	4951      	ldr	r1, [pc, #324]	; (8007038 <__ieee754_pow+0x3d8>)
 8006ef2:	f7f9 f9d1 	bl	8000298 <__aeabi_dsub>
 8006ef6:	4622      	mov	r2, r4
 8006ef8:	4680      	mov	r8, r0
 8006efa:	4689      	mov	r9, r1
 8006efc:	462b      	mov	r3, r5
 8006efe:	4620      	mov	r0, r4
 8006f00:	4629      	mov	r1, r5
 8006f02:	f7f9 fb81 	bl	8000608 <__aeabi_dmul>
 8006f06:	4602      	mov	r2, r0
 8006f08:	460b      	mov	r3, r1
 8006f0a:	4640      	mov	r0, r8
 8006f0c:	4649      	mov	r1, r9
 8006f0e:	f7f9 fb7b 	bl	8000608 <__aeabi_dmul>
 8006f12:	a341      	add	r3, pc, #260	; (adr r3, 8007018 <__ieee754_pow+0x3b8>)
 8006f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f18:	f7f9 fb76 	bl	8000608 <__aeabi_dmul>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	460b      	mov	r3, r1
 8006f20:	4650      	mov	r0, sl
 8006f22:	4659      	mov	r1, fp
 8006f24:	f7f9 f9b8 	bl	8000298 <__aeabi_dsub>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	4680      	mov	r8, r0
 8006f2e:	4689      	mov	r9, r1
 8006f30:	4630      	mov	r0, r6
 8006f32:	4639      	mov	r1, r7
 8006f34:	f7f9 f9b2 	bl	800029c <__adddf3>
 8006f38:	2400      	movs	r4, #0
 8006f3a:	4632      	mov	r2, r6
 8006f3c:	463b      	mov	r3, r7
 8006f3e:	4620      	mov	r0, r4
 8006f40:	460d      	mov	r5, r1
 8006f42:	f7f9 f9a9 	bl	8000298 <__aeabi_dsub>
 8006f46:	4602      	mov	r2, r0
 8006f48:	460b      	mov	r3, r1
 8006f4a:	4640      	mov	r0, r8
 8006f4c:	4649      	mov	r1, r9
 8006f4e:	f7f9 f9a3 	bl	8000298 <__aeabi_dsub>
 8006f52:	9b00      	ldr	r3, [sp, #0]
 8006f54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f56:	3b01      	subs	r3, #1
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	4682      	mov	sl, r0
 8006f5c:	468b      	mov	fp, r1
 8006f5e:	f040 81f1 	bne.w	8007344 <__ieee754_pow+0x6e4>
 8006f62:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8007020 <__ieee754_pow+0x3c0>
 8006f66:	eeb0 8a47 	vmov.f32	s16, s14
 8006f6a:	eef0 8a67 	vmov.f32	s17, s15
 8006f6e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006f72:	2600      	movs	r6, #0
 8006f74:	4632      	mov	r2, r6
 8006f76:	463b      	mov	r3, r7
 8006f78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f7c:	f7f9 f98c 	bl	8000298 <__aeabi_dsub>
 8006f80:	4622      	mov	r2, r4
 8006f82:	462b      	mov	r3, r5
 8006f84:	f7f9 fb40 	bl	8000608 <__aeabi_dmul>
 8006f88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f8c:	4680      	mov	r8, r0
 8006f8e:	4689      	mov	r9, r1
 8006f90:	4650      	mov	r0, sl
 8006f92:	4659      	mov	r1, fp
 8006f94:	f7f9 fb38 	bl	8000608 <__aeabi_dmul>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	460b      	mov	r3, r1
 8006f9c:	4640      	mov	r0, r8
 8006f9e:	4649      	mov	r1, r9
 8006fa0:	f7f9 f97c 	bl	800029c <__adddf3>
 8006fa4:	4632      	mov	r2, r6
 8006fa6:	463b      	mov	r3, r7
 8006fa8:	4680      	mov	r8, r0
 8006faa:	4689      	mov	r9, r1
 8006fac:	4620      	mov	r0, r4
 8006fae:	4629      	mov	r1, r5
 8006fb0:	f7f9 fb2a 	bl	8000608 <__aeabi_dmul>
 8006fb4:	460b      	mov	r3, r1
 8006fb6:	4604      	mov	r4, r0
 8006fb8:	460d      	mov	r5, r1
 8006fba:	4602      	mov	r2, r0
 8006fbc:	4649      	mov	r1, r9
 8006fbe:	4640      	mov	r0, r8
 8006fc0:	f7f9 f96c 	bl	800029c <__adddf3>
 8006fc4:	4b1d      	ldr	r3, [pc, #116]	; (800703c <__ieee754_pow+0x3dc>)
 8006fc6:	4299      	cmp	r1, r3
 8006fc8:	ec45 4b19 	vmov	d9, r4, r5
 8006fcc:	4606      	mov	r6, r0
 8006fce:	460f      	mov	r7, r1
 8006fd0:	468b      	mov	fp, r1
 8006fd2:	f340 82fe 	ble.w	80075d2 <__ieee754_pow+0x972>
 8006fd6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006fda:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006fde:	4303      	orrs	r3, r0
 8006fe0:	f000 81f0 	beq.w	80073c4 <__ieee754_pow+0x764>
 8006fe4:	a310      	add	r3, pc, #64	; (adr r3, 8007028 <__ieee754_pow+0x3c8>)
 8006fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fea:	ec51 0b18 	vmov	r0, r1, d8
 8006fee:	f7f9 fb0b 	bl	8000608 <__aeabi_dmul>
 8006ff2:	a30d      	add	r3, pc, #52	; (adr r3, 8007028 <__ieee754_pow+0x3c8>)
 8006ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff8:	e6cb      	b.n	8006d92 <__ieee754_pow+0x132>
 8006ffa:	bf00      	nop
 8006ffc:	f3af 8000 	nop.w
 8007000:	60000000 	.word	0x60000000
 8007004:	3ff71547 	.word	0x3ff71547
 8007008:	f85ddf44 	.word	0xf85ddf44
 800700c:	3e54ae0b 	.word	0x3e54ae0b
 8007010:	55555555 	.word	0x55555555
 8007014:	3fd55555 	.word	0x3fd55555
 8007018:	652b82fe 	.word	0x652b82fe
 800701c:	3ff71547 	.word	0x3ff71547
 8007020:	00000000 	.word	0x00000000
 8007024:	bff00000 	.word	0xbff00000
 8007028:	8800759c 	.word	0x8800759c
 800702c:	7e37e43c 	.word	0x7e37e43c
 8007030:	3ff00000 	.word	0x3ff00000
 8007034:	3fd00000 	.word	0x3fd00000
 8007038:	3fe00000 	.word	0x3fe00000
 800703c:	408fffff 	.word	0x408fffff
 8007040:	4bd7      	ldr	r3, [pc, #860]	; (80073a0 <__ieee754_pow+0x740>)
 8007042:	ea03 0309 	and.w	r3, r3, r9
 8007046:	2200      	movs	r2, #0
 8007048:	b92b      	cbnz	r3, 8007056 <__ieee754_pow+0x3f6>
 800704a:	4bd6      	ldr	r3, [pc, #856]	; (80073a4 <__ieee754_pow+0x744>)
 800704c:	f7f9 fadc 	bl	8000608 <__aeabi_dmul>
 8007050:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007054:	460c      	mov	r4, r1
 8007056:	1523      	asrs	r3, r4, #20
 8007058:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800705c:	4413      	add	r3, r2
 800705e:	9309      	str	r3, [sp, #36]	; 0x24
 8007060:	4bd1      	ldr	r3, [pc, #836]	; (80073a8 <__ieee754_pow+0x748>)
 8007062:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007066:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800706a:	429c      	cmp	r4, r3
 800706c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007070:	dd08      	ble.n	8007084 <__ieee754_pow+0x424>
 8007072:	4bce      	ldr	r3, [pc, #824]	; (80073ac <__ieee754_pow+0x74c>)
 8007074:	429c      	cmp	r4, r3
 8007076:	f340 8163 	ble.w	8007340 <__ieee754_pow+0x6e0>
 800707a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800707c:	3301      	adds	r3, #1
 800707e:	9309      	str	r3, [sp, #36]	; 0x24
 8007080:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007084:	2400      	movs	r4, #0
 8007086:	00e3      	lsls	r3, r4, #3
 8007088:	930b      	str	r3, [sp, #44]	; 0x2c
 800708a:	4bc9      	ldr	r3, [pc, #804]	; (80073b0 <__ieee754_pow+0x750>)
 800708c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007090:	ed93 7b00 	vldr	d7, [r3]
 8007094:	4629      	mov	r1, r5
 8007096:	ec53 2b17 	vmov	r2, r3, d7
 800709a:	eeb0 8a47 	vmov.f32	s16, s14
 800709e:	eef0 8a67 	vmov.f32	s17, s15
 80070a2:	4682      	mov	sl, r0
 80070a4:	f7f9 f8f8 	bl	8000298 <__aeabi_dsub>
 80070a8:	4652      	mov	r2, sl
 80070aa:	4606      	mov	r6, r0
 80070ac:	460f      	mov	r7, r1
 80070ae:	462b      	mov	r3, r5
 80070b0:	ec51 0b18 	vmov	r0, r1, d8
 80070b4:	f7f9 f8f2 	bl	800029c <__adddf3>
 80070b8:	4602      	mov	r2, r0
 80070ba:	460b      	mov	r3, r1
 80070bc:	2000      	movs	r0, #0
 80070be:	49bd      	ldr	r1, [pc, #756]	; (80073b4 <__ieee754_pow+0x754>)
 80070c0:	f7f9 fbcc 	bl	800085c <__aeabi_ddiv>
 80070c4:	ec41 0b19 	vmov	d9, r0, r1
 80070c8:	4602      	mov	r2, r0
 80070ca:	460b      	mov	r3, r1
 80070cc:	4630      	mov	r0, r6
 80070ce:	4639      	mov	r1, r7
 80070d0:	f7f9 fa9a 	bl	8000608 <__aeabi_dmul>
 80070d4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80070d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80070dc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80070e0:	2300      	movs	r3, #0
 80070e2:	9304      	str	r3, [sp, #16]
 80070e4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80070e8:	46ab      	mov	fp, r5
 80070ea:	106d      	asrs	r5, r5, #1
 80070ec:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80070f0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80070f4:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80070f8:	2200      	movs	r2, #0
 80070fa:	4640      	mov	r0, r8
 80070fc:	4649      	mov	r1, r9
 80070fe:	4614      	mov	r4, r2
 8007100:	461d      	mov	r5, r3
 8007102:	f7f9 fa81 	bl	8000608 <__aeabi_dmul>
 8007106:	4602      	mov	r2, r0
 8007108:	460b      	mov	r3, r1
 800710a:	4630      	mov	r0, r6
 800710c:	4639      	mov	r1, r7
 800710e:	f7f9 f8c3 	bl	8000298 <__aeabi_dsub>
 8007112:	ec53 2b18 	vmov	r2, r3, d8
 8007116:	4606      	mov	r6, r0
 8007118:	460f      	mov	r7, r1
 800711a:	4620      	mov	r0, r4
 800711c:	4629      	mov	r1, r5
 800711e:	f7f9 f8bb 	bl	8000298 <__aeabi_dsub>
 8007122:	4602      	mov	r2, r0
 8007124:	460b      	mov	r3, r1
 8007126:	4650      	mov	r0, sl
 8007128:	4659      	mov	r1, fp
 800712a:	f7f9 f8b5 	bl	8000298 <__aeabi_dsub>
 800712e:	4642      	mov	r2, r8
 8007130:	464b      	mov	r3, r9
 8007132:	f7f9 fa69 	bl	8000608 <__aeabi_dmul>
 8007136:	4602      	mov	r2, r0
 8007138:	460b      	mov	r3, r1
 800713a:	4630      	mov	r0, r6
 800713c:	4639      	mov	r1, r7
 800713e:	f7f9 f8ab 	bl	8000298 <__aeabi_dsub>
 8007142:	ec53 2b19 	vmov	r2, r3, d9
 8007146:	f7f9 fa5f 	bl	8000608 <__aeabi_dmul>
 800714a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800714e:	ec41 0b18 	vmov	d8, r0, r1
 8007152:	4610      	mov	r0, r2
 8007154:	4619      	mov	r1, r3
 8007156:	f7f9 fa57 	bl	8000608 <__aeabi_dmul>
 800715a:	a37d      	add	r3, pc, #500	; (adr r3, 8007350 <__ieee754_pow+0x6f0>)
 800715c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007160:	4604      	mov	r4, r0
 8007162:	460d      	mov	r5, r1
 8007164:	f7f9 fa50 	bl	8000608 <__aeabi_dmul>
 8007168:	a37b      	add	r3, pc, #492	; (adr r3, 8007358 <__ieee754_pow+0x6f8>)
 800716a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800716e:	f7f9 f895 	bl	800029c <__adddf3>
 8007172:	4622      	mov	r2, r4
 8007174:	462b      	mov	r3, r5
 8007176:	f7f9 fa47 	bl	8000608 <__aeabi_dmul>
 800717a:	a379      	add	r3, pc, #484	; (adr r3, 8007360 <__ieee754_pow+0x700>)
 800717c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007180:	f7f9 f88c 	bl	800029c <__adddf3>
 8007184:	4622      	mov	r2, r4
 8007186:	462b      	mov	r3, r5
 8007188:	f7f9 fa3e 	bl	8000608 <__aeabi_dmul>
 800718c:	a376      	add	r3, pc, #472	; (adr r3, 8007368 <__ieee754_pow+0x708>)
 800718e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007192:	f7f9 f883 	bl	800029c <__adddf3>
 8007196:	4622      	mov	r2, r4
 8007198:	462b      	mov	r3, r5
 800719a:	f7f9 fa35 	bl	8000608 <__aeabi_dmul>
 800719e:	a374      	add	r3, pc, #464	; (adr r3, 8007370 <__ieee754_pow+0x710>)
 80071a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a4:	f7f9 f87a 	bl	800029c <__adddf3>
 80071a8:	4622      	mov	r2, r4
 80071aa:	462b      	mov	r3, r5
 80071ac:	f7f9 fa2c 	bl	8000608 <__aeabi_dmul>
 80071b0:	a371      	add	r3, pc, #452	; (adr r3, 8007378 <__ieee754_pow+0x718>)
 80071b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b6:	f7f9 f871 	bl	800029c <__adddf3>
 80071ba:	4622      	mov	r2, r4
 80071bc:	4606      	mov	r6, r0
 80071be:	460f      	mov	r7, r1
 80071c0:	462b      	mov	r3, r5
 80071c2:	4620      	mov	r0, r4
 80071c4:	4629      	mov	r1, r5
 80071c6:	f7f9 fa1f 	bl	8000608 <__aeabi_dmul>
 80071ca:	4602      	mov	r2, r0
 80071cc:	460b      	mov	r3, r1
 80071ce:	4630      	mov	r0, r6
 80071d0:	4639      	mov	r1, r7
 80071d2:	f7f9 fa19 	bl	8000608 <__aeabi_dmul>
 80071d6:	4642      	mov	r2, r8
 80071d8:	4604      	mov	r4, r0
 80071da:	460d      	mov	r5, r1
 80071dc:	464b      	mov	r3, r9
 80071de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80071e2:	f7f9 f85b 	bl	800029c <__adddf3>
 80071e6:	ec53 2b18 	vmov	r2, r3, d8
 80071ea:	f7f9 fa0d 	bl	8000608 <__aeabi_dmul>
 80071ee:	4622      	mov	r2, r4
 80071f0:	462b      	mov	r3, r5
 80071f2:	f7f9 f853 	bl	800029c <__adddf3>
 80071f6:	4642      	mov	r2, r8
 80071f8:	4682      	mov	sl, r0
 80071fa:	468b      	mov	fp, r1
 80071fc:	464b      	mov	r3, r9
 80071fe:	4640      	mov	r0, r8
 8007200:	4649      	mov	r1, r9
 8007202:	f7f9 fa01 	bl	8000608 <__aeabi_dmul>
 8007206:	4b6c      	ldr	r3, [pc, #432]	; (80073b8 <__ieee754_pow+0x758>)
 8007208:	2200      	movs	r2, #0
 800720a:	4606      	mov	r6, r0
 800720c:	460f      	mov	r7, r1
 800720e:	f7f9 f845 	bl	800029c <__adddf3>
 8007212:	4652      	mov	r2, sl
 8007214:	465b      	mov	r3, fp
 8007216:	f7f9 f841 	bl	800029c <__adddf3>
 800721a:	9c04      	ldr	r4, [sp, #16]
 800721c:	460d      	mov	r5, r1
 800721e:	4622      	mov	r2, r4
 8007220:	460b      	mov	r3, r1
 8007222:	4640      	mov	r0, r8
 8007224:	4649      	mov	r1, r9
 8007226:	f7f9 f9ef 	bl	8000608 <__aeabi_dmul>
 800722a:	4b63      	ldr	r3, [pc, #396]	; (80073b8 <__ieee754_pow+0x758>)
 800722c:	4680      	mov	r8, r0
 800722e:	4689      	mov	r9, r1
 8007230:	2200      	movs	r2, #0
 8007232:	4620      	mov	r0, r4
 8007234:	4629      	mov	r1, r5
 8007236:	f7f9 f82f 	bl	8000298 <__aeabi_dsub>
 800723a:	4632      	mov	r2, r6
 800723c:	463b      	mov	r3, r7
 800723e:	f7f9 f82b 	bl	8000298 <__aeabi_dsub>
 8007242:	4602      	mov	r2, r0
 8007244:	460b      	mov	r3, r1
 8007246:	4650      	mov	r0, sl
 8007248:	4659      	mov	r1, fp
 800724a:	f7f9 f825 	bl	8000298 <__aeabi_dsub>
 800724e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007252:	f7f9 f9d9 	bl	8000608 <__aeabi_dmul>
 8007256:	4622      	mov	r2, r4
 8007258:	4606      	mov	r6, r0
 800725a:	460f      	mov	r7, r1
 800725c:	462b      	mov	r3, r5
 800725e:	ec51 0b18 	vmov	r0, r1, d8
 8007262:	f7f9 f9d1 	bl	8000608 <__aeabi_dmul>
 8007266:	4602      	mov	r2, r0
 8007268:	460b      	mov	r3, r1
 800726a:	4630      	mov	r0, r6
 800726c:	4639      	mov	r1, r7
 800726e:	f7f9 f815 	bl	800029c <__adddf3>
 8007272:	4606      	mov	r6, r0
 8007274:	460f      	mov	r7, r1
 8007276:	4602      	mov	r2, r0
 8007278:	460b      	mov	r3, r1
 800727a:	4640      	mov	r0, r8
 800727c:	4649      	mov	r1, r9
 800727e:	f7f9 f80d 	bl	800029c <__adddf3>
 8007282:	9c04      	ldr	r4, [sp, #16]
 8007284:	a33e      	add	r3, pc, #248	; (adr r3, 8007380 <__ieee754_pow+0x720>)
 8007286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728a:	4620      	mov	r0, r4
 800728c:	460d      	mov	r5, r1
 800728e:	f7f9 f9bb 	bl	8000608 <__aeabi_dmul>
 8007292:	4642      	mov	r2, r8
 8007294:	ec41 0b18 	vmov	d8, r0, r1
 8007298:	464b      	mov	r3, r9
 800729a:	4620      	mov	r0, r4
 800729c:	4629      	mov	r1, r5
 800729e:	f7f8 fffb 	bl	8000298 <__aeabi_dsub>
 80072a2:	4602      	mov	r2, r0
 80072a4:	460b      	mov	r3, r1
 80072a6:	4630      	mov	r0, r6
 80072a8:	4639      	mov	r1, r7
 80072aa:	f7f8 fff5 	bl	8000298 <__aeabi_dsub>
 80072ae:	a336      	add	r3, pc, #216	; (adr r3, 8007388 <__ieee754_pow+0x728>)
 80072b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b4:	f7f9 f9a8 	bl	8000608 <__aeabi_dmul>
 80072b8:	a335      	add	r3, pc, #212	; (adr r3, 8007390 <__ieee754_pow+0x730>)
 80072ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072be:	4606      	mov	r6, r0
 80072c0:	460f      	mov	r7, r1
 80072c2:	4620      	mov	r0, r4
 80072c4:	4629      	mov	r1, r5
 80072c6:	f7f9 f99f 	bl	8000608 <__aeabi_dmul>
 80072ca:	4602      	mov	r2, r0
 80072cc:	460b      	mov	r3, r1
 80072ce:	4630      	mov	r0, r6
 80072d0:	4639      	mov	r1, r7
 80072d2:	f7f8 ffe3 	bl	800029c <__adddf3>
 80072d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80072d8:	4b38      	ldr	r3, [pc, #224]	; (80073bc <__ieee754_pow+0x75c>)
 80072da:	4413      	add	r3, r2
 80072dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e0:	f7f8 ffdc 	bl	800029c <__adddf3>
 80072e4:	4682      	mov	sl, r0
 80072e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072e8:	468b      	mov	fp, r1
 80072ea:	f7f9 f923 	bl	8000534 <__aeabi_i2d>
 80072ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80072f0:	4b33      	ldr	r3, [pc, #204]	; (80073c0 <__ieee754_pow+0x760>)
 80072f2:	4413      	add	r3, r2
 80072f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80072f8:	4606      	mov	r6, r0
 80072fa:	460f      	mov	r7, r1
 80072fc:	4652      	mov	r2, sl
 80072fe:	465b      	mov	r3, fp
 8007300:	ec51 0b18 	vmov	r0, r1, d8
 8007304:	f7f8 ffca 	bl	800029c <__adddf3>
 8007308:	4642      	mov	r2, r8
 800730a:	464b      	mov	r3, r9
 800730c:	f7f8 ffc6 	bl	800029c <__adddf3>
 8007310:	4632      	mov	r2, r6
 8007312:	463b      	mov	r3, r7
 8007314:	f7f8 ffc2 	bl	800029c <__adddf3>
 8007318:	9c04      	ldr	r4, [sp, #16]
 800731a:	4632      	mov	r2, r6
 800731c:	463b      	mov	r3, r7
 800731e:	4620      	mov	r0, r4
 8007320:	460d      	mov	r5, r1
 8007322:	f7f8 ffb9 	bl	8000298 <__aeabi_dsub>
 8007326:	4642      	mov	r2, r8
 8007328:	464b      	mov	r3, r9
 800732a:	f7f8 ffb5 	bl	8000298 <__aeabi_dsub>
 800732e:	ec53 2b18 	vmov	r2, r3, d8
 8007332:	f7f8 ffb1 	bl	8000298 <__aeabi_dsub>
 8007336:	4602      	mov	r2, r0
 8007338:	460b      	mov	r3, r1
 800733a:	4650      	mov	r0, sl
 800733c:	4659      	mov	r1, fp
 800733e:	e606      	b.n	8006f4e <__ieee754_pow+0x2ee>
 8007340:	2401      	movs	r4, #1
 8007342:	e6a0      	b.n	8007086 <__ieee754_pow+0x426>
 8007344:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8007398 <__ieee754_pow+0x738>
 8007348:	e60d      	b.n	8006f66 <__ieee754_pow+0x306>
 800734a:	bf00      	nop
 800734c:	f3af 8000 	nop.w
 8007350:	4a454eef 	.word	0x4a454eef
 8007354:	3fca7e28 	.word	0x3fca7e28
 8007358:	93c9db65 	.word	0x93c9db65
 800735c:	3fcd864a 	.word	0x3fcd864a
 8007360:	a91d4101 	.word	0xa91d4101
 8007364:	3fd17460 	.word	0x3fd17460
 8007368:	518f264d 	.word	0x518f264d
 800736c:	3fd55555 	.word	0x3fd55555
 8007370:	db6fabff 	.word	0xdb6fabff
 8007374:	3fdb6db6 	.word	0x3fdb6db6
 8007378:	33333303 	.word	0x33333303
 800737c:	3fe33333 	.word	0x3fe33333
 8007380:	e0000000 	.word	0xe0000000
 8007384:	3feec709 	.word	0x3feec709
 8007388:	dc3a03fd 	.word	0xdc3a03fd
 800738c:	3feec709 	.word	0x3feec709
 8007390:	145b01f5 	.word	0x145b01f5
 8007394:	be3e2fe0 	.word	0xbe3e2fe0
 8007398:	00000000 	.word	0x00000000
 800739c:	3ff00000 	.word	0x3ff00000
 80073a0:	7ff00000 	.word	0x7ff00000
 80073a4:	43400000 	.word	0x43400000
 80073a8:	0003988e 	.word	0x0003988e
 80073ac:	000bb679 	.word	0x000bb679
 80073b0:	08008998 	.word	0x08008998
 80073b4:	3ff00000 	.word	0x3ff00000
 80073b8:	40080000 	.word	0x40080000
 80073bc:	080089b8 	.word	0x080089b8
 80073c0:	080089a8 	.word	0x080089a8
 80073c4:	a3b5      	add	r3, pc, #724	; (adr r3, 800769c <__ieee754_pow+0xa3c>)
 80073c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ca:	4640      	mov	r0, r8
 80073cc:	4649      	mov	r1, r9
 80073ce:	f7f8 ff65 	bl	800029c <__adddf3>
 80073d2:	4622      	mov	r2, r4
 80073d4:	ec41 0b1a 	vmov	d10, r0, r1
 80073d8:	462b      	mov	r3, r5
 80073da:	4630      	mov	r0, r6
 80073dc:	4639      	mov	r1, r7
 80073de:	f7f8 ff5b 	bl	8000298 <__aeabi_dsub>
 80073e2:	4602      	mov	r2, r0
 80073e4:	460b      	mov	r3, r1
 80073e6:	ec51 0b1a 	vmov	r0, r1, d10
 80073ea:	f7f9 fb9d 	bl	8000b28 <__aeabi_dcmpgt>
 80073ee:	2800      	cmp	r0, #0
 80073f0:	f47f adf8 	bne.w	8006fe4 <__ieee754_pow+0x384>
 80073f4:	4aa4      	ldr	r2, [pc, #656]	; (8007688 <__ieee754_pow+0xa28>)
 80073f6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80073fa:	4293      	cmp	r3, r2
 80073fc:	f340 810b 	ble.w	8007616 <__ieee754_pow+0x9b6>
 8007400:	151b      	asrs	r3, r3, #20
 8007402:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007406:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800740a:	fa4a f303 	asr.w	r3, sl, r3
 800740e:	445b      	add	r3, fp
 8007410:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007414:	4e9d      	ldr	r6, [pc, #628]	; (800768c <__ieee754_pow+0xa2c>)
 8007416:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800741a:	4116      	asrs	r6, r2
 800741c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007420:	2000      	movs	r0, #0
 8007422:	ea23 0106 	bic.w	r1, r3, r6
 8007426:	f1c2 0214 	rsb	r2, r2, #20
 800742a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800742e:	fa4a fa02 	asr.w	sl, sl, r2
 8007432:	f1bb 0f00 	cmp.w	fp, #0
 8007436:	4602      	mov	r2, r0
 8007438:	460b      	mov	r3, r1
 800743a:	4620      	mov	r0, r4
 800743c:	4629      	mov	r1, r5
 800743e:	bfb8      	it	lt
 8007440:	f1ca 0a00 	rsblt	sl, sl, #0
 8007444:	f7f8 ff28 	bl	8000298 <__aeabi_dsub>
 8007448:	ec41 0b19 	vmov	d9, r0, r1
 800744c:	4642      	mov	r2, r8
 800744e:	464b      	mov	r3, r9
 8007450:	ec51 0b19 	vmov	r0, r1, d9
 8007454:	f7f8 ff22 	bl	800029c <__adddf3>
 8007458:	2400      	movs	r4, #0
 800745a:	a379      	add	r3, pc, #484	; (adr r3, 8007640 <__ieee754_pow+0x9e0>)
 800745c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007460:	4620      	mov	r0, r4
 8007462:	460d      	mov	r5, r1
 8007464:	f7f9 f8d0 	bl	8000608 <__aeabi_dmul>
 8007468:	ec53 2b19 	vmov	r2, r3, d9
 800746c:	4606      	mov	r6, r0
 800746e:	460f      	mov	r7, r1
 8007470:	4620      	mov	r0, r4
 8007472:	4629      	mov	r1, r5
 8007474:	f7f8 ff10 	bl	8000298 <__aeabi_dsub>
 8007478:	4602      	mov	r2, r0
 800747a:	460b      	mov	r3, r1
 800747c:	4640      	mov	r0, r8
 800747e:	4649      	mov	r1, r9
 8007480:	f7f8 ff0a 	bl	8000298 <__aeabi_dsub>
 8007484:	a370      	add	r3, pc, #448	; (adr r3, 8007648 <__ieee754_pow+0x9e8>)
 8007486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800748a:	f7f9 f8bd 	bl	8000608 <__aeabi_dmul>
 800748e:	a370      	add	r3, pc, #448	; (adr r3, 8007650 <__ieee754_pow+0x9f0>)
 8007490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007494:	4680      	mov	r8, r0
 8007496:	4689      	mov	r9, r1
 8007498:	4620      	mov	r0, r4
 800749a:	4629      	mov	r1, r5
 800749c:	f7f9 f8b4 	bl	8000608 <__aeabi_dmul>
 80074a0:	4602      	mov	r2, r0
 80074a2:	460b      	mov	r3, r1
 80074a4:	4640      	mov	r0, r8
 80074a6:	4649      	mov	r1, r9
 80074a8:	f7f8 fef8 	bl	800029c <__adddf3>
 80074ac:	4604      	mov	r4, r0
 80074ae:	460d      	mov	r5, r1
 80074b0:	4602      	mov	r2, r0
 80074b2:	460b      	mov	r3, r1
 80074b4:	4630      	mov	r0, r6
 80074b6:	4639      	mov	r1, r7
 80074b8:	f7f8 fef0 	bl	800029c <__adddf3>
 80074bc:	4632      	mov	r2, r6
 80074be:	463b      	mov	r3, r7
 80074c0:	4680      	mov	r8, r0
 80074c2:	4689      	mov	r9, r1
 80074c4:	f7f8 fee8 	bl	8000298 <__aeabi_dsub>
 80074c8:	4602      	mov	r2, r0
 80074ca:	460b      	mov	r3, r1
 80074cc:	4620      	mov	r0, r4
 80074ce:	4629      	mov	r1, r5
 80074d0:	f7f8 fee2 	bl	8000298 <__aeabi_dsub>
 80074d4:	4642      	mov	r2, r8
 80074d6:	4606      	mov	r6, r0
 80074d8:	460f      	mov	r7, r1
 80074da:	464b      	mov	r3, r9
 80074dc:	4640      	mov	r0, r8
 80074de:	4649      	mov	r1, r9
 80074e0:	f7f9 f892 	bl	8000608 <__aeabi_dmul>
 80074e4:	a35c      	add	r3, pc, #368	; (adr r3, 8007658 <__ieee754_pow+0x9f8>)
 80074e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ea:	4604      	mov	r4, r0
 80074ec:	460d      	mov	r5, r1
 80074ee:	f7f9 f88b 	bl	8000608 <__aeabi_dmul>
 80074f2:	a35b      	add	r3, pc, #364	; (adr r3, 8007660 <__ieee754_pow+0xa00>)
 80074f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f8:	f7f8 fece 	bl	8000298 <__aeabi_dsub>
 80074fc:	4622      	mov	r2, r4
 80074fe:	462b      	mov	r3, r5
 8007500:	f7f9 f882 	bl	8000608 <__aeabi_dmul>
 8007504:	a358      	add	r3, pc, #352	; (adr r3, 8007668 <__ieee754_pow+0xa08>)
 8007506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800750a:	f7f8 fec7 	bl	800029c <__adddf3>
 800750e:	4622      	mov	r2, r4
 8007510:	462b      	mov	r3, r5
 8007512:	f7f9 f879 	bl	8000608 <__aeabi_dmul>
 8007516:	a356      	add	r3, pc, #344	; (adr r3, 8007670 <__ieee754_pow+0xa10>)
 8007518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800751c:	f7f8 febc 	bl	8000298 <__aeabi_dsub>
 8007520:	4622      	mov	r2, r4
 8007522:	462b      	mov	r3, r5
 8007524:	f7f9 f870 	bl	8000608 <__aeabi_dmul>
 8007528:	a353      	add	r3, pc, #332	; (adr r3, 8007678 <__ieee754_pow+0xa18>)
 800752a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800752e:	f7f8 feb5 	bl	800029c <__adddf3>
 8007532:	4622      	mov	r2, r4
 8007534:	462b      	mov	r3, r5
 8007536:	f7f9 f867 	bl	8000608 <__aeabi_dmul>
 800753a:	4602      	mov	r2, r0
 800753c:	460b      	mov	r3, r1
 800753e:	4640      	mov	r0, r8
 8007540:	4649      	mov	r1, r9
 8007542:	f7f8 fea9 	bl	8000298 <__aeabi_dsub>
 8007546:	4604      	mov	r4, r0
 8007548:	460d      	mov	r5, r1
 800754a:	4602      	mov	r2, r0
 800754c:	460b      	mov	r3, r1
 800754e:	4640      	mov	r0, r8
 8007550:	4649      	mov	r1, r9
 8007552:	f7f9 f859 	bl	8000608 <__aeabi_dmul>
 8007556:	2200      	movs	r2, #0
 8007558:	ec41 0b19 	vmov	d9, r0, r1
 800755c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007560:	4620      	mov	r0, r4
 8007562:	4629      	mov	r1, r5
 8007564:	f7f8 fe98 	bl	8000298 <__aeabi_dsub>
 8007568:	4602      	mov	r2, r0
 800756a:	460b      	mov	r3, r1
 800756c:	ec51 0b19 	vmov	r0, r1, d9
 8007570:	f7f9 f974 	bl	800085c <__aeabi_ddiv>
 8007574:	4632      	mov	r2, r6
 8007576:	4604      	mov	r4, r0
 8007578:	460d      	mov	r5, r1
 800757a:	463b      	mov	r3, r7
 800757c:	4640      	mov	r0, r8
 800757e:	4649      	mov	r1, r9
 8007580:	f7f9 f842 	bl	8000608 <__aeabi_dmul>
 8007584:	4632      	mov	r2, r6
 8007586:	463b      	mov	r3, r7
 8007588:	f7f8 fe88 	bl	800029c <__adddf3>
 800758c:	4602      	mov	r2, r0
 800758e:	460b      	mov	r3, r1
 8007590:	4620      	mov	r0, r4
 8007592:	4629      	mov	r1, r5
 8007594:	f7f8 fe80 	bl	8000298 <__aeabi_dsub>
 8007598:	4642      	mov	r2, r8
 800759a:	464b      	mov	r3, r9
 800759c:	f7f8 fe7c 	bl	8000298 <__aeabi_dsub>
 80075a0:	460b      	mov	r3, r1
 80075a2:	4602      	mov	r2, r0
 80075a4:	493a      	ldr	r1, [pc, #232]	; (8007690 <__ieee754_pow+0xa30>)
 80075a6:	2000      	movs	r0, #0
 80075a8:	f7f8 fe76 	bl	8000298 <__aeabi_dsub>
 80075ac:	e9cd 0100 	strd	r0, r1, [sp]
 80075b0:	9b01      	ldr	r3, [sp, #4]
 80075b2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80075b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075ba:	da2f      	bge.n	800761c <__ieee754_pow+0x9bc>
 80075bc:	4650      	mov	r0, sl
 80075be:	ed9d 0b00 	vldr	d0, [sp]
 80075c2:	f001 f921 	bl	8008808 <scalbn>
 80075c6:	ec51 0b10 	vmov	r0, r1, d0
 80075ca:	ec53 2b18 	vmov	r2, r3, d8
 80075ce:	f7ff bbe0 	b.w	8006d92 <__ieee754_pow+0x132>
 80075d2:	4b30      	ldr	r3, [pc, #192]	; (8007694 <__ieee754_pow+0xa34>)
 80075d4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80075d8:	429e      	cmp	r6, r3
 80075da:	f77f af0b 	ble.w	80073f4 <__ieee754_pow+0x794>
 80075de:	4b2e      	ldr	r3, [pc, #184]	; (8007698 <__ieee754_pow+0xa38>)
 80075e0:	440b      	add	r3, r1
 80075e2:	4303      	orrs	r3, r0
 80075e4:	d00b      	beq.n	80075fe <__ieee754_pow+0x99e>
 80075e6:	a326      	add	r3, pc, #152	; (adr r3, 8007680 <__ieee754_pow+0xa20>)
 80075e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ec:	ec51 0b18 	vmov	r0, r1, d8
 80075f0:	f7f9 f80a 	bl	8000608 <__aeabi_dmul>
 80075f4:	a322      	add	r3, pc, #136	; (adr r3, 8007680 <__ieee754_pow+0xa20>)
 80075f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fa:	f7ff bbca 	b.w	8006d92 <__ieee754_pow+0x132>
 80075fe:	4622      	mov	r2, r4
 8007600:	462b      	mov	r3, r5
 8007602:	f7f8 fe49 	bl	8000298 <__aeabi_dsub>
 8007606:	4642      	mov	r2, r8
 8007608:	464b      	mov	r3, r9
 800760a:	f7f9 fa83 	bl	8000b14 <__aeabi_dcmpge>
 800760e:	2800      	cmp	r0, #0
 8007610:	f43f aef0 	beq.w	80073f4 <__ieee754_pow+0x794>
 8007614:	e7e7      	b.n	80075e6 <__ieee754_pow+0x986>
 8007616:	f04f 0a00 	mov.w	sl, #0
 800761a:	e717      	b.n	800744c <__ieee754_pow+0x7ec>
 800761c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007620:	4619      	mov	r1, r3
 8007622:	e7d2      	b.n	80075ca <__ieee754_pow+0x96a>
 8007624:	491a      	ldr	r1, [pc, #104]	; (8007690 <__ieee754_pow+0xa30>)
 8007626:	2000      	movs	r0, #0
 8007628:	f7ff bb9e 	b.w	8006d68 <__ieee754_pow+0x108>
 800762c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007630:	f7ff bb9a 	b.w	8006d68 <__ieee754_pow+0x108>
 8007634:	9000      	str	r0, [sp, #0]
 8007636:	f7ff bb76 	b.w	8006d26 <__ieee754_pow+0xc6>
 800763a:	2100      	movs	r1, #0
 800763c:	f7ff bb60 	b.w	8006d00 <__ieee754_pow+0xa0>
 8007640:	00000000 	.word	0x00000000
 8007644:	3fe62e43 	.word	0x3fe62e43
 8007648:	fefa39ef 	.word	0xfefa39ef
 800764c:	3fe62e42 	.word	0x3fe62e42
 8007650:	0ca86c39 	.word	0x0ca86c39
 8007654:	be205c61 	.word	0xbe205c61
 8007658:	72bea4d0 	.word	0x72bea4d0
 800765c:	3e663769 	.word	0x3e663769
 8007660:	c5d26bf1 	.word	0xc5d26bf1
 8007664:	3ebbbd41 	.word	0x3ebbbd41
 8007668:	af25de2c 	.word	0xaf25de2c
 800766c:	3f11566a 	.word	0x3f11566a
 8007670:	16bebd93 	.word	0x16bebd93
 8007674:	3f66c16c 	.word	0x3f66c16c
 8007678:	5555553e 	.word	0x5555553e
 800767c:	3fc55555 	.word	0x3fc55555
 8007680:	c2f8f359 	.word	0xc2f8f359
 8007684:	01a56e1f 	.word	0x01a56e1f
 8007688:	3fe00000 	.word	0x3fe00000
 800768c:	000fffff 	.word	0x000fffff
 8007690:	3ff00000 	.word	0x3ff00000
 8007694:	4090cbff 	.word	0x4090cbff
 8007698:	3f6f3400 	.word	0x3f6f3400
 800769c:	652b82fe 	.word	0x652b82fe
 80076a0:	3c971547 	.word	0x3c971547
 80076a4:	00000000 	.word	0x00000000

080076a8 <__ieee754_rem_pio2>:
 80076a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ac:	ed2d 8b02 	vpush	{d8}
 80076b0:	ec55 4b10 	vmov	r4, r5, d0
 80076b4:	4bca      	ldr	r3, [pc, #808]	; (80079e0 <__ieee754_rem_pio2+0x338>)
 80076b6:	b08b      	sub	sp, #44	; 0x2c
 80076b8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80076bc:	4598      	cmp	r8, r3
 80076be:	4682      	mov	sl, r0
 80076c0:	9502      	str	r5, [sp, #8]
 80076c2:	dc08      	bgt.n	80076d6 <__ieee754_rem_pio2+0x2e>
 80076c4:	2200      	movs	r2, #0
 80076c6:	2300      	movs	r3, #0
 80076c8:	ed80 0b00 	vstr	d0, [r0]
 80076cc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80076d0:	f04f 0b00 	mov.w	fp, #0
 80076d4:	e028      	b.n	8007728 <__ieee754_rem_pio2+0x80>
 80076d6:	4bc3      	ldr	r3, [pc, #780]	; (80079e4 <__ieee754_rem_pio2+0x33c>)
 80076d8:	4598      	cmp	r8, r3
 80076da:	dc78      	bgt.n	80077ce <__ieee754_rem_pio2+0x126>
 80076dc:	9b02      	ldr	r3, [sp, #8]
 80076de:	4ec2      	ldr	r6, [pc, #776]	; (80079e8 <__ieee754_rem_pio2+0x340>)
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	ee10 0a10 	vmov	r0, s0
 80076e6:	a3b0      	add	r3, pc, #704	; (adr r3, 80079a8 <__ieee754_rem_pio2+0x300>)
 80076e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ec:	4629      	mov	r1, r5
 80076ee:	dd39      	ble.n	8007764 <__ieee754_rem_pio2+0xbc>
 80076f0:	f7f8 fdd2 	bl	8000298 <__aeabi_dsub>
 80076f4:	45b0      	cmp	r8, r6
 80076f6:	4604      	mov	r4, r0
 80076f8:	460d      	mov	r5, r1
 80076fa:	d01b      	beq.n	8007734 <__ieee754_rem_pio2+0x8c>
 80076fc:	a3ac      	add	r3, pc, #688	; (adr r3, 80079b0 <__ieee754_rem_pio2+0x308>)
 80076fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007702:	f7f8 fdc9 	bl	8000298 <__aeabi_dsub>
 8007706:	4602      	mov	r2, r0
 8007708:	460b      	mov	r3, r1
 800770a:	e9ca 2300 	strd	r2, r3, [sl]
 800770e:	4620      	mov	r0, r4
 8007710:	4629      	mov	r1, r5
 8007712:	f7f8 fdc1 	bl	8000298 <__aeabi_dsub>
 8007716:	a3a6      	add	r3, pc, #664	; (adr r3, 80079b0 <__ieee754_rem_pio2+0x308>)
 8007718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800771c:	f7f8 fdbc 	bl	8000298 <__aeabi_dsub>
 8007720:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007724:	f04f 0b01 	mov.w	fp, #1
 8007728:	4658      	mov	r0, fp
 800772a:	b00b      	add	sp, #44	; 0x2c
 800772c:	ecbd 8b02 	vpop	{d8}
 8007730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007734:	a3a0      	add	r3, pc, #640	; (adr r3, 80079b8 <__ieee754_rem_pio2+0x310>)
 8007736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800773a:	f7f8 fdad 	bl	8000298 <__aeabi_dsub>
 800773e:	a3a0      	add	r3, pc, #640	; (adr r3, 80079c0 <__ieee754_rem_pio2+0x318>)
 8007740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007744:	4604      	mov	r4, r0
 8007746:	460d      	mov	r5, r1
 8007748:	f7f8 fda6 	bl	8000298 <__aeabi_dsub>
 800774c:	4602      	mov	r2, r0
 800774e:	460b      	mov	r3, r1
 8007750:	e9ca 2300 	strd	r2, r3, [sl]
 8007754:	4620      	mov	r0, r4
 8007756:	4629      	mov	r1, r5
 8007758:	f7f8 fd9e 	bl	8000298 <__aeabi_dsub>
 800775c:	a398      	add	r3, pc, #608	; (adr r3, 80079c0 <__ieee754_rem_pio2+0x318>)
 800775e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007762:	e7db      	b.n	800771c <__ieee754_rem_pio2+0x74>
 8007764:	f7f8 fd9a 	bl	800029c <__adddf3>
 8007768:	45b0      	cmp	r8, r6
 800776a:	4604      	mov	r4, r0
 800776c:	460d      	mov	r5, r1
 800776e:	d016      	beq.n	800779e <__ieee754_rem_pio2+0xf6>
 8007770:	a38f      	add	r3, pc, #572	; (adr r3, 80079b0 <__ieee754_rem_pio2+0x308>)
 8007772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007776:	f7f8 fd91 	bl	800029c <__adddf3>
 800777a:	4602      	mov	r2, r0
 800777c:	460b      	mov	r3, r1
 800777e:	e9ca 2300 	strd	r2, r3, [sl]
 8007782:	4620      	mov	r0, r4
 8007784:	4629      	mov	r1, r5
 8007786:	f7f8 fd87 	bl	8000298 <__aeabi_dsub>
 800778a:	a389      	add	r3, pc, #548	; (adr r3, 80079b0 <__ieee754_rem_pio2+0x308>)
 800778c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007790:	f7f8 fd84 	bl	800029c <__adddf3>
 8007794:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8007798:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800779c:	e7c4      	b.n	8007728 <__ieee754_rem_pio2+0x80>
 800779e:	a386      	add	r3, pc, #536	; (adr r3, 80079b8 <__ieee754_rem_pio2+0x310>)
 80077a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a4:	f7f8 fd7a 	bl	800029c <__adddf3>
 80077a8:	a385      	add	r3, pc, #532	; (adr r3, 80079c0 <__ieee754_rem_pio2+0x318>)
 80077aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ae:	4604      	mov	r4, r0
 80077b0:	460d      	mov	r5, r1
 80077b2:	f7f8 fd73 	bl	800029c <__adddf3>
 80077b6:	4602      	mov	r2, r0
 80077b8:	460b      	mov	r3, r1
 80077ba:	e9ca 2300 	strd	r2, r3, [sl]
 80077be:	4620      	mov	r0, r4
 80077c0:	4629      	mov	r1, r5
 80077c2:	f7f8 fd69 	bl	8000298 <__aeabi_dsub>
 80077c6:	a37e      	add	r3, pc, #504	; (adr r3, 80079c0 <__ieee754_rem_pio2+0x318>)
 80077c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077cc:	e7e0      	b.n	8007790 <__ieee754_rem_pio2+0xe8>
 80077ce:	4b87      	ldr	r3, [pc, #540]	; (80079ec <__ieee754_rem_pio2+0x344>)
 80077d0:	4598      	cmp	r8, r3
 80077d2:	f300 80d9 	bgt.w	8007988 <__ieee754_rem_pio2+0x2e0>
 80077d6:	f000 feed 	bl	80085b4 <fabs>
 80077da:	ec55 4b10 	vmov	r4, r5, d0
 80077de:	ee10 0a10 	vmov	r0, s0
 80077e2:	a379      	add	r3, pc, #484	; (adr r3, 80079c8 <__ieee754_rem_pio2+0x320>)
 80077e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e8:	4629      	mov	r1, r5
 80077ea:	f7f8 ff0d 	bl	8000608 <__aeabi_dmul>
 80077ee:	4b80      	ldr	r3, [pc, #512]	; (80079f0 <__ieee754_rem_pio2+0x348>)
 80077f0:	2200      	movs	r2, #0
 80077f2:	f7f8 fd53 	bl	800029c <__adddf3>
 80077f6:	f7f9 f9b7 	bl	8000b68 <__aeabi_d2iz>
 80077fa:	4683      	mov	fp, r0
 80077fc:	f7f8 fe9a 	bl	8000534 <__aeabi_i2d>
 8007800:	4602      	mov	r2, r0
 8007802:	460b      	mov	r3, r1
 8007804:	ec43 2b18 	vmov	d8, r2, r3
 8007808:	a367      	add	r3, pc, #412	; (adr r3, 80079a8 <__ieee754_rem_pio2+0x300>)
 800780a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800780e:	f7f8 fefb 	bl	8000608 <__aeabi_dmul>
 8007812:	4602      	mov	r2, r0
 8007814:	460b      	mov	r3, r1
 8007816:	4620      	mov	r0, r4
 8007818:	4629      	mov	r1, r5
 800781a:	f7f8 fd3d 	bl	8000298 <__aeabi_dsub>
 800781e:	a364      	add	r3, pc, #400	; (adr r3, 80079b0 <__ieee754_rem_pio2+0x308>)
 8007820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007824:	4606      	mov	r6, r0
 8007826:	460f      	mov	r7, r1
 8007828:	ec51 0b18 	vmov	r0, r1, d8
 800782c:	f7f8 feec 	bl	8000608 <__aeabi_dmul>
 8007830:	f1bb 0f1f 	cmp.w	fp, #31
 8007834:	4604      	mov	r4, r0
 8007836:	460d      	mov	r5, r1
 8007838:	dc0d      	bgt.n	8007856 <__ieee754_rem_pio2+0x1ae>
 800783a:	4b6e      	ldr	r3, [pc, #440]	; (80079f4 <__ieee754_rem_pio2+0x34c>)
 800783c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8007840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007844:	4543      	cmp	r3, r8
 8007846:	d006      	beq.n	8007856 <__ieee754_rem_pio2+0x1ae>
 8007848:	4622      	mov	r2, r4
 800784a:	462b      	mov	r3, r5
 800784c:	4630      	mov	r0, r6
 800784e:	4639      	mov	r1, r7
 8007850:	f7f8 fd22 	bl	8000298 <__aeabi_dsub>
 8007854:	e00f      	b.n	8007876 <__ieee754_rem_pio2+0x1ce>
 8007856:	462b      	mov	r3, r5
 8007858:	4622      	mov	r2, r4
 800785a:	4630      	mov	r0, r6
 800785c:	4639      	mov	r1, r7
 800785e:	f7f8 fd1b 	bl	8000298 <__aeabi_dsub>
 8007862:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007866:	9303      	str	r3, [sp, #12]
 8007868:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800786c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8007870:	f1b8 0f10 	cmp.w	r8, #16
 8007874:	dc02      	bgt.n	800787c <__ieee754_rem_pio2+0x1d4>
 8007876:	e9ca 0100 	strd	r0, r1, [sl]
 800787a:	e039      	b.n	80078f0 <__ieee754_rem_pio2+0x248>
 800787c:	a34e      	add	r3, pc, #312	; (adr r3, 80079b8 <__ieee754_rem_pio2+0x310>)
 800787e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007882:	ec51 0b18 	vmov	r0, r1, d8
 8007886:	f7f8 febf 	bl	8000608 <__aeabi_dmul>
 800788a:	4604      	mov	r4, r0
 800788c:	460d      	mov	r5, r1
 800788e:	4602      	mov	r2, r0
 8007890:	460b      	mov	r3, r1
 8007892:	4630      	mov	r0, r6
 8007894:	4639      	mov	r1, r7
 8007896:	f7f8 fcff 	bl	8000298 <__aeabi_dsub>
 800789a:	4602      	mov	r2, r0
 800789c:	460b      	mov	r3, r1
 800789e:	4680      	mov	r8, r0
 80078a0:	4689      	mov	r9, r1
 80078a2:	4630      	mov	r0, r6
 80078a4:	4639      	mov	r1, r7
 80078a6:	f7f8 fcf7 	bl	8000298 <__aeabi_dsub>
 80078aa:	4622      	mov	r2, r4
 80078ac:	462b      	mov	r3, r5
 80078ae:	f7f8 fcf3 	bl	8000298 <__aeabi_dsub>
 80078b2:	a343      	add	r3, pc, #268	; (adr r3, 80079c0 <__ieee754_rem_pio2+0x318>)
 80078b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b8:	4604      	mov	r4, r0
 80078ba:	460d      	mov	r5, r1
 80078bc:	ec51 0b18 	vmov	r0, r1, d8
 80078c0:	f7f8 fea2 	bl	8000608 <__aeabi_dmul>
 80078c4:	4622      	mov	r2, r4
 80078c6:	462b      	mov	r3, r5
 80078c8:	f7f8 fce6 	bl	8000298 <__aeabi_dsub>
 80078cc:	4602      	mov	r2, r0
 80078ce:	460b      	mov	r3, r1
 80078d0:	4604      	mov	r4, r0
 80078d2:	460d      	mov	r5, r1
 80078d4:	4640      	mov	r0, r8
 80078d6:	4649      	mov	r1, r9
 80078d8:	f7f8 fcde 	bl	8000298 <__aeabi_dsub>
 80078dc:	9a03      	ldr	r2, [sp, #12]
 80078de:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80078e2:	1ad3      	subs	r3, r2, r3
 80078e4:	2b31      	cmp	r3, #49	; 0x31
 80078e6:	dc24      	bgt.n	8007932 <__ieee754_rem_pio2+0x28a>
 80078e8:	e9ca 0100 	strd	r0, r1, [sl]
 80078ec:	4646      	mov	r6, r8
 80078ee:	464f      	mov	r7, r9
 80078f0:	e9da 8900 	ldrd	r8, r9, [sl]
 80078f4:	4630      	mov	r0, r6
 80078f6:	4642      	mov	r2, r8
 80078f8:	464b      	mov	r3, r9
 80078fa:	4639      	mov	r1, r7
 80078fc:	f7f8 fccc 	bl	8000298 <__aeabi_dsub>
 8007900:	462b      	mov	r3, r5
 8007902:	4622      	mov	r2, r4
 8007904:	f7f8 fcc8 	bl	8000298 <__aeabi_dsub>
 8007908:	9b02      	ldr	r3, [sp, #8]
 800790a:	2b00      	cmp	r3, #0
 800790c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007910:	f6bf af0a 	bge.w	8007728 <__ieee754_rem_pio2+0x80>
 8007914:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007918:	f8ca 3004 	str.w	r3, [sl, #4]
 800791c:	f8ca 8000 	str.w	r8, [sl]
 8007920:	f8ca 0008 	str.w	r0, [sl, #8]
 8007924:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007928:	f8ca 300c 	str.w	r3, [sl, #12]
 800792c:	f1cb 0b00 	rsb	fp, fp, #0
 8007930:	e6fa      	b.n	8007728 <__ieee754_rem_pio2+0x80>
 8007932:	a327      	add	r3, pc, #156	; (adr r3, 80079d0 <__ieee754_rem_pio2+0x328>)
 8007934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007938:	ec51 0b18 	vmov	r0, r1, d8
 800793c:	f7f8 fe64 	bl	8000608 <__aeabi_dmul>
 8007940:	4604      	mov	r4, r0
 8007942:	460d      	mov	r5, r1
 8007944:	4602      	mov	r2, r0
 8007946:	460b      	mov	r3, r1
 8007948:	4640      	mov	r0, r8
 800794a:	4649      	mov	r1, r9
 800794c:	f7f8 fca4 	bl	8000298 <__aeabi_dsub>
 8007950:	4602      	mov	r2, r0
 8007952:	460b      	mov	r3, r1
 8007954:	4606      	mov	r6, r0
 8007956:	460f      	mov	r7, r1
 8007958:	4640      	mov	r0, r8
 800795a:	4649      	mov	r1, r9
 800795c:	f7f8 fc9c 	bl	8000298 <__aeabi_dsub>
 8007960:	4622      	mov	r2, r4
 8007962:	462b      	mov	r3, r5
 8007964:	f7f8 fc98 	bl	8000298 <__aeabi_dsub>
 8007968:	a31b      	add	r3, pc, #108	; (adr r3, 80079d8 <__ieee754_rem_pio2+0x330>)
 800796a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800796e:	4604      	mov	r4, r0
 8007970:	460d      	mov	r5, r1
 8007972:	ec51 0b18 	vmov	r0, r1, d8
 8007976:	f7f8 fe47 	bl	8000608 <__aeabi_dmul>
 800797a:	4622      	mov	r2, r4
 800797c:	462b      	mov	r3, r5
 800797e:	f7f8 fc8b 	bl	8000298 <__aeabi_dsub>
 8007982:	4604      	mov	r4, r0
 8007984:	460d      	mov	r5, r1
 8007986:	e75f      	b.n	8007848 <__ieee754_rem_pio2+0x1a0>
 8007988:	4b1b      	ldr	r3, [pc, #108]	; (80079f8 <__ieee754_rem_pio2+0x350>)
 800798a:	4598      	cmp	r8, r3
 800798c:	dd36      	ble.n	80079fc <__ieee754_rem_pio2+0x354>
 800798e:	ee10 2a10 	vmov	r2, s0
 8007992:	462b      	mov	r3, r5
 8007994:	4620      	mov	r0, r4
 8007996:	4629      	mov	r1, r5
 8007998:	f7f8 fc7e 	bl	8000298 <__aeabi_dsub>
 800799c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80079a0:	e9ca 0100 	strd	r0, r1, [sl]
 80079a4:	e694      	b.n	80076d0 <__ieee754_rem_pio2+0x28>
 80079a6:	bf00      	nop
 80079a8:	54400000 	.word	0x54400000
 80079ac:	3ff921fb 	.word	0x3ff921fb
 80079b0:	1a626331 	.word	0x1a626331
 80079b4:	3dd0b461 	.word	0x3dd0b461
 80079b8:	1a600000 	.word	0x1a600000
 80079bc:	3dd0b461 	.word	0x3dd0b461
 80079c0:	2e037073 	.word	0x2e037073
 80079c4:	3ba3198a 	.word	0x3ba3198a
 80079c8:	6dc9c883 	.word	0x6dc9c883
 80079cc:	3fe45f30 	.word	0x3fe45f30
 80079d0:	2e000000 	.word	0x2e000000
 80079d4:	3ba3198a 	.word	0x3ba3198a
 80079d8:	252049c1 	.word	0x252049c1
 80079dc:	397b839a 	.word	0x397b839a
 80079e0:	3fe921fb 	.word	0x3fe921fb
 80079e4:	4002d97b 	.word	0x4002d97b
 80079e8:	3ff921fb 	.word	0x3ff921fb
 80079ec:	413921fb 	.word	0x413921fb
 80079f0:	3fe00000 	.word	0x3fe00000
 80079f4:	080089c8 	.word	0x080089c8
 80079f8:	7fefffff 	.word	0x7fefffff
 80079fc:	ea4f 5428 	mov.w	r4, r8, asr #20
 8007a00:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8007a04:	ee10 0a10 	vmov	r0, s0
 8007a08:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8007a0c:	ee10 6a10 	vmov	r6, s0
 8007a10:	460f      	mov	r7, r1
 8007a12:	f7f9 f8a9 	bl	8000b68 <__aeabi_d2iz>
 8007a16:	f7f8 fd8d 	bl	8000534 <__aeabi_i2d>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	4630      	mov	r0, r6
 8007a20:	4639      	mov	r1, r7
 8007a22:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007a26:	f7f8 fc37 	bl	8000298 <__aeabi_dsub>
 8007a2a:	4b22      	ldr	r3, [pc, #136]	; (8007ab4 <__ieee754_rem_pio2+0x40c>)
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f7f8 fdeb 	bl	8000608 <__aeabi_dmul>
 8007a32:	460f      	mov	r7, r1
 8007a34:	4606      	mov	r6, r0
 8007a36:	f7f9 f897 	bl	8000b68 <__aeabi_d2iz>
 8007a3a:	f7f8 fd7b 	bl	8000534 <__aeabi_i2d>
 8007a3e:	4602      	mov	r2, r0
 8007a40:	460b      	mov	r3, r1
 8007a42:	4630      	mov	r0, r6
 8007a44:	4639      	mov	r1, r7
 8007a46:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007a4a:	f7f8 fc25 	bl	8000298 <__aeabi_dsub>
 8007a4e:	4b19      	ldr	r3, [pc, #100]	; (8007ab4 <__ieee754_rem_pio2+0x40c>)
 8007a50:	2200      	movs	r2, #0
 8007a52:	f7f8 fdd9 	bl	8000608 <__aeabi_dmul>
 8007a56:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007a5a:	ad04      	add	r5, sp, #16
 8007a5c:	f04f 0803 	mov.w	r8, #3
 8007a60:	46a9      	mov	r9, r5
 8007a62:	2600      	movs	r6, #0
 8007a64:	2700      	movs	r7, #0
 8007a66:	4632      	mov	r2, r6
 8007a68:	463b      	mov	r3, r7
 8007a6a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8007a6e:	46c3      	mov	fp, r8
 8007a70:	3d08      	subs	r5, #8
 8007a72:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8007a76:	f7f9 f82f 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a7a:	2800      	cmp	r0, #0
 8007a7c:	d1f3      	bne.n	8007a66 <__ieee754_rem_pio2+0x3be>
 8007a7e:	4b0e      	ldr	r3, [pc, #56]	; (8007ab8 <__ieee754_rem_pio2+0x410>)
 8007a80:	9301      	str	r3, [sp, #4]
 8007a82:	2302      	movs	r3, #2
 8007a84:	9300      	str	r3, [sp, #0]
 8007a86:	4622      	mov	r2, r4
 8007a88:	465b      	mov	r3, fp
 8007a8a:	4651      	mov	r1, sl
 8007a8c:	4648      	mov	r0, r9
 8007a8e:	f000 f993 	bl	8007db8 <__kernel_rem_pio2>
 8007a92:	9b02      	ldr	r3, [sp, #8]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	4683      	mov	fp, r0
 8007a98:	f6bf ae46 	bge.w	8007728 <__ieee754_rem_pio2+0x80>
 8007a9c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007aa0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007aa4:	f8ca 3004 	str.w	r3, [sl, #4]
 8007aa8:	f8da 300c 	ldr.w	r3, [sl, #12]
 8007aac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007ab0:	e73a      	b.n	8007928 <__ieee754_rem_pio2+0x280>
 8007ab2:	bf00      	nop
 8007ab4:	41700000 	.word	0x41700000
 8007ab8:	08008a48 	.word	0x08008a48

08007abc <__ieee754_sqrt>:
 8007abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ac0:	ec55 4b10 	vmov	r4, r5, d0
 8007ac4:	4e56      	ldr	r6, [pc, #344]	; (8007c20 <__ieee754_sqrt+0x164>)
 8007ac6:	43ae      	bics	r6, r5
 8007ac8:	ee10 0a10 	vmov	r0, s0
 8007acc:	ee10 3a10 	vmov	r3, s0
 8007ad0:	4629      	mov	r1, r5
 8007ad2:	462a      	mov	r2, r5
 8007ad4:	d110      	bne.n	8007af8 <__ieee754_sqrt+0x3c>
 8007ad6:	ee10 2a10 	vmov	r2, s0
 8007ada:	462b      	mov	r3, r5
 8007adc:	f7f8 fd94 	bl	8000608 <__aeabi_dmul>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	4620      	mov	r0, r4
 8007ae6:	4629      	mov	r1, r5
 8007ae8:	f7f8 fbd8 	bl	800029c <__adddf3>
 8007aec:	4604      	mov	r4, r0
 8007aee:	460d      	mov	r5, r1
 8007af0:	ec45 4b10 	vmov	d0, r4, r5
 8007af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007af8:	2d00      	cmp	r5, #0
 8007afa:	dc10      	bgt.n	8007b1e <__ieee754_sqrt+0x62>
 8007afc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007b00:	4330      	orrs	r0, r6
 8007b02:	d0f5      	beq.n	8007af0 <__ieee754_sqrt+0x34>
 8007b04:	b15d      	cbz	r5, 8007b1e <__ieee754_sqrt+0x62>
 8007b06:	ee10 2a10 	vmov	r2, s0
 8007b0a:	462b      	mov	r3, r5
 8007b0c:	ee10 0a10 	vmov	r0, s0
 8007b10:	f7f8 fbc2 	bl	8000298 <__aeabi_dsub>
 8007b14:	4602      	mov	r2, r0
 8007b16:	460b      	mov	r3, r1
 8007b18:	f7f8 fea0 	bl	800085c <__aeabi_ddiv>
 8007b1c:	e7e6      	b.n	8007aec <__ieee754_sqrt+0x30>
 8007b1e:	1509      	asrs	r1, r1, #20
 8007b20:	d076      	beq.n	8007c10 <__ieee754_sqrt+0x154>
 8007b22:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007b26:	07ce      	lsls	r6, r1, #31
 8007b28:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8007b2c:	bf5e      	ittt	pl
 8007b2e:	0fda      	lsrpl	r2, r3, #31
 8007b30:	005b      	lslpl	r3, r3, #1
 8007b32:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8007b36:	0fda      	lsrs	r2, r3, #31
 8007b38:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8007b3c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8007b40:	2000      	movs	r0, #0
 8007b42:	106d      	asrs	r5, r5, #1
 8007b44:	005b      	lsls	r3, r3, #1
 8007b46:	f04f 0e16 	mov.w	lr, #22
 8007b4a:	4684      	mov	ip, r0
 8007b4c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007b50:	eb0c 0401 	add.w	r4, ip, r1
 8007b54:	4294      	cmp	r4, r2
 8007b56:	bfde      	ittt	le
 8007b58:	1b12      	suble	r2, r2, r4
 8007b5a:	eb04 0c01 	addle.w	ip, r4, r1
 8007b5e:	1840      	addle	r0, r0, r1
 8007b60:	0052      	lsls	r2, r2, #1
 8007b62:	f1be 0e01 	subs.w	lr, lr, #1
 8007b66:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007b6a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007b6e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007b72:	d1ed      	bne.n	8007b50 <__ieee754_sqrt+0x94>
 8007b74:	4671      	mov	r1, lr
 8007b76:	2720      	movs	r7, #32
 8007b78:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007b7c:	4562      	cmp	r2, ip
 8007b7e:	eb04 060e 	add.w	r6, r4, lr
 8007b82:	dc02      	bgt.n	8007b8a <__ieee754_sqrt+0xce>
 8007b84:	d113      	bne.n	8007bae <__ieee754_sqrt+0xf2>
 8007b86:	429e      	cmp	r6, r3
 8007b88:	d811      	bhi.n	8007bae <__ieee754_sqrt+0xf2>
 8007b8a:	2e00      	cmp	r6, #0
 8007b8c:	eb06 0e04 	add.w	lr, r6, r4
 8007b90:	da43      	bge.n	8007c1a <__ieee754_sqrt+0x15e>
 8007b92:	f1be 0f00 	cmp.w	lr, #0
 8007b96:	db40      	blt.n	8007c1a <__ieee754_sqrt+0x15e>
 8007b98:	f10c 0801 	add.w	r8, ip, #1
 8007b9c:	eba2 020c 	sub.w	r2, r2, ip
 8007ba0:	429e      	cmp	r6, r3
 8007ba2:	bf88      	it	hi
 8007ba4:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8007ba8:	1b9b      	subs	r3, r3, r6
 8007baa:	4421      	add	r1, r4
 8007bac:	46c4      	mov	ip, r8
 8007bae:	0052      	lsls	r2, r2, #1
 8007bb0:	3f01      	subs	r7, #1
 8007bb2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007bb6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007bba:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007bbe:	d1dd      	bne.n	8007b7c <__ieee754_sqrt+0xc0>
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	d006      	beq.n	8007bd2 <__ieee754_sqrt+0x116>
 8007bc4:	1c4c      	adds	r4, r1, #1
 8007bc6:	bf13      	iteet	ne
 8007bc8:	3101      	addne	r1, #1
 8007bca:	3001      	addeq	r0, #1
 8007bcc:	4639      	moveq	r1, r7
 8007bce:	f021 0101 	bicne.w	r1, r1, #1
 8007bd2:	1043      	asrs	r3, r0, #1
 8007bd4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007bd8:	0849      	lsrs	r1, r1, #1
 8007bda:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007bde:	07c2      	lsls	r2, r0, #31
 8007be0:	bf48      	it	mi
 8007be2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8007be6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8007bea:	460c      	mov	r4, r1
 8007bec:	463d      	mov	r5, r7
 8007bee:	e77f      	b.n	8007af0 <__ieee754_sqrt+0x34>
 8007bf0:	0ada      	lsrs	r2, r3, #11
 8007bf2:	3815      	subs	r0, #21
 8007bf4:	055b      	lsls	r3, r3, #21
 8007bf6:	2a00      	cmp	r2, #0
 8007bf8:	d0fa      	beq.n	8007bf0 <__ieee754_sqrt+0x134>
 8007bfa:	02d7      	lsls	r7, r2, #11
 8007bfc:	d50a      	bpl.n	8007c14 <__ieee754_sqrt+0x158>
 8007bfe:	f1c1 0420 	rsb	r4, r1, #32
 8007c02:	fa23 f404 	lsr.w	r4, r3, r4
 8007c06:	1e4d      	subs	r5, r1, #1
 8007c08:	408b      	lsls	r3, r1
 8007c0a:	4322      	orrs	r2, r4
 8007c0c:	1b41      	subs	r1, r0, r5
 8007c0e:	e788      	b.n	8007b22 <__ieee754_sqrt+0x66>
 8007c10:	4608      	mov	r0, r1
 8007c12:	e7f0      	b.n	8007bf6 <__ieee754_sqrt+0x13a>
 8007c14:	0052      	lsls	r2, r2, #1
 8007c16:	3101      	adds	r1, #1
 8007c18:	e7ef      	b.n	8007bfa <__ieee754_sqrt+0x13e>
 8007c1a:	46e0      	mov	r8, ip
 8007c1c:	e7be      	b.n	8007b9c <__ieee754_sqrt+0xe0>
 8007c1e:	bf00      	nop
 8007c20:	7ff00000 	.word	0x7ff00000
 8007c24:	00000000 	.word	0x00000000

08007c28 <__kernel_cos>:
 8007c28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c2c:	ec57 6b10 	vmov	r6, r7, d0
 8007c30:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8007c34:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007c38:	ed8d 1b00 	vstr	d1, [sp]
 8007c3c:	da07      	bge.n	8007c4e <__kernel_cos+0x26>
 8007c3e:	ee10 0a10 	vmov	r0, s0
 8007c42:	4639      	mov	r1, r7
 8007c44:	f7f8 ff90 	bl	8000b68 <__aeabi_d2iz>
 8007c48:	2800      	cmp	r0, #0
 8007c4a:	f000 8088 	beq.w	8007d5e <__kernel_cos+0x136>
 8007c4e:	4632      	mov	r2, r6
 8007c50:	463b      	mov	r3, r7
 8007c52:	4630      	mov	r0, r6
 8007c54:	4639      	mov	r1, r7
 8007c56:	f7f8 fcd7 	bl	8000608 <__aeabi_dmul>
 8007c5a:	4b51      	ldr	r3, [pc, #324]	; (8007da0 <__kernel_cos+0x178>)
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	4604      	mov	r4, r0
 8007c60:	460d      	mov	r5, r1
 8007c62:	f7f8 fcd1 	bl	8000608 <__aeabi_dmul>
 8007c66:	a340      	add	r3, pc, #256	; (adr r3, 8007d68 <__kernel_cos+0x140>)
 8007c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6c:	4682      	mov	sl, r0
 8007c6e:	468b      	mov	fp, r1
 8007c70:	4620      	mov	r0, r4
 8007c72:	4629      	mov	r1, r5
 8007c74:	f7f8 fcc8 	bl	8000608 <__aeabi_dmul>
 8007c78:	a33d      	add	r3, pc, #244	; (adr r3, 8007d70 <__kernel_cos+0x148>)
 8007c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7e:	f7f8 fb0d 	bl	800029c <__adddf3>
 8007c82:	4622      	mov	r2, r4
 8007c84:	462b      	mov	r3, r5
 8007c86:	f7f8 fcbf 	bl	8000608 <__aeabi_dmul>
 8007c8a:	a33b      	add	r3, pc, #236	; (adr r3, 8007d78 <__kernel_cos+0x150>)
 8007c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c90:	f7f8 fb02 	bl	8000298 <__aeabi_dsub>
 8007c94:	4622      	mov	r2, r4
 8007c96:	462b      	mov	r3, r5
 8007c98:	f7f8 fcb6 	bl	8000608 <__aeabi_dmul>
 8007c9c:	a338      	add	r3, pc, #224	; (adr r3, 8007d80 <__kernel_cos+0x158>)
 8007c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca2:	f7f8 fafb 	bl	800029c <__adddf3>
 8007ca6:	4622      	mov	r2, r4
 8007ca8:	462b      	mov	r3, r5
 8007caa:	f7f8 fcad 	bl	8000608 <__aeabi_dmul>
 8007cae:	a336      	add	r3, pc, #216	; (adr r3, 8007d88 <__kernel_cos+0x160>)
 8007cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb4:	f7f8 faf0 	bl	8000298 <__aeabi_dsub>
 8007cb8:	4622      	mov	r2, r4
 8007cba:	462b      	mov	r3, r5
 8007cbc:	f7f8 fca4 	bl	8000608 <__aeabi_dmul>
 8007cc0:	a333      	add	r3, pc, #204	; (adr r3, 8007d90 <__kernel_cos+0x168>)
 8007cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc6:	f7f8 fae9 	bl	800029c <__adddf3>
 8007cca:	4622      	mov	r2, r4
 8007ccc:	462b      	mov	r3, r5
 8007cce:	f7f8 fc9b 	bl	8000608 <__aeabi_dmul>
 8007cd2:	4622      	mov	r2, r4
 8007cd4:	462b      	mov	r3, r5
 8007cd6:	f7f8 fc97 	bl	8000608 <__aeabi_dmul>
 8007cda:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007cde:	4604      	mov	r4, r0
 8007ce0:	460d      	mov	r5, r1
 8007ce2:	4630      	mov	r0, r6
 8007ce4:	4639      	mov	r1, r7
 8007ce6:	f7f8 fc8f 	bl	8000608 <__aeabi_dmul>
 8007cea:	460b      	mov	r3, r1
 8007cec:	4602      	mov	r2, r0
 8007cee:	4629      	mov	r1, r5
 8007cf0:	4620      	mov	r0, r4
 8007cf2:	f7f8 fad1 	bl	8000298 <__aeabi_dsub>
 8007cf6:	4b2b      	ldr	r3, [pc, #172]	; (8007da4 <__kernel_cos+0x17c>)
 8007cf8:	4598      	cmp	r8, r3
 8007cfa:	4606      	mov	r6, r0
 8007cfc:	460f      	mov	r7, r1
 8007cfe:	dc10      	bgt.n	8007d22 <__kernel_cos+0xfa>
 8007d00:	4602      	mov	r2, r0
 8007d02:	460b      	mov	r3, r1
 8007d04:	4650      	mov	r0, sl
 8007d06:	4659      	mov	r1, fp
 8007d08:	f7f8 fac6 	bl	8000298 <__aeabi_dsub>
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	4926      	ldr	r1, [pc, #152]	; (8007da8 <__kernel_cos+0x180>)
 8007d10:	4602      	mov	r2, r0
 8007d12:	2000      	movs	r0, #0
 8007d14:	f7f8 fac0 	bl	8000298 <__aeabi_dsub>
 8007d18:	ec41 0b10 	vmov	d0, r0, r1
 8007d1c:	b003      	add	sp, #12
 8007d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d22:	4b22      	ldr	r3, [pc, #136]	; (8007dac <__kernel_cos+0x184>)
 8007d24:	4920      	ldr	r1, [pc, #128]	; (8007da8 <__kernel_cos+0x180>)
 8007d26:	4598      	cmp	r8, r3
 8007d28:	bfcc      	ite	gt
 8007d2a:	4d21      	ldrgt	r5, [pc, #132]	; (8007db0 <__kernel_cos+0x188>)
 8007d2c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8007d30:	2400      	movs	r4, #0
 8007d32:	4622      	mov	r2, r4
 8007d34:	462b      	mov	r3, r5
 8007d36:	2000      	movs	r0, #0
 8007d38:	f7f8 faae 	bl	8000298 <__aeabi_dsub>
 8007d3c:	4622      	mov	r2, r4
 8007d3e:	4680      	mov	r8, r0
 8007d40:	4689      	mov	r9, r1
 8007d42:	462b      	mov	r3, r5
 8007d44:	4650      	mov	r0, sl
 8007d46:	4659      	mov	r1, fp
 8007d48:	f7f8 faa6 	bl	8000298 <__aeabi_dsub>
 8007d4c:	4632      	mov	r2, r6
 8007d4e:	463b      	mov	r3, r7
 8007d50:	f7f8 faa2 	bl	8000298 <__aeabi_dsub>
 8007d54:	4602      	mov	r2, r0
 8007d56:	460b      	mov	r3, r1
 8007d58:	4640      	mov	r0, r8
 8007d5a:	4649      	mov	r1, r9
 8007d5c:	e7da      	b.n	8007d14 <__kernel_cos+0xec>
 8007d5e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8007d98 <__kernel_cos+0x170>
 8007d62:	e7db      	b.n	8007d1c <__kernel_cos+0xf4>
 8007d64:	f3af 8000 	nop.w
 8007d68:	be8838d4 	.word	0xbe8838d4
 8007d6c:	bda8fae9 	.word	0xbda8fae9
 8007d70:	bdb4b1c4 	.word	0xbdb4b1c4
 8007d74:	3e21ee9e 	.word	0x3e21ee9e
 8007d78:	809c52ad 	.word	0x809c52ad
 8007d7c:	3e927e4f 	.word	0x3e927e4f
 8007d80:	19cb1590 	.word	0x19cb1590
 8007d84:	3efa01a0 	.word	0x3efa01a0
 8007d88:	16c15177 	.word	0x16c15177
 8007d8c:	3f56c16c 	.word	0x3f56c16c
 8007d90:	5555554c 	.word	0x5555554c
 8007d94:	3fa55555 	.word	0x3fa55555
 8007d98:	00000000 	.word	0x00000000
 8007d9c:	3ff00000 	.word	0x3ff00000
 8007da0:	3fe00000 	.word	0x3fe00000
 8007da4:	3fd33332 	.word	0x3fd33332
 8007da8:	3ff00000 	.word	0x3ff00000
 8007dac:	3fe90000 	.word	0x3fe90000
 8007db0:	3fd20000 	.word	0x3fd20000
 8007db4:	00000000 	.word	0x00000000

08007db8 <__kernel_rem_pio2>:
 8007db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dbc:	ed2d 8b02 	vpush	{d8}
 8007dc0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8007dc4:	f112 0f14 	cmn.w	r2, #20
 8007dc8:	9308      	str	r3, [sp, #32]
 8007dca:	9101      	str	r1, [sp, #4]
 8007dcc:	4bc6      	ldr	r3, [pc, #792]	; (80080e8 <__kernel_rem_pio2+0x330>)
 8007dce:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8007dd0:	9009      	str	r0, [sp, #36]	; 0x24
 8007dd2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007dd6:	9304      	str	r3, [sp, #16]
 8007dd8:	9b08      	ldr	r3, [sp, #32]
 8007dda:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8007dde:	bfa8      	it	ge
 8007de0:	1ed4      	subge	r4, r2, #3
 8007de2:	9306      	str	r3, [sp, #24]
 8007de4:	bfb2      	itee	lt
 8007de6:	2400      	movlt	r4, #0
 8007de8:	2318      	movge	r3, #24
 8007dea:	fb94 f4f3 	sdivge	r4, r4, r3
 8007dee:	f06f 0317 	mvn.w	r3, #23
 8007df2:	fb04 3303 	mla	r3, r4, r3, r3
 8007df6:	eb03 0a02 	add.w	sl, r3, r2
 8007dfa:	9b04      	ldr	r3, [sp, #16]
 8007dfc:	9a06      	ldr	r2, [sp, #24]
 8007dfe:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80080d8 <__kernel_rem_pio2+0x320>
 8007e02:	eb03 0802 	add.w	r8, r3, r2
 8007e06:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8007e08:	1aa7      	subs	r7, r4, r2
 8007e0a:	ae20      	add	r6, sp, #128	; 0x80
 8007e0c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007e10:	2500      	movs	r5, #0
 8007e12:	4545      	cmp	r5, r8
 8007e14:	dd18      	ble.n	8007e48 <__kernel_rem_pio2+0x90>
 8007e16:	9b08      	ldr	r3, [sp, #32]
 8007e18:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8007e1c:	aa20      	add	r2, sp, #128	; 0x80
 8007e1e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 80080d8 <__kernel_rem_pio2+0x320>
 8007e22:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8007e26:	f1c3 0301 	rsb	r3, r3, #1
 8007e2a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8007e2e:	9307      	str	r3, [sp, #28]
 8007e30:	9b07      	ldr	r3, [sp, #28]
 8007e32:	9a04      	ldr	r2, [sp, #16]
 8007e34:	4443      	add	r3, r8
 8007e36:	429a      	cmp	r2, r3
 8007e38:	db2f      	blt.n	8007e9a <__kernel_rem_pio2+0xe2>
 8007e3a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007e3e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007e42:	462f      	mov	r7, r5
 8007e44:	2600      	movs	r6, #0
 8007e46:	e01b      	b.n	8007e80 <__kernel_rem_pio2+0xc8>
 8007e48:	42ef      	cmn	r7, r5
 8007e4a:	d407      	bmi.n	8007e5c <__kernel_rem_pio2+0xa4>
 8007e4c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007e50:	f7f8 fb70 	bl	8000534 <__aeabi_i2d>
 8007e54:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007e58:	3501      	adds	r5, #1
 8007e5a:	e7da      	b.n	8007e12 <__kernel_rem_pio2+0x5a>
 8007e5c:	ec51 0b18 	vmov	r0, r1, d8
 8007e60:	e7f8      	b.n	8007e54 <__kernel_rem_pio2+0x9c>
 8007e62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e66:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007e6a:	f7f8 fbcd 	bl	8000608 <__aeabi_dmul>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	460b      	mov	r3, r1
 8007e72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e76:	f7f8 fa11 	bl	800029c <__adddf3>
 8007e7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e7e:	3601      	adds	r6, #1
 8007e80:	9b06      	ldr	r3, [sp, #24]
 8007e82:	429e      	cmp	r6, r3
 8007e84:	f1a7 0708 	sub.w	r7, r7, #8
 8007e88:	ddeb      	ble.n	8007e62 <__kernel_rem_pio2+0xaa>
 8007e8a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007e8e:	3508      	adds	r5, #8
 8007e90:	ecab 7b02 	vstmia	fp!, {d7}
 8007e94:	f108 0801 	add.w	r8, r8, #1
 8007e98:	e7ca      	b.n	8007e30 <__kernel_rem_pio2+0x78>
 8007e9a:	9b04      	ldr	r3, [sp, #16]
 8007e9c:	aa0c      	add	r2, sp, #48	; 0x30
 8007e9e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007ea2:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ea4:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8007ea6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007eaa:	9c04      	ldr	r4, [sp, #16]
 8007eac:	930a      	str	r3, [sp, #40]	; 0x28
 8007eae:	ab98      	add	r3, sp, #608	; 0x260
 8007eb0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007eb4:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8007eb8:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8007ebc:	f8cd b008 	str.w	fp, [sp, #8]
 8007ec0:	4625      	mov	r5, r4
 8007ec2:	2d00      	cmp	r5, #0
 8007ec4:	dc78      	bgt.n	8007fb8 <__kernel_rem_pio2+0x200>
 8007ec6:	ec47 6b10 	vmov	d0, r6, r7
 8007eca:	4650      	mov	r0, sl
 8007ecc:	f000 fc9c 	bl	8008808 <scalbn>
 8007ed0:	ec57 6b10 	vmov	r6, r7, d0
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007eda:	ee10 0a10 	vmov	r0, s0
 8007ede:	4639      	mov	r1, r7
 8007ee0:	f7f8 fb92 	bl	8000608 <__aeabi_dmul>
 8007ee4:	ec41 0b10 	vmov	d0, r0, r1
 8007ee8:	f000 fb7a 	bl	80085e0 <floor>
 8007eec:	4b7f      	ldr	r3, [pc, #508]	; (80080ec <__kernel_rem_pio2+0x334>)
 8007eee:	ec51 0b10 	vmov	r0, r1, d0
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f7f8 fb88 	bl	8000608 <__aeabi_dmul>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	460b      	mov	r3, r1
 8007efc:	4630      	mov	r0, r6
 8007efe:	4639      	mov	r1, r7
 8007f00:	f7f8 f9ca 	bl	8000298 <__aeabi_dsub>
 8007f04:	460f      	mov	r7, r1
 8007f06:	4606      	mov	r6, r0
 8007f08:	f7f8 fe2e 	bl	8000b68 <__aeabi_d2iz>
 8007f0c:	9007      	str	r0, [sp, #28]
 8007f0e:	f7f8 fb11 	bl	8000534 <__aeabi_i2d>
 8007f12:	4602      	mov	r2, r0
 8007f14:	460b      	mov	r3, r1
 8007f16:	4630      	mov	r0, r6
 8007f18:	4639      	mov	r1, r7
 8007f1a:	f7f8 f9bd 	bl	8000298 <__aeabi_dsub>
 8007f1e:	f1ba 0f00 	cmp.w	sl, #0
 8007f22:	4606      	mov	r6, r0
 8007f24:	460f      	mov	r7, r1
 8007f26:	dd70      	ble.n	800800a <__kernel_rem_pio2+0x252>
 8007f28:	1e62      	subs	r2, r4, #1
 8007f2a:	ab0c      	add	r3, sp, #48	; 0x30
 8007f2c:	9d07      	ldr	r5, [sp, #28]
 8007f2e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007f32:	f1ca 0118 	rsb	r1, sl, #24
 8007f36:	fa40 f301 	asr.w	r3, r0, r1
 8007f3a:	441d      	add	r5, r3
 8007f3c:	408b      	lsls	r3, r1
 8007f3e:	1ac0      	subs	r0, r0, r3
 8007f40:	ab0c      	add	r3, sp, #48	; 0x30
 8007f42:	9507      	str	r5, [sp, #28]
 8007f44:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007f48:	f1ca 0317 	rsb	r3, sl, #23
 8007f4c:	fa40 f303 	asr.w	r3, r0, r3
 8007f50:	9302      	str	r3, [sp, #8]
 8007f52:	9b02      	ldr	r3, [sp, #8]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	dd66      	ble.n	8008026 <__kernel_rem_pio2+0x26e>
 8007f58:	9b07      	ldr	r3, [sp, #28]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	3301      	adds	r3, #1
 8007f5e:	9307      	str	r3, [sp, #28]
 8007f60:	4615      	mov	r5, r2
 8007f62:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007f66:	4294      	cmp	r4, r2
 8007f68:	f300 8099 	bgt.w	800809e <__kernel_rem_pio2+0x2e6>
 8007f6c:	f1ba 0f00 	cmp.w	sl, #0
 8007f70:	dd07      	ble.n	8007f82 <__kernel_rem_pio2+0x1ca>
 8007f72:	f1ba 0f01 	cmp.w	sl, #1
 8007f76:	f000 80a5 	beq.w	80080c4 <__kernel_rem_pio2+0x30c>
 8007f7a:	f1ba 0f02 	cmp.w	sl, #2
 8007f7e:	f000 80c1 	beq.w	8008104 <__kernel_rem_pio2+0x34c>
 8007f82:	9b02      	ldr	r3, [sp, #8]
 8007f84:	2b02      	cmp	r3, #2
 8007f86:	d14e      	bne.n	8008026 <__kernel_rem_pio2+0x26e>
 8007f88:	4632      	mov	r2, r6
 8007f8a:	463b      	mov	r3, r7
 8007f8c:	4958      	ldr	r1, [pc, #352]	; (80080f0 <__kernel_rem_pio2+0x338>)
 8007f8e:	2000      	movs	r0, #0
 8007f90:	f7f8 f982 	bl	8000298 <__aeabi_dsub>
 8007f94:	4606      	mov	r6, r0
 8007f96:	460f      	mov	r7, r1
 8007f98:	2d00      	cmp	r5, #0
 8007f9a:	d044      	beq.n	8008026 <__kernel_rem_pio2+0x26e>
 8007f9c:	4650      	mov	r0, sl
 8007f9e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80080e0 <__kernel_rem_pio2+0x328>
 8007fa2:	f000 fc31 	bl	8008808 <scalbn>
 8007fa6:	4630      	mov	r0, r6
 8007fa8:	4639      	mov	r1, r7
 8007faa:	ec53 2b10 	vmov	r2, r3, d0
 8007fae:	f7f8 f973 	bl	8000298 <__aeabi_dsub>
 8007fb2:	4606      	mov	r6, r0
 8007fb4:	460f      	mov	r7, r1
 8007fb6:	e036      	b.n	8008026 <__kernel_rem_pio2+0x26e>
 8007fb8:	4b4e      	ldr	r3, [pc, #312]	; (80080f4 <__kernel_rem_pio2+0x33c>)
 8007fba:	2200      	movs	r2, #0
 8007fbc:	4630      	mov	r0, r6
 8007fbe:	4639      	mov	r1, r7
 8007fc0:	f7f8 fb22 	bl	8000608 <__aeabi_dmul>
 8007fc4:	f7f8 fdd0 	bl	8000b68 <__aeabi_d2iz>
 8007fc8:	f7f8 fab4 	bl	8000534 <__aeabi_i2d>
 8007fcc:	4b4a      	ldr	r3, [pc, #296]	; (80080f8 <__kernel_rem_pio2+0x340>)
 8007fce:	2200      	movs	r2, #0
 8007fd0:	4680      	mov	r8, r0
 8007fd2:	4689      	mov	r9, r1
 8007fd4:	f7f8 fb18 	bl	8000608 <__aeabi_dmul>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	460b      	mov	r3, r1
 8007fdc:	4630      	mov	r0, r6
 8007fde:	4639      	mov	r1, r7
 8007fe0:	f7f8 f95a 	bl	8000298 <__aeabi_dsub>
 8007fe4:	f7f8 fdc0 	bl	8000b68 <__aeabi_d2iz>
 8007fe8:	9b02      	ldr	r3, [sp, #8]
 8007fea:	f843 0b04 	str.w	r0, [r3], #4
 8007fee:	3d01      	subs	r5, #1
 8007ff0:	9302      	str	r3, [sp, #8]
 8007ff2:	ab70      	add	r3, sp, #448	; 0x1c0
 8007ff4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ffc:	4640      	mov	r0, r8
 8007ffe:	4649      	mov	r1, r9
 8008000:	f7f8 f94c 	bl	800029c <__adddf3>
 8008004:	4606      	mov	r6, r0
 8008006:	460f      	mov	r7, r1
 8008008:	e75b      	b.n	8007ec2 <__kernel_rem_pio2+0x10a>
 800800a:	d105      	bne.n	8008018 <__kernel_rem_pio2+0x260>
 800800c:	1e63      	subs	r3, r4, #1
 800800e:	aa0c      	add	r2, sp, #48	; 0x30
 8008010:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008014:	15c3      	asrs	r3, r0, #23
 8008016:	e79b      	b.n	8007f50 <__kernel_rem_pio2+0x198>
 8008018:	4b38      	ldr	r3, [pc, #224]	; (80080fc <__kernel_rem_pio2+0x344>)
 800801a:	2200      	movs	r2, #0
 800801c:	f7f8 fd7a 	bl	8000b14 <__aeabi_dcmpge>
 8008020:	2800      	cmp	r0, #0
 8008022:	d139      	bne.n	8008098 <__kernel_rem_pio2+0x2e0>
 8008024:	9002      	str	r0, [sp, #8]
 8008026:	2200      	movs	r2, #0
 8008028:	2300      	movs	r3, #0
 800802a:	4630      	mov	r0, r6
 800802c:	4639      	mov	r1, r7
 800802e:	f7f8 fd53 	bl	8000ad8 <__aeabi_dcmpeq>
 8008032:	2800      	cmp	r0, #0
 8008034:	f000 80b4 	beq.w	80081a0 <__kernel_rem_pio2+0x3e8>
 8008038:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 800803c:	465b      	mov	r3, fp
 800803e:	2200      	movs	r2, #0
 8008040:	9904      	ldr	r1, [sp, #16]
 8008042:	428b      	cmp	r3, r1
 8008044:	da65      	bge.n	8008112 <__kernel_rem_pio2+0x35a>
 8008046:	2a00      	cmp	r2, #0
 8008048:	d07b      	beq.n	8008142 <__kernel_rem_pio2+0x38a>
 800804a:	ab0c      	add	r3, sp, #48	; 0x30
 800804c:	f1aa 0a18 	sub.w	sl, sl, #24
 8008050:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8008054:	2b00      	cmp	r3, #0
 8008056:	f000 80a0 	beq.w	800819a <__kernel_rem_pio2+0x3e2>
 800805a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80080e0 <__kernel_rem_pio2+0x328>
 800805e:	4650      	mov	r0, sl
 8008060:	f000 fbd2 	bl	8008808 <scalbn>
 8008064:	4f23      	ldr	r7, [pc, #140]	; (80080f4 <__kernel_rem_pio2+0x33c>)
 8008066:	ec55 4b10 	vmov	r4, r5, d0
 800806a:	46d8      	mov	r8, fp
 800806c:	2600      	movs	r6, #0
 800806e:	f1b8 0f00 	cmp.w	r8, #0
 8008072:	f280 80cf 	bge.w	8008214 <__kernel_rem_pio2+0x45c>
 8008076:	ed9f 8b18 	vldr	d8, [pc, #96]	; 80080d8 <__kernel_rem_pio2+0x320>
 800807a:	465f      	mov	r7, fp
 800807c:	f04f 0800 	mov.w	r8, #0
 8008080:	2f00      	cmp	r7, #0
 8008082:	f2c0 80fd 	blt.w	8008280 <__kernel_rem_pio2+0x4c8>
 8008086:	ab70      	add	r3, sp, #448	; 0x1c0
 8008088:	f8df a074 	ldr.w	sl, [pc, #116]	; 8008100 <__kernel_rem_pio2+0x348>
 800808c:	ec55 4b18 	vmov	r4, r5, d8
 8008090:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8008094:	2600      	movs	r6, #0
 8008096:	e0e5      	b.n	8008264 <__kernel_rem_pio2+0x4ac>
 8008098:	2302      	movs	r3, #2
 800809a:	9302      	str	r3, [sp, #8]
 800809c:	e75c      	b.n	8007f58 <__kernel_rem_pio2+0x1a0>
 800809e:	f8db 3000 	ldr.w	r3, [fp]
 80080a2:	b955      	cbnz	r5, 80080ba <__kernel_rem_pio2+0x302>
 80080a4:	b123      	cbz	r3, 80080b0 <__kernel_rem_pio2+0x2f8>
 80080a6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80080aa:	f8cb 3000 	str.w	r3, [fp]
 80080ae:	2301      	movs	r3, #1
 80080b0:	3201      	adds	r2, #1
 80080b2:	f10b 0b04 	add.w	fp, fp, #4
 80080b6:	461d      	mov	r5, r3
 80080b8:	e755      	b.n	8007f66 <__kernel_rem_pio2+0x1ae>
 80080ba:	1acb      	subs	r3, r1, r3
 80080bc:	f8cb 3000 	str.w	r3, [fp]
 80080c0:	462b      	mov	r3, r5
 80080c2:	e7f5      	b.n	80080b0 <__kernel_rem_pio2+0x2f8>
 80080c4:	1e62      	subs	r2, r4, #1
 80080c6:	ab0c      	add	r3, sp, #48	; 0x30
 80080c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080cc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80080d0:	a90c      	add	r1, sp, #48	; 0x30
 80080d2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80080d6:	e754      	b.n	8007f82 <__kernel_rem_pio2+0x1ca>
	...
 80080e4:	3ff00000 	.word	0x3ff00000
 80080e8:	08008b90 	.word	0x08008b90
 80080ec:	40200000 	.word	0x40200000
 80080f0:	3ff00000 	.word	0x3ff00000
 80080f4:	3e700000 	.word	0x3e700000
 80080f8:	41700000 	.word	0x41700000
 80080fc:	3fe00000 	.word	0x3fe00000
 8008100:	08008b50 	.word	0x08008b50
 8008104:	1e62      	subs	r2, r4, #1
 8008106:	ab0c      	add	r3, sp, #48	; 0x30
 8008108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800810c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008110:	e7de      	b.n	80080d0 <__kernel_rem_pio2+0x318>
 8008112:	a90c      	add	r1, sp, #48	; 0x30
 8008114:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008118:	3b01      	subs	r3, #1
 800811a:	430a      	orrs	r2, r1
 800811c:	e790      	b.n	8008040 <__kernel_rem_pio2+0x288>
 800811e:	3301      	adds	r3, #1
 8008120:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008124:	2900      	cmp	r1, #0
 8008126:	d0fa      	beq.n	800811e <__kernel_rem_pio2+0x366>
 8008128:	9a08      	ldr	r2, [sp, #32]
 800812a:	18e3      	adds	r3, r4, r3
 800812c:	18a6      	adds	r6, r4, r2
 800812e:	aa20      	add	r2, sp, #128	; 0x80
 8008130:	1c65      	adds	r5, r4, #1
 8008132:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8008136:	9302      	str	r3, [sp, #8]
 8008138:	9b02      	ldr	r3, [sp, #8]
 800813a:	42ab      	cmp	r3, r5
 800813c:	da04      	bge.n	8008148 <__kernel_rem_pio2+0x390>
 800813e:	461c      	mov	r4, r3
 8008140:	e6b5      	b.n	8007eae <__kernel_rem_pio2+0xf6>
 8008142:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008144:	2301      	movs	r3, #1
 8008146:	e7eb      	b.n	8008120 <__kernel_rem_pio2+0x368>
 8008148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800814a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800814e:	f7f8 f9f1 	bl	8000534 <__aeabi_i2d>
 8008152:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008158:	46b3      	mov	fp, r6
 800815a:	461c      	mov	r4, r3
 800815c:	2700      	movs	r7, #0
 800815e:	f04f 0800 	mov.w	r8, #0
 8008162:	f04f 0900 	mov.w	r9, #0
 8008166:	9b06      	ldr	r3, [sp, #24]
 8008168:	429f      	cmp	r7, r3
 800816a:	dd06      	ble.n	800817a <__kernel_rem_pio2+0x3c2>
 800816c:	ab70      	add	r3, sp, #448	; 0x1c0
 800816e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008172:	e9c3 8900 	strd	r8, r9, [r3]
 8008176:	3501      	adds	r5, #1
 8008178:	e7de      	b.n	8008138 <__kernel_rem_pio2+0x380>
 800817a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800817e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8008182:	f7f8 fa41 	bl	8000608 <__aeabi_dmul>
 8008186:	4602      	mov	r2, r0
 8008188:	460b      	mov	r3, r1
 800818a:	4640      	mov	r0, r8
 800818c:	4649      	mov	r1, r9
 800818e:	f7f8 f885 	bl	800029c <__adddf3>
 8008192:	3701      	adds	r7, #1
 8008194:	4680      	mov	r8, r0
 8008196:	4689      	mov	r9, r1
 8008198:	e7e5      	b.n	8008166 <__kernel_rem_pio2+0x3ae>
 800819a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800819e:	e754      	b.n	800804a <__kernel_rem_pio2+0x292>
 80081a0:	ec47 6b10 	vmov	d0, r6, r7
 80081a4:	f1ca 0000 	rsb	r0, sl, #0
 80081a8:	f000 fb2e 	bl	8008808 <scalbn>
 80081ac:	ec57 6b10 	vmov	r6, r7, d0
 80081b0:	4b9f      	ldr	r3, [pc, #636]	; (8008430 <__kernel_rem_pio2+0x678>)
 80081b2:	ee10 0a10 	vmov	r0, s0
 80081b6:	2200      	movs	r2, #0
 80081b8:	4639      	mov	r1, r7
 80081ba:	f7f8 fcab 	bl	8000b14 <__aeabi_dcmpge>
 80081be:	b300      	cbz	r0, 8008202 <__kernel_rem_pio2+0x44a>
 80081c0:	4b9c      	ldr	r3, [pc, #624]	; (8008434 <__kernel_rem_pio2+0x67c>)
 80081c2:	2200      	movs	r2, #0
 80081c4:	4630      	mov	r0, r6
 80081c6:	4639      	mov	r1, r7
 80081c8:	f7f8 fa1e 	bl	8000608 <__aeabi_dmul>
 80081cc:	f7f8 fccc 	bl	8000b68 <__aeabi_d2iz>
 80081d0:	4605      	mov	r5, r0
 80081d2:	f7f8 f9af 	bl	8000534 <__aeabi_i2d>
 80081d6:	4b96      	ldr	r3, [pc, #600]	; (8008430 <__kernel_rem_pio2+0x678>)
 80081d8:	2200      	movs	r2, #0
 80081da:	f7f8 fa15 	bl	8000608 <__aeabi_dmul>
 80081de:	460b      	mov	r3, r1
 80081e0:	4602      	mov	r2, r0
 80081e2:	4639      	mov	r1, r7
 80081e4:	4630      	mov	r0, r6
 80081e6:	f7f8 f857 	bl	8000298 <__aeabi_dsub>
 80081ea:	f7f8 fcbd 	bl	8000b68 <__aeabi_d2iz>
 80081ee:	f104 0b01 	add.w	fp, r4, #1
 80081f2:	ab0c      	add	r3, sp, #48	; 0x30
 80081f4:	f10a 0a18 	add.w	sl, sl, #24
 80081f8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80081fc:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8008200:	e72b      	b.n	800805a <__kernel_rem_pio2+0x2a2>
 8008202:	4630      	mov	r0, r6
 8008204:	4639      	mov	r1, r7
 8008206:	f7f8 fcaf 	bl	8000b68 <__aeabi_d2iz>
 800820a:	ab0c      	add	r3, sp, #48	; 0x30
 800820c:	46a3      	mov	fp, r4
 800820e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008212:	e722      	b.n	800805a <__kernel_rem_pio2+0x2a2>
 8008214:	ab70      	add	r3, sp, #448	; 0x1c0
 8008216:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800821a:	ab0c      	add	r3, sp, #48	; 0x30
 800821c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008220:	f7f8 f988 	bl	8000534 <__aeabi_i2d>
 8008224:	4622      	mov	r2, r4
 8008226:	462b      	mov	r3, r5
 8008228:	f7f8 f9ee 	bl	8000608 <__aeabi_dmul>
 800822c:	4632      	mov	r2, r6
 800822e:	e9c9 0100 	strd	r0, r1, [r9]
 8008232:	463b      	mov	r3, r7
 8008234:	4620      	mov	r0, r4
 8008236:	4629      	mov	r1, r5
 8008238:	f7f8 f9e6 	bl	8000608 <__aeabi_dmul>
 800823c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8008240:	4604      	mov	r4, r0
 8008242:	460d      	mov	r5, r1
 8008244:	e713      	b.n	800806e <__kernel_rem_pio2+0x2b6>
 8008246:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800824a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800824e:	f7f8 f9db 	bl	8000608 <__aeabi_dmul>
 8008252:	4602      	mov	r2, r0
 8008254:	460b      	mov	r3, r1
 8008256:	4620      	mov	r0, r4
 8008258:	4629      	mov	r1, r5
 800825a:	f7f8 f81f 	bl	800029c <__adddf3>
 800825e:	3601      	adds	r6, #1
 8008260:	4604      	mov	r4, r0
 8008262:	460d      	mov	r5, r1
 8008264:	9b04      	ldr	r3, [sp, #16]
 8008266:	429e      	cmp	r6, r3
 8008268:	dc01      	bgt.n	800826e <__kernel_rem_pio2+0x4b6>
 800826a:	45b0      	cmp	r8, r6
 800826c:	daeb      	bge.n	8008246 <__kernel_rem_pio2+0x48e>
 800826e:	ab48      	add	r3, sp, #288	; 0x120
 8008270:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008274:	e9c3 4500 	strd	r4, r5, [r3]
 8008278:	3f01      	subs	r7, #1
 800827a:	f108 0801 	add.w	r8, r8, #1
 800827e:	e6ff      	b.n	8008080 <__kernel_rem_pio2+0x2c8>
 8008280:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008282:	2b02      	cmp	r3, #2
 8008284:	dc0b      	bgt.n	800829e <__kernel_rem_pio2+0x4e6>
 8008286:	2b00      	cmp	r3, #0
 8008288:	dc6e      	bgt.n	8008368 <__kernel_rem_pio2+0x5b0>
 800828a:	d045      	beq.n	8008318 <__kernel_rem_pio2+0x560>
 800828c:	9b07      	ldr	r3, [sp, #28]
 800828e:	f003 0007 	and.w	r0, r3, #7
 8008292:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8008296:	ecbd 8b02 	vpop	{d8}
 800829a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800829e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80082a0:	2b03      	cmp	r3, #3
 80082a2:	d1f3      	bne.n	800828c <__kernel_rem_pio2+0x4d4>
 80082a4:	ab48      	add	r3, sp, #288	; 0x120
 80082a6:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 80082aa:	46d0      	mov	r8, sl
 80082ac:	46d9      	mov	r9, fp
 80082ae:	f1b9 0f00 	cmp.w	r9, #0
 80082b2:	f1a8 0808 	sub.w	r8, r8, #8
 80082b6:	dc64      	bgt.n	8008382 <__kernel_rem_pio2+0x5ca>
 80082b8:	465c      	mov	r4, fp
 80082ba:	2c01      	cmp	r4, #1
 80082bc:	f1aa 0a08 	sub.w	sl, sl, #8
 80082c0:	dc7e      	bgt.n	80083c0 <__kernel_rem_pio2+0x608>
 80082c2:	2000      	movs	r0, #0
 80082c4:	2100      	movs	r1, #0
 80082c6:	f1bb 0f01 	cmp.w	fp, #1
 80082ca:	f300 8097 	bgt.w	80083fc <__kernel_rem_pio2+0x644>
 80082ce:	9b02      	ldr	r3, [sp, #8]
 80082d0:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 80082d4:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80082d8:	2b00      	cmp	r3, #0
 80082da:	f040 8099 	bne.w	8008410 <__kernel_rem_pio2+0x658>
 80082de:	9b01      	ldr	r3, [sp, #4]
 80082e0:	e9c3 5600 	strd	r5, r6, [r3]
 80082e4:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80082e8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80082ec:	e7ce      	b.n	800828c <__kernel_rem_pio2+0x4d4>
 80082ee:	ab48      	add	r3, sp, #288	; 0x120
 80082f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80082f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f8:	f7f7 ffd0 	bl	800029c <__adddf3>
 80082fc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008300:	f1bb 0f00 	cmp.w	fp, #0
 8008304:	daf3      	bge.n	80082ee <__kernel_rem_pio2+0x536>
 8008306:	9b02      	ldr	r3, [sp, #8]
 8008308:	b113      	cbz	r3, 8008310 <__kernel_rem_pio2+0x558>
 800830a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800830e:	4619      	mov	r1, r3
 8008310:	9b01      	ldr	r3, [sp, #4]
 8008312:	e9c3 0100 	strd	r0, r1, [r3]
 8008316:	e7b9      	b.n	800828c <__kernel_rem_pio2+0x4d4>
 8008318:	2000      	movs	r0, #0
 800831a:	2100      	movs	r1, #0
 800831c:	e7f0      	b.n	8008300 <__kernel_rem_pio2+0x548>
 800831e:	ab48      	add	r3, sp, #288	; 0x120
 8008320:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008328:	f7f7 ffb8 	bl	800029c <__adddf3>
 800832c:	3c01      	subs	r4, #1
 800832e:	2c00      	cmp	r4, #0
 8008330:	daf5      	bge.n	800831e <__kernel_rem_pio2+0x566>
 8008332:	9b02      	ldr	r3, [sp, #8]
 8008334:	b1e3      	cbz	r3, 8008370 <__kernel_rem_pio2+0x5b8>
 8008336:	4602      	mov	r2, r0
 8008338:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800833c:	9c01      	ldr	r4, [sp, #4]
 800833e:	e9c4 2300 	strd	r2, r3, [r4]
 8008342:	4602      	mov	r2, r0
 8008344:	460b      	mov	r3, r1
 8008346:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800834a:	f7f7 ffa5 	bl	8000298 <__aeabi_dsub>
 800834e:	ad4a      	add	r5, sp, #296	; 0x128
 8008350:	2401      	movs	r4, #1
 8008352:	45a3      	cmp	fp, r4
 8008354:	da0f      	bge.n	8008376 <__kernel_rem_pio2+0x5be>
 8008356:	9b02      	ldr	r3, [sp, #8]
 8008358:	b113      	cbz	r3, 8008360 <__kernel_rem_pio2+0x5a8>
 800835a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800835e:	4619      	mov	r1, r3
 8008360:	9b01      	ldr	r3, [sp, #4]
 8008362:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008366:	e791      	b.n	800828c <__kernel_rem_pio2+0x4d4>
 8008368:	465c      	mov	r4, fp
 800836a:	2000      	movs	r0, #0
 800836c:	2100      	movs	r1, #0
 800836e:	e7de      	b.n	800832e <__kernel_rem_pio2+0x576>
 8008370:	4602      	mov	r2, r0
 8008372:	460b      	mov	r3, r1
 8008374:	e7e2      	b.n	800833c <__kernel_rem_pio2+0x584>
 8008376:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800837a:	f7f7 ff8f 	bl	800029c <__adddf3>
 800837e:	3401      	adds	r4, #1
 8008380:	e7e7      	b.n	8008352 <__kernel_rem_pio2+0x59a>
 8008382:	e9d8 4500 	ldrd	r4, r5, [r8]
 8008386:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800838a:	4620      	mov	r0, r4
 800838c:	4632      	mov	r2, r6
 800838e:	463b      	mov	r3, r7
 8008390:	4629      	mov	r1, r5
 8008392:	f7f7 ff83 	bl	800029c <__adddf3>
 8008396:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800839a:	4602      	mov	r2, r0
 800839c:	460b      	mov	r3, r1
 800839e:	4620      	mov	r0, r4
 80083a0:	4629      	mov	r1, r5
 80083a2:	f7f7 ff79 	bl	8000298 <__aeabi_dsub>
 80083a6:	4632      	mov	r2, r6
 80083a8:	463b      	mov	r3, r7
 80083aa:	f7f7 ff77 	bl	800029c <__adddf3>
 80083ae:	ed9d 7b04 	vldr	d7, [sp, #16]
 80083b2:	e9c8 0102 	strd	r0, r1, [r8, #8]
 80083b6:	ed88 7b00 	vstr	d7, [r8]
 80083ba:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80083be:	e776      	b.n	80082ae <__kernel_rem_pio2+0x4f6>
 80083c0:	e9da 8900 	ldrd	r8, r9, [sl]
 80083c4:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80083c8:	4640      	mov	r0, r8
 80083ca:	4632      	mov	r2, r6
 80083cc:	463b      	mov	r3, r7
 80083ce:	4649      	mov	r1, r9
 80083d0:	f7f7 ff64 	bl	800029c <__adddf3>
 80083d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80083d8:	4602      	mov	r2, r0
 80083da:	460b      	mov	r3, r1
 80083dc:	4640      	mov	r0, r8
 80083de:	4649      	mov	r1, r9
 80083e0:	f7f7 ff5a 	bl	8000298 <__aeabi_dsub>
 80083e4:	4632      	mov	r2, r6
 80083e6:	463b      	mov	r3, r7
 80083e8:	f7f7 ff58 	bl	800029c <__adddf3>
 80083ec:	ed9d 7b04 	vldr	d7, [sp, #16]
 80083f0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80083f4:	ed8a 7b00 	vstr	d7, [sl]
 80083f8:	3c01      	subs	r4, #1
 80083fa:	e75e      	b.n	80082ba <__kernel_rem_pio2+0x502>
 80083fc:	ab48      	add	r3, sp, #288	; 0x120
 80083fe:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008406:	f7f7 ff49 	bl	800029c <__adddf3>
 800840a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800840e:	e75a      	b.n	80082c6 <__kernel_rem_pio2+0x50e>
 8008410:	9b01      	ldr	r3, [sp, #4]
 8008412:	9a01      	ldr	r2, [sp, #4]
 8008414:	601d      	str	r5, [r3, #0]
 8008416:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800841a:	605c      	str	r4, [r3, #4]
 800841c:	609f      	str	r7, [r3, #8]
 800841e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8008422:	60d3      	str	r3, [r2, #12]
 8008424:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008428:	6110      	str	r0, [r2, #16]
 800842a:	6153      	str	r3, [r2, #20]
 800842c:	e72e      	b.n	800828c <__kernel_rem_pio2+0x4d4>
 800842e:	bf00      	nop
 8008430:	41700000 	.word	0x41700000
 8008434:	3e700000 	.word	0x3e700000

08008438 <__kernel_sin>:
 8008438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800843c:	ed2d 8b04 	vpush	{d8-d9}
 8008440:	eeb0 8a41 	vmov.f32	s16, s2
 8008444:	eef0 8a61 	vmov.f32	s17, s3
 8008448:	ec55 4b10 	vmov	r4, r5, d0
 800844c:	b083      	sub	sp, #12
 800844e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008452:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8008456:	9001      	str	r0, [sp, #4]
 8008458:	da06      	bge.n	8008468 <__kernel_sin+0x30>
 800845a:	ee10 0a10 	vmov	r0, s0
 800845e:	4629      	mov	r1, r5
 8008460:	f7f8 fb82 	bl	8000b68 <__aeabi_d2iz>
 8008464:	2800      	cmp	r0, #0
 8008466:	d051      	beq.n	800850c <__kernel_sin+0xd4>
 8008468:	4622      	mov	r2, r4
 800846a:	462b      	mov	r3, r5
 800846c:	4620      	mov	r0, r4
 800846e:	4629      	mov	r1, r5
 8008470:	f7f8 f8ca 	bl	8000608 <__aeabi_dmul>
 8008474:	4682      	mov	sl, r0
 8008476:	468b      	mov	fp, r1
 8008478:	4602      	mov	r2, r0
 800847a:	460b      	mov	r3, r1
 800847c:	4620      	mov	r0, r4
 800847e:	4629      	mov	r1, r5
 8008480:	f7f8 f8c2 	bl	8000608 <__aeabi_dmul>
 8008484:	a341      	add	r3, pc, #260	; (adr r3, 800858c <__kernel_sin+0x154>)
 8008486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800848a:	4680      	mov	r8, r0
 800848c:	4689      	mov	r9, r1
 800848e:	4650      	mov	r0, sl
 8008490:	4659      	mov	r1, fp
 8008492:	f7f8 f8b9 	bl	8000608 <__aeabi_dmul>
 8008496:	a33f      	add	r3, pc, #252	; (adr r3, 8008594 <__kernel_sin+0x15c>)
 8008498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849c:	f7f7 fefc 	bl	8000298 <__aeabi_dsub>
 80084a0:	4652      	mov	r2, sl
 80084a2:	465b      	mov	r3, fp
 80084a4:	f7f8 f8b0 	bl	8000608 <__aeabi_dmul>
 80084a8:	a33c      	add	r3, pc, #240	; (adr r3, 800859c <__kernel_sin+0x164>)
 80084aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ae:	f7f7 fef5 	bl	800029c <__adddf3>
 80084b2:	4652      	mov	r2, sl
 80084b4:	465b      	mov	r3, fp
 80084b6:	f7f8 f8a7 	bl	8000608 <__aeabi_dmul>
 80084ba:	a33a      	add	r3, pc, #232	; (adr r3, 80085a4 <__kernel_sin+0x16c>)
 80084bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c0:	f7f7 feea 	bl	8000298 <__aeabi_dsub>
 80084c4:	4652      	mov	r2, sl
 80084c6:	465b      	mov	r3, fp
 80084c8:	f7f8 f89e 	bl	8000608 <__aeabi_dmul>
 80084cc:	a337      	add	r3, pc, #220	; (adr r3, 80085ac <__kernel_sin+0x174>)
 80084ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d2:	f7f7 fee3 	bl	800029c <__adddf3>
 80084d6:	9b01      	ldr	r3, [sp, #4]
 80084d8:	4606      	mov	r6, r0
 80084da:	460f      	mov	r7, r1
 80084dc:	b9eb      	cbnz	r3, 800851a <__kernel_sin+0xe2>
 80084de:	4602      	mov	r2, r0
 80084e0:	460b      	mov	r3, r1
 80084e2:	4650      	mov	r0, sl
 80084e4:	4659      	mov	r1, fp
 80084e6:	f7f8 f88f 	bl	8000608 <__aeabi_dmul>
 80084ea:	a325      	add	r3, pc, #148	; (adr r3, 8008580 <__kernel_sin+0x148>)
 80084ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f0:	f7f7 fed2 	bl	8000298 <__aeabi_dsub>
 80084f4:	4642      	mov	r2, r8
 80084f6:	464b      	mov	r3, r9
 80084f8:	f7f8 f886 	bl	8000608 <__aeabi_dmul>
 80084fc:	4602      	mov	r2, r0
 80084fe:	460b      	mov	r3, r1
 8008500:	4620      	mov	r0, r4
 8008502:	4629      	mov	r1, r5
 8008504:	f7f7 feca 	bl	800029c <__adddf3>
 8008508:	4604      	mov	r4, r0
 800850a:	460d      	mov	r5, r1
 800850c:	ec45 4b10 	vmov	d0, r4, r5
 8008510:	b003      	add	sp, #12
 8008512:	ecbd 8b04 	vpop	{d8-d9}
 8008516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800851a:	4b1b      	ldr	r3, [pc, #108]	; (8008588 <__kernel_sin+0x150>)
 800851c:	ec51 0b18 	vmov	r0, r1, d8
 8008520:	2200      	movs	r2, #0
 8008522:	f7f8 f871 	bl	8000608 <__aeabi_dmul>
 8008526:	4632      	mov	r2, r6
 8008528:	ec41 0b19 	vmov	d9, r0, r1
 800852c:	463b      	mov	r3, r7
 800852e:	4640      	mov	r0, r8
 8008530:	4649      	mov	r1, r9
 8008532:	f7f8 f869 	bl	8000608 <__aeabi_dmul>
 8008536:	4602      	mov	r2, r0
 8008538:	460b      	mov	r3, r1
 800853a:	ec51 0b19 	vmov	r0, r1, d9
 800853e:	f7f7 feab 	bl	8000298 <__aeabi_dsub>
 8008542:	4652      	mov	r2, sl
 8008544:	465b      	mov	r3, fp
 8008546:	f7f8 f85f 	bl	8000608 <__aeabi_dmul>
 800854a:	ec53 2b18 	vmov	r2, r3, d8
 800854e:	f7f7 fea3 	bl	8000298 <__aeabi_dsub>
 8008552:	a30b      	add	r3, pc, #44	; (adr r3, 8008580 <__kernel_sin+0x148>)
 8008554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008558:	4606      	mov	r6, r0
 800855a:	460f      	mov	r7, r1
 800855c:	4640      	mov	r0, r8
 800855e:	4649      	mov	r1, r9
 8008560:	f7f8 f852 	bl	8000608 <__aeabi_dmul>
 8008564:	4602      	mov	r2, r0
 8008566:	460b      	mov	r3, r1
 8008568:	4630      	mov	r0, r6
 800856a:	4639      	mov	r1, r7
 800856c:	f7f7 fe96 	bl	800029c <__adddf3>
 8008570:	4602      	mov	r2, r0
 8008572:	460b      	mov	r3, r1
 8008574:	4620      	mov	r0, r4
 8008576:	4629      	mov	r1, r5
 8008578:	f7f7 fe8e 	bl	8000298 <__aeabi_dsub>
 800857c:	e7c4      	b.n	8008508 <__kernel_sin+0xd0>
 800857e:	bf00      	nop
 8008580:	55555549 	.word	0x55555549
 8008584:	3fc55555 	.word	0x3fc55555
 8008588:	3fe00000 	.word	0x3fe00000
 800858c:	5acfd57c 	.word	0x5acfd57c
 8008590:	3de5d93a 	.word	0x3de5d93a
 8008594:	8a2b9ceb 	.word	0x8a2b9ceb
 8008598:	3e5ae5e6 	.word	0x3e5ae5e6
 800859c:	57b1fe7d 	.word	0x57b1fe7d
 80085a0:	3ec71de3 	.word	0x3ec71de3
 80085a4:	19c161d5 	.word	0x19c161d5
 80085a8:	3f2a01a0 	.word	0x3f2a01a0
 80085ac:	1110f8a6 	.word	0x1110f8a6
 80085b0:	3f811111 	.word	0x3f811111

080085b4 <fabs>:
 80085b4:	ec51 0b10 	vmov	r0, r1, d0
 80085b8:	ee10 2a10 	vmov	r2, s0
 80085bc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80085c0:	ec43 2b10 	vmov	d0, r2, r3
 80085c4:	4770      	bx	lr

080085c6 <finite>:
 80085c6:	b082      	sub	sp, #8
 80085c8:	ed8d 0b00 	vstr	d0, [sp]
 80085cc:	9801      	ldr	r0, [sp, #4]
 80085ce:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80085d2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80085d6:	0fc0      	lsrs	r0, r0, #31
 80085d8:	b002      	add	sp, #8
 80085da:	4770      	bx	lr
 80085dc:	0000      	movs	r0, r0
	...

080085e0 <floor>:
 80085e0:	ec51 0b10 	vmov	r0, r1, d0
 80085e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085e8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80085ec:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80085f0:	2e13      	cmp	r6, #19
 80085f2:	ee10 5a10 	vmov	r5, s0
 80085f6:	ee10 8a10 	vmov	r8, s0
 80085fa:	460c      	mov	r4, r1
 80085fc:	dc32      	bgt.n	8008664 <floor+0x84>
 80085fe:	2e00      	cmp	r6, #0
 8008600:	da14      	bge.n	800862c <floor+0x4c>
 8008602:	a333      	add	r3, pc, #204	; (adr r3, 80086d0 <floor+0xf0>)
 8008604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008608:	f7f7 fe48 	bl	800029c <__adddf3>
 800860c:	2200      	movs	r2, #0
 800860e:	2300      	movs	r3, #0
 8008610:	f7f8 fa8a 	bl	8000b28 <__aeabi_dcmpgt>
 8008614:	b138      	cbz	r0, 8008626 <floor+0x46>
 8008616:	2c00      	cmp	r4, #0
 8008618:	da57      	bge.n	80086ca <floor+0xea>
 800861a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800861e:	431d      	orrs	r5, r3
 8008620:	d001      	beq.n	8008626 <floor+0x46>
 8008622:	4c2d      	ldr	r4, [pc, #180]	; (80086d8 <floor+0xf8>)
 8008624:	2500      	movs	r5, #0
 8008626:	4621      	mov	r1, r4
 8008628:	4628      	mov	r0, r5
 800862a:	e025      	b.n	8008678 <floor+0x98>
 800862c:	4f2b      	ldr	r7, [pc, #172]	; (80086dc <floor+0xfc>)
 800862e:	4137      	asrs	r7, r6
 8008630:	ea01 0307 	and.w	r3, r1, r7
 8008634:	4303      	orrs	r3, r0
 8008636:	d01f      	beq.n	8008678 <floor+0x98>
 8008638:	a325      	add	r3, pc, #148	; (adr r3, 80086d0 <floor+0xf0>)
 800863a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800863e:	f7f7 fe2d 	bl	800029c <__adddf3>
 8008642:	2200      	movs	r2, #0
 8008644:	2300      	movs	r3, #0
 8008646:	f7f8 fa6f 	bl	8000b28 <__aeabi_dcmpgt>
 800864a:	2800      	cmp	r0, #0
 800864c:	d0eb      	beq.n	8008626 <floor+0x46>
 800864e:	2c00      	cmp	r4, #0
 8008650:	bfbe      	ittt	lt
 8008652:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008656:	fa43 f606 	asrlt.w	r6, r3, r6
 800865a:	19a4      	addlt	r4, r4, r6
 800865c:	ea24 0407 	bic.w	r4, r4, r7
 8008660:	2500      	movs	r5, #0
 8008662:	e7e0      	b.n	8008626 <floor+0x46>
 8008664:	2e33      	cmp	r6, #51	; 0x33
 8008666:	dd0b      	ble.n	8008680 <floor+0xa0>
 8008668:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800866c:	d104      	bne.n	8008678 <floor+0x98>
 800866e:	ee10 2a10 	vmov	r2, s0
 8008672:	460b      	mov	r3, r1
 8008674:	f7f7 fe12 	bl	800029c <__adddf3>
 8008678:	ec41 0b10 	vmov	d0, r0, r1
 800867c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008680:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8008684:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008688:	fa23 f707 	lsr.w	r7, r3, r7
 800868c:	4207      	tst	r7, r0
 800868e:	d0f3      	beq.n	8008678 <floor+0x98>
 8008690:	a30f      	add	r3, pc, #60	; (adr r3, 80086d0 <floor+0xf0>)
 8008692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008696:	f7f7 fe01 	bl	800029c <__adddf3>
 800869a:	2200      	movs	r2, #0
 800869c:	2300      	movs	r3, #0
 800869e:	f7f8 fa43 	bl	8000b28 <__aeabi_dcmpgt>
 80086a2:	2800      	cmp	r0, #0
 80086a4:	d0bf      	beq.n	8008626 <floor+0x46>
 80086a6:	2c00      	cmp	r4, #0
 80086a8:	da02      	bge.n	80086b0 <floor+0xd0>
 80086aa:	2e14      	cmp	r6, #20
 80086ac:	d103      	bne.n	80086b6 <floor+0xd6>
 80086ae:	3401      	adds	r4, #1
 80086b0:	ea25 0507 	bic.w	r5, r5, r7
 80086b4:	e7b7      	b.n	8008626 <floor+0x46>
 80086b6:	2301      	movs	r3, #1
 80086b8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80086bc:	fa03 f606 	lsl.w	r6, r3, r6
 80086c0:	4435      	add	r5, r6
 80086c2:	4545      	cmp	r5, r8
 80086c4:	bf38      	it	cc
 80086c6:	18e4      	addcc	r4, r4, r3
 80086c8:	e7f2      	b.n	80086b0 <floor+0xd0>
 80086ca:	2500      	movs	r5, #0
 80086cc:	462c      	mov	r4, r5
 80086ce:	e7aa      	b.n	8008626 <floor+0x46>
 80086d0:	8800759c 	.word	0x8800759c
 80086d4:	7e37e43c 	.word	0x7e37e43c
 80086d8:	bff00000 	.word	0xbff00000
 80086dc:	000fffff 	.word	0x000fffff

080086e0 <nan>:
 80086e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80086e8 <nan+0x8>
 80086e4:	4770      	bx	lr
 80086e6:	bf00      	nop
 80086e8:	00000000 	.word	0x00000000
 80086ec:	7ff80000 	.word	0x7ff80000

080086f0 <rint>:
 80086f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80086f2:	ec51 0b10 	vmov	r0, r1, d0
 80086f6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80086fa:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80086fe:	2e13      	cmp	r6, #19
 8008700:	ee10 4a10 	vmov	r4, s0
 8008704:	460b      	mov	r3, r1
 8008706:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800870a:	dc58      	bgt.n	80087be <rint+0xce>
 800870c:	2e00      	cmp	r6, #0
 800870e:	da2b      	bge.n	8008768 <rint+0x78>
 8008710:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8008714:	4302      	orrs	r2, r0
 8008716:	d023      	beq.n	8008760 <rint+0x70>
 8008718:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800871c:	4302      	orrs	r2, r0
 800871e:	4254      	negs	r4, r2
 8008720:	4314      	orrs	r4, r2
 8008722:	0c4b      	lsrs	r3, r1, #17
 8008724:	0b24      	lsrs	r4, r4, #12
 8008726:	045b      	lsls	r3, r3, #17
 8008728:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800872c:	ea44 0103 	orr.w	r1, r4, r3
 8008730:	4b32      	ldr	r3, [pc, #200]	; (80087fc <rint+0x10c>)
 8008732:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008736:	e9d3 6700 	ldrd	r6, r7, [r3]
 800873a:	4602      	mov	r2, r0
 800873c:	460b      	mov	r3, r1
 800873e:	4630      	mov	r0, r6
 8008740:	4639      	mov	r1, r7
 8008742:	f7f7 fdab 	bl	800029c <__adddf3>
 8008746:	e9cd 0100 	strd	r0, r1, [sp]
 800874a:	463b      	mov	r3, r7
 800874c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008750:	4632      	mov	r2, r6
 8008752:	f7f7 fda1 	bl	8000298 <__aeabi_dsub>
 8008756:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800875a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800875e:	4639      	mov	r1, r7
 8008760:	ec41 0b10 	vmov	d0, r0, r1
 8008764:	b003      	add	sp, #12
 8008766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008768:	4a25      	ldr	r2, [pc, #148]	; (8008800 <rint+0x110>)
 800876a:	4132      	asrs	r2, r6
 800876c:	ea01 0702 	and.w	r7, r1, r2
 8008770:	4307      	orrs	r7, r0
 8008772:	d0f5      	beq.n	8008760 <rint+0x70>
 8008774:	0851      	lsrs	r1, r2, #1
 8008776:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800877a:	4314      	orrs	r4, r2
 800877c:	d00c      	beq.n	8008798 <rint+0xa8>
 800877e:	ea23 0201 	bic.w	r2, r3, r1
 8008782:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008786:	2e13      	cmp	r6, #19
 8008788:	fa43 f606 	asr.w	r6, r3, r6
 800878c:	bf0c      	ite	eq
 800878e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8008792:	2400      	movne	r4, #0
 8008794:	ea42 0306 	orr.w	r3, r2, r6
 8008798:	4918      	ldr	r1, [pc, #96]	; (80087fc <rint+0x10c>)
 800879a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800879e:	4622      	mov	r2, r4
 80087a0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80087a4:	4620      	mov	r0, r4
 80087a6:	4629      	mov	r1, r5
 80087a8:	f7f7 fd78 	bl	800029c <__adddf3>
 80087ac:	e9cd 0100 	strd	r0, r1, [sp]
 80087b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80087b4:	4622      	mov	r2, r4
 80087b6:	462b      	mov	r3, r5
 80087b8:	f7f7 fd6e 	bl	8000298 <__aeabi_dsub>
 80087bc:	e7d0      	b.n	8008760 <rint+0x70>
 80087be:	2e33      	cmp	r6, #51	; 0x33
 80087c0:	dd07      	ble.n	80087d2 <rint+0xe2>
 80087c2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80087c6:	d1cb      	bne.n	8008760 <rint+0x70>
 80087c8:	ee10 2a10 	vmov	r2, s0
 80087cc:	f7f7 fd66 	bl	800029c <__adddf3>
 80087d0:	e7c6      	b.n	8008760 <rint+0x70>
 80087d2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80087d6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80087da:	40d6      	lsrs	r6, r2
 80087dc:	4230      	tst	r0, r6
 80087de:	d0bf      	beq.n	8008760 <rint+0x70>
 80087e0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 80087e4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 80087e8:	bf1f      	itttt	ne
 80087ea:	ea24 0101 	bicne.w	r1, r4, r1
 80087ee:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80087f2:	fa44 f202 	asrne.w	r2, r4, r2
 80087f6:	ea41 0402 	orrne.w	r4, r1, r2
 80087fa:	e7cd      	b.n	8008798 <rint+0xa8>
 80087fc:	08008ba0 	.word	0x08008ba0
 8008800:	000fffff 	.word	0x000fffff
 8008804:	00000000 	.word	0x00000000

08008808 <scalbn>:
 8008808:	b570      	push	{r4, r5, r6, lr}
 800880a:	ec55 4b10 	vmov	r4, r5, d0
 800880e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008812:	4606      	mov	r6, r0
 8008814:	462b      	mov	r3, r5
 8008816:	b99a      	cbnz	r2, 8008840 <scalbn+0x38>
 8008818:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800881c:	4323      	orrs	r3, r4
 800881e:	d036      	beq.n	800888e <scalbn+0x86>
 8008820:	4b39      	ldr	r3, [pc, #228]	; (8008908 <scalbn+0x100>)
 8008822:	4629      	mov	r1, r5
 8008824:	ee10 0a10 	vmov	r0, s0
 8008828:	2200      	movs	r2, #0
 800882a:	f7f7 feed 	bl	8000608 <__aeabi_dmul>
 800882e:	4b37      	ldr	r3, [pc, #220]	; (800890c <scalbn+0x104>)
 8008830:	429e      	cmp	r6, r3
 8008832:	4604      	mov	r4, r0
 8008834:	460d      	mov	r5, r1
 8008836:	da10      	bge.n	800885a <scalbn+0x52>
 8008838:	a32b      	add	r3, pc, #172	; (adr r3, 80088e8 <scalbn+0xe0>)
 800883a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800883e:	e03a      	b.n	80088b6 <scalbn+0xae>
 8008840:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008844:	428a      	cmp	r2, r1
 8008846:	d10c      	bne.n	8008862 <scalbn+0x5a>
 8008848:	ee10 2a10 	vmov	r2, s0
 800884c:	4620      	mov	r0, r4
 800884e:	4629      	mov	r1, r5
 8008850:	f7f7 fd24 	bl	800029c <__adddf3>
 8008854:	4604      	mov	r4, r0
 8008856:	460d      	mov	r5, r1
 8008858:	e019      	b.n	800888e <scalbn+0x86>
 800885a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800885e:	460b      	mov	r3, r1
 8008860:	3a36      	subs	r2, #54	; 0x36
 8008862:	4432      	add	r2, r6
 8008864:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008868:	428a      	cmp	r2, r1
 800886a:	dd08      	ble.n	800887e <scalbn+0x76>
 800886c:	2d00      	cmp	r5, #0
 800886e:	a120      	add	r1, pc, #128	; (adr r1, 80088f0 <scalbn+0xe8>)
 8008870:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008874:	da1c      	bge.n	80088b0 <scalbn+0xa8>
 8008876:	a120      	add	r1, pc, #128	; (adr r1, 80088f8 <scalbn+0xf0>)
 8008878:	e9d1 0100 	ldrd	r0, r1, [r1]
 800887c:	e018      	b.n	80088b0 <scalbn+0xa8>
 800887e:	2a00      	cmp	r2, #0
 8008880:	dd08      	ble.n	8008894 <scalbn+0x8c>
 8008882:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008886:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800888a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800888e:	ec45 4b10 	vmov	d0, r4, r5
 8008892:	bd70      	pop	{r4, r5, r6, pc}
 8008894:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008898:	da19      	bge.n	80088ce <scalbn+0xc6>
 800889a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800889e:	429e      	cmp	r6, r3
 80088a0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80088a4:	dd0a      	ble.n	80088bc <scalbn+0xb4>
 80088a6:	a112      	add	r1, pc, #72	; (adr r1, 80088f0 <scalbn+0xe8>)
 80088a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d1e2      	bne.n	8008876 <scalbn+0x6e>
 80088b0:	a30f      	add	r3, pc, #60	; (adr r3, 80088f0 <scalbn+0xe8>)
 80088b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b6:	f7f7 fea7 	bl	8000608 <__aeabi_dmul>
 80088ba:	e7cb      	b.n	8008854 <scalbn+0x4c>
 80088bc:	a10a      	add	r1, pc, #40	; (adr r1, 80088e8 <scalbn+0xe0>)
 80088be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d0b8      	beq.n	8008838 <scalbn+0x30>
 80088c6:	a10e      	add	r1, pc, #56	; (adr r1, 8008900 <scalbn+0xf8>)
 80088c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088cc:	e7b4      	b.n	8008838 <scalbn+0x30>
 80088ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80088d2:	3236      	adds	r2, #54	; 0x36
 80088d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80088d8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80088dc:	4620      	mov	r0, r4
 80088de:	4b0c      	ldr	r3, [pc, #48]	; (8008910 <scalbn+0x108>)
 80088e0:	2200      	movs	r2, #0
 80088e2:	e7e8      	b.n	80088b6 <scalbn+0xae>
 80088e4:	f3af 8000 	nop.w
 80088e8:	c2f8f359 	.word	0xc2f8f359
 80088ec:	01a56e1f 	.word	0x01a56e1f
 80088f0:	8800759c 	.word	0x8800759c
 80088f4:	7e37e43c 	.word	0x7e37e43c
 80088f8:	8800759c 	.word	0x8800759c
 80088fc:	fe37e43c 	.word	0xfe37e43c
 8008900:	c2f8f359 	.word	0xc2f8f359
 8008904:	81a56e1f 	.word	0x81a56e1f
 8008908:	43500000 	.word	0x43500000
 800890c:	ffff3cb0 	.word	0xffff3cb0
 8008910:	3c900000 	.word	0x3c900000

08008914 <_init>:
 8008914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008916:	bf00      	nop
 8008918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800891a:	bc08      	pop	{r3}
 800891c:	469e      	mov	lr, r3
 800891e:	4770      	bx	lr

08008920 <_fini>:
 8008920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008922:	bf00      	nop
 8008924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008926:	bc08      	pop	{r3}
 8008928:	469e      	mov	lr, r3
 800892a:	4770      	bx	lr
