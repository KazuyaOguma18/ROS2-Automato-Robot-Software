
F401-Harvest-Studio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008824  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  080089c8  080089c8  000189c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c48  08008c48  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08008c48  08008c48  00018c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c50  08008c50  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c50  08008c50  00018c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c54  08008c54  00018c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008c58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  20000078  08008cd0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  08008cd0  00020324  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012088  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fe6  00000000  00000000  00032130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa0  00000000  00000000  00034118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f10  00000000  00000000  000350b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017fb4  00000000  00000000  00035fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012407  00000000  00000000  0004df7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c58a  00000000  00000000  00060383  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fc90d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d94  00000000  00000000  000fc960  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080089ac 	.word	0x080089ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	080089ac 	.word	0x080089ac

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b96e 	b.w	8000f8c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468c      	mov	ip, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8083 	bne.w	8000dde <__udivmoddi4+0x116>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4617      	mov	r7, r2
 8000cdc:	d947      	bls.n	8000d6e <__udivmoddi4+0xa6>
 8000cde:	fab2 f282 	clz	r2, r2
 8000ce2:	b142      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	f1c2 0020 	rsb	r0, r2, #32
 8000ce8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cec:	4091      	lsls	r1, r2
 8000cee:	4097      	lsls	r7, r2
 8000cf0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbbc f6f8 	udiv	r6, ip, r8
 8000d00:	fa1f fe87 	uxth.w	lr, r7
 8000d04:	fb08 c116 	mls	r1, r8, r6, ip
 8000d08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18fb      	adds	r3, r7, r3
 8000d16:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d1a:	f080 8119 	bcs.w	8000f50 <__udivmoddi4+0x288>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8116 	bls.w	8000f50 <__udivmoddi4+0x288>
 8000d24:	3e02      	subs	r6, #2
 8000d26:	443b      	add	r3, r7
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d30:	fb08 3310 	mls	r3, r8, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d3c:	45a6      	cmp	lr, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	193c      	adds	r4, r7, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d46:	f080 8105 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d4a:	45a6      	cmp	lr, r4
 8000d4c:	f240 8102 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d50:	3802      	subs	r0, #2
 8000d52:	443c      	add	r4, r7
 8000d54:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d58:	eba4 040e 	sub.w	r4, r4, lr
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	b11d      	cbz	r5, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c5 4300 	strd	r4, r3, [r5]
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	b902      	cbnz	r2, 8000d72 <__udivmoddi4+0xaa>
 8000d70:	deff      	udf	#255	; 0xff
 8000d72:	fab2 f282 	clz	r2, r2
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	d150      	bne.n	8000e1c <__udivmoddi4+0x154>
 8000d7a:	1bcb      	subs	r3, r1, r7
 8000d7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d80:	fa1f f887 	uxth.w	r8, r7
 8000d84:	2601      	movs	r6, #1
 8000d86:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d8a:	0c21      	lsrs	r1, r4, #16
 8000d8c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb08 f30c 	mul.w	r3, r8, ip
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0xe2>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	f200 80e9 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1ac9      	subs	r1, r1, r3
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000db8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x10c>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x10a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80d9 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e7bf      	b.n	8000d5e <__udivmoddi4+0x96>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0x12e>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80b1 	beq.w	8000f4a <__udivmoddi4+0x282>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x1cc>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0x140>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80b8 	bhi.w	8000f78 <__udivmoddi4+0x2b0>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	468c      	mov	ip, r1
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0a8      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000e16:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e1a:	e7a5      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f603 	lsr.w	r6, r0, r3
 8000e24:	4097      	lsls	r7, r2
 8000e26:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e2e:	40d9      	lsrs	r1, r3
 8000e30:	4330      	orrs	r0, r6
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e38:	fa1f f887 	uxth.w	r8, r7
 8000e3c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e44:	fb06 f108 	mul.w	r1, r6, r8
 8000e48:	4299      	cmp	r1, r3
 8000e4a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4e:	d909      	bls.n	8000e64 <__udivmoddi4+0x19c>
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e56:	f080 808d 	bcs.w	8000f74 <__udivmoddi4+0x2ac>
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	f240 808a 	bls.w	8000f74 <__udivmoddi4+0x2ac>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	443b      	add	r3, r7
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b281      	uxth	r1, r0
 8000e68:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e74:	fb00 f308 	mul.w	r3, r0, r8
 8000e78:	428b      	cmp	r3, r1
 8000e7a:	d907      	bls.n	8000e8c <__udivmoddi4+0x1c4>
 8000e7c:	1879      	adds	r1, r7, r1
 8000e7e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e82:	d273      	bcs.n	8000f6c <__udivmoddi4+0x2a4>
 8000e84:	428b      	cmp	r3, r1
 8000e86:	d971      	bls.n	8000f6c <__udivmoddi4+0x2a4>
 8000e88:	3802      	subs	r0, #2
 8000e8a:	4439      	add	r1, r7
 8000e8c:	1acb      	subs	r3, r1, r3
 8000e8e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e92:	e778      	b.n	8000d86 <__udivmoddi4+0xbe>
 8000e94:	f1c6 0c20 	rsb	ip, r6, #32
 8000e98:	fa03 f406 	lsl.w	r4, r3, r6
 8000e9c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ea0:	431c      	orrs	r4, r3
 8000ea2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000eae:	fa21 f10c 	lsr.w	r1, r1, ip
 8000eb2:	431f      	orrs	r7, r3
 8000eb4:	0c3b      	lsrs	r3, r7, #16
 8000eb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eba:	fa1f f884 	uxth.w	r8, r4
 8000ebe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ec2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ec6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eca:	458a      	cmp	sl, r1
 8000ecc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x220>
 8000ed6:	1861      	adds	r1, r4, r1
 8000ed8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000edc:	d248      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000ede:	458a      	cmp	sl, r1
 8000ee0:	d946      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000ee2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ee6:	4421      	add	r1, r4
 8000ee8:	eba1 010a 	sub.w	r1, r1, sl
 8000eec:	b2bf      	uxth	r7, r7
 8000eee:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ef2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ef6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000efa:	fb00 f808 	mul.w	r8, r0, r8
 8000efe:	45b8      	cmp	r8, r7
 8000f00:	d907      	bls.n	8000f12 <__udivmoddi4+0x24a>
 8000f02:	19e7      	adds	r7, r4, r7
 8000f04:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f08:	d22e      	bcs.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0a:	45b8      	cmp	r8, r7
 8000f0c:	d92c      	bls.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0e:	3802      	subs	r0, #2
 8000f10:	4427      	add	r7, r4
 8000f12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f16:	eba7 0708 	sub.w	r7, r7, r8
 8000f1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f1e:	454f      	cmp	r7, r9
 8000f20:	46c6      	mov	lr, r8
 8000f22:	4649      	mov	r1, r9
 8000f24:	d31a      	bcc.n	8000f5c <__udivmoddi4+0x294>
 8000f26:	d017      	beq.n	8000f58 <__udivmoddi4+0x290>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x27a>
 8000f2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f36:	40f2      	lsrs	r2, r6
 8000f38:	ea4c 0202 	orr.w	r2, ip, r2
 8000f3c:	40f7      	lsrs	r7, r6
 8000f3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f42:	2600      	movs	r6, #0
 8000f44:	4631      	mov	r1, r6
 8000f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e70b      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6fd      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f58:	4543      	cmp	r3, r8
 8000f5a:	d2e5      	bcs.n	8000f28 <__udivmoddi4+0x260>
 8000f5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f60:	eb69 0104 	sbc.w	r1, r9, r4
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7df      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e7d2      	b.n	8000f12 <__udivmoddi4+0x24a>
 8000f6c:	4660      	mov	r0, ip
 8000f6e:	e78d      	b.n	8000e8c <__udivmoddi4+0x1c4>
 8000f70:	4681      	mov	r9, r0
 8000f72:	e7b9      	b.n	8000ee8 <__udivmoddi4+0x220>
 8000f74:	4666      	mov	r6, ip
 8000f76:	e775      	b.n	8000e64 <__udivmoddi4+0x19c>
 8000f78:	4630      	mov	r0, r6
 8000f7a:	e74a      	b.n	8000e12 <__udivmoddi4+0x14a>
 8000f7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f80:	4439      	add	r1, r7
 8000f82:	e713      	b.n	8000dac <__udivmoddi4+0xe4>
 8000f84:	3802      	subs	r0, #2
 8000f86:	443c      	add	r4, r7
 8000f88:	e724      	b.n	8000dd4 <__udivmoddi4+0x10c>
 8000f8a:	bf00      	nop

08000f8c <__aeabi_idiv0>:
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f94:	f3bf 8f4f 	dsb	sy
}
 8000f98:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <__NVIC_SystemReset+0x24>)
 8000f9c:	68db      	ldr	r3, [r3, #12]
 8000f9e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000fa2:	4904      	ldr	r1, [pc, #16]	; (8000fb4 <__NVIC_SystemReset+0x24>)
 8000fa4:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <__NVIC_SystemReset+0x28>)
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000faa:	f3bf 8f4f 	dsb	sy
}
 8000fae:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000fb0:	bf00      	nop
 8000fb2:	e7fd      	b.n	8000fb0 <__NVIC_SystemReset+0x20>
 8000fb4:	e000ed00 	.word	0xe000ed00
 8000fb8:	05fa0004 	.word	0x05fa0004
 8000fbc:	00000000 	.word	0x00000000

08000fc0 <pot_rotate_control>:
float read_arm_encoder_value(int n);
uint16_t read_rotary_encoder_value(void);
int distance_read(void);

// ポット�??��半�?に基づ?��?1/4回転を台形制御により実�?
uint16_t pot_rotate_control(uint16_t count){
 8000fc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000fc4:	ed2d 8b02 	vpush	{d8}
 8000fc8:	b094      	sub	sp, #80	; 0x50
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	4603      	mov	r3, r0
 8000fce:	81fb      	strh	r3, [r7, #14]
	static int first = 1;
	static uint16_t need_count;
	static uint16_t now_count = 0;

	uint16_t max_speed = 8;
 8000fd0:	2308      	movs	r3, #8
 8000fd2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint16_t min_speed = 6;
 8000fd6:	2306      	movs	r3, #6
 8000fd8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	float pot_radius;
	float arm_angle;

	if (first == 1){
 8000fdc:	4be2      	ldr	r3, [pc, #904]	; (8001368 <pot_rotate_control+0x3a8>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	f040 82ff 	bne.w	80015e4 <pot_rotate_control+0x624>
		float a,b,c,d,w,r1,r2,A,B,C,D,E;
		first = 0;
 8000fe6:	4be0      	ldr	r3, [pc, #896]	; (8001368 <pot_rotate_control+0x3a8>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
		// calculate pot radius
		a = 212.5;
 8000fec:	4bdf      	ldr	r3, [pc, #892]	; (800136c <pot_rotate_control+0x3ac>)
 8000fee:	64bb      	str	r3, [r7, #72]	; 0x48
		b = 83.5;
 8000ff0:	4bdf      	ldr	r3, [pc, #892]	; (8001370 <pot_rotate_control+0x3b0>)
 8000ff2:	647b      	str	r3, [r7, #68]	; 0x44
		c = 222.5;
 8000ff4:	4bdf      	ldr	r3, [pc, #892]	; (8001374 <pot_rotate_control+0x3b4>)
 8000ff6:	643b      	str	r3, [r7, #64]	; 0x40
		d = 64.58;
 8000ff8:	4bdf      	ldr	r3, [pc, #892]	; (8001378 <pot_rotate_control+0x3b8>)
 8000ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
		w = 190.0;
 8000ffc:	4bdf      	ldr	r3, [pc, #892]	; (800137c <pot_rotate_control+0x3bc>)
 8000ffe:	63bb      	str	r3, [r7, #56]	; 0x38
		r1 = 68.97/2;
 8001000:	4bdf      	ldr	r3, [pc, #892]	; (8001380 <pot_rotate_control+0x3c0>)
 8001002:	637b      	str	r3, [r7, #52]	; 0x34
		r2 = 35.0;
 8001004:	4bdf      	ldr	r3, [pc, #892]	; (8001384 <pot_rotate_control+0x3c4>)
 8001006:	633b      	str	r3, [r7, #48]	; 0x30

		arm_angle = (read_arm_encoder_value(1) + read_arm_encoder_value(2))*M_PI/360;
 8001008:	2001      	movs	r0, #1
 800100a:	f000 fcb9 	bl	8001980 <read_arm_encoder_value>
 800100e:	eeb0 8a40 	vmov.f32	s16, s0
 8001012:	2002      	movs	r0, #2
 8001014:	f000 fcb4 	bl	8001980 <read_arm_encoder_value>
 8001018:	eef0 7a40 	vmov.f32	s15, s0
 800101c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001020:	ee17 0a90 	vmov	r0, s15
 8001024:	f7ff fa98 	bl	8000558 <__aeabi_f2d>
 8001028:	a3cb      	add	r3, pc, #812	; (adr r3, 8001358 <pot_rotate_control+0x398>)
 800102a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800102e:	f7ff faeb 	bl	8000608 <__aeabi_dmul>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	4610      	mov	r0, r2
 8001038:	4619      	mov	r1, r3
 800103a:	f04f 0200 	mov.w	r2, #0
 800103e:	4bd2      	ldr	r3, [pc, #840]	; (8001388 <pot_rotate_control+0x3c8>)
 8001040:	f7ff fc0c 	bl	800085c <__aeabi_ddiv>
 8001044:	4602      	mov	r2, r0
 8001046:	460b      	mov	r3, r1
 8001048:	4610      	mov	r0, r2
 800104a:	4619      	mov	r1, r3
 800104c:	f7ff fdd4 	bl	8000bf8 <__aeabi_d2f>
 8001050:	4603      	mov	r3, r0
 8001052:	62fb      	str	r3, [r7, #44]	; 0x2c
		A = pow(a,2) + a*w - 2*(a+w/2)*(c*sin(arm_angle) + d*cos(arm_angle)) + pow(c,2) + pow(d,2) + pow(r1,2) - pow(r2,2) + 2*b*(c*cos(arm_angle) - d*sin(arm_angle)) + pow(b,2);
 8001054:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001056:	f7ff fa7f 	bl	8000558 <__aeabi_f2d>
 800105a:	4602      	mov	r2, r0
 800105c:	460b      	mov	r3, r1
 800105e:	ed9f 1bc0 	vldr	d1, [pc, #768]	; 8001360 <pot_rotate_control+0x3a0>
 8001062:	ec43 2b10 	vmov	d0, r2, r3
 8001066:	f005 fd63 	bl	8006b30 <pow>
 800106a:	ec55 4b10 	vmov	r4, r5, d0
 800106e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001072:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800107a:	ee17 0a90 	vmov	r0, s15
 800107e:	f7ff fa6b 	bl	8000558 <__aeabi_f2d>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	4620      	mov	r0, r4
 8001088:	4629      	mov	r1, r5
 800108a:	f7ff f907 	bl	800029c <__adddf3>
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
 8001092:	4692      	mov	sl, r2
 8001094:	469b      	mov	fp, r3
 8001096:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800109a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800109e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010a2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80010a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010aa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80010ae:	ee17 0a90 	vmov	r0, s15
 80010b2:	f7ff fa51 	bl	8000558 <__aeabi_f2d>
 80010b6:	4604      	mov	r4, r0
 80010b8:	460d      	mov	r5, r1
 80010ba:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80010bc:	f7ff fa4c 	bl	8000558 <__aeabi_f2d>
 80010c0:	4680      	mov	r8, r0
 80010c2:	4689      	mov	r9, r1
 80010c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80010c6:	f7ff fa47 	bl	8000558 <__aeabi_f2d>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	ec43 2b10 	vmov	d0, r2, r3
 80010d2:	f005 fcd9 	bl	8006a88 <sin>
 80010d6:	ec53 2b10 	vmov	r2, r3, d0
 80010da:	4640      	mov	r0, r8
 80010dc:	4649      	mov	r1, r9
 80010de:	f7ff fa93 	bl	8000608 <__aeabi_dmul>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	e9c7 2300 	strd	r2, r3, [r7]
 80010ea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80010ec:	f7ff fa34 	bl	8000558 <__aeabi_f2d>
 80010f0:	4680      	mov	r8, r0
 80010f2:	4689      	mov	r9, r1
 80010f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80010f6:	f7ff fa2f 	bl	8000558 <__aeabi_f2d>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	ec43 2b10 	vmov	d0, r2, r3
 8001102:	f005 fc71 	bl	80069e8 <cos>
 8001106:	ec53 2b10 	vmov	r2, r3, d0
 800110a:	4640      	mov	r0, r8
 800110c:	4649      	mov	r1, r9
 800110e:	f7ff fa7b 	bl	8000608 <__aeabi_dmul>
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	e9d7 0100 	ldrd	r0, r1, [r7]
 800111a:	f7ff f8bf 	bl	800029c <__adddf3>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	4620      	mov	r0, r4
 8001124:	4629      	mov	r1, r5
 8001126:	f7ff fa6f 	bl	8000608 <__aeabi_dmul>
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	4650      	mov	r0, sl
 8001130:	4659      	mov	r1, fp
 8001132:	f7ff f8b1 	bl	8000298 <__aeabi_dsub>
 8001136:	4602      	mov	r2, r0
 8001138:	460b      	mov	r3, r1
 800113a:	4614      	mov	r4, r2
 800113c:	461d      	mov	r5, r3
 800113e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001140:	f7ff fa0a 	bl	8000558 <__aeabi_f2d>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	ed9f 1b85 	vldr	d1, [pc, #532]	; 8001360 <pot_rotate_control+0x3a0>
 800114c:	ec43 2b10 	vmov	d0, r2, r3
 8001150:	f005 fcee 	bl	8006b30 <pow>
 8001154:	ec53 2b10 	vmov	r2, r3, d0
 8001158:	4620      	mov	r0, r4
 800115a:	4629      	mov	r1, r5
 800115c:	f7ff f89e 	bl	800029c <__adddf3>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4614      	mov	r4, r2
 8001166:	461d      	mov	r5, r3
 8001168:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800116a:	f7ff f9f5 	bl	8000558 <__aeabi_f2d>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	ed9f 1b7b 	vldr	d1, [pc, #492]	; 8001360 <pot_rotate_control+0x3a0>
 8001176:	ec43 2b10 	vmov	d0, r2, r3
 800117a:	f005 fcd9 	bl	8006b30 <pow>
 800117e:	ec53 2b10 	vmov	r2, r3, d0
 8001182:	4620      	mov	r0, r4
 8001184:	4629      	mov	r1, r5
 8001186:	f7ff f889 	bl	800029c <__adddf3>
 800118a:	4602      	mov	r2, r0
 800118c:	460b      	mov	r3, r1
 800118e:	4614      	mov	r4, r2
 8001190:	461d      	mov	r5, r3
 8001192:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001194:	f7ff f9e0 	bl	8000558 <__aeabi_f2d>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	ed9f 1b70 	vldr	d1, [pc, #448]	; 8001360 <pot_rotate_control+0x3a0>
 80011a0:	ec43 2b10 	vmov	d0, r2, r3
 80011a4:	f005 fcc4 	bl	8006b30 <pow>
 80011a8:	ec53 2b10 	vmov	r2, r3, d0
 80011ac:	4620      	mov	r0, r4
 80011ae:	4629      	mov	r1, r5
 80011b0:	f7ff f874 	bl	800029c <__adddf3>
 80011b4:	4602      	mov	r2, r0
 80011b6:	460b      	mov	r3, r1
 80011b8:	4614      	mov	r4, r2
 80011ba:	461d      	mov	r5, r3
 80011bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80011be:	f7ff f9cb 	bl	8000558 <__aeabi_f2d>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	ed9f 1b66 	vldr	d1, [pc, #408]	; 8001360 <pot_rotate_control+0x3a0>
 80011ca:	ec43 2b10 	vmov	d0, r2, r3
 80011ce:	f005 fcaf 	bl	8006b30 <pow>
 80011d2:	ec53 2b10 	vmov	r2, r3, d0
 80011d6:	4620      	mov	r0, r4
 80011d8:	4629      	mov	r1, r5
 80011da:	f7ff f85d 	bl	8000298 <__aeabi_dsub>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	4692      	mov	sl, r2
 80011e4:	469b      	mov	fp, r3
 80011e6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80011ea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011ee:	ee17 0a90 	vmov	r0, s15
 80011f2:	f7ff f9b1 	bl	8000558 <__aeabi_f2d>
 80011f6:	4604      	mov	r4, r0
 80011f8:	460d      	mov	r5, r1
 80011fa:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80011fc:	f7ff f9ac 	bl	8000558 <__aeabi_f2d>
 8001200:	4680      	mov	r8, r0
 8001202:	4689      	mov	r9, r1
 8001204:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001206:	f7ff f9a7 	bl	8000558 <__aeabi_f2d>
 800120a:	4602      	mov	r2, r0
 800120c:	460b      	mov	r3, r1
 800120e:	ec43 2b10 	vmov	d0, r2, r3
 8001212:	f005 fbe9 	bl	80069e8 <cos>
 8001216:	ec53 2b10 	vmov	r2, r3, d0
 800121a:	4640      	mov	r0, r8
 800121c:	4649      	mov	r1, r9
 800121e:	f7ff f9f3 	bl	8000608 <__aeabi_dmul>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	e9c7 2300 	strd	r2, r3, [r7]
 800122a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800122c:	f7ff f994 	bl	8000558 <__aeabi_f2d>
 8001230:	4680      	mov	r8, r0
 8001232:	4689      	mov	r9, r1
 8001234:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001236:	f7ff f98f 	bl	8000558 <__aeabi_f2d>
 800123a:	4602      	mov	r2, r0
 800123c:	460b      	mov	r3, r1
 800123e:	ec43 2b10 	vmov	d0, r2, r3
 8001242:	f005 fc21 	bl	8006a88 <sin>
 8001246:	ec53 2b10 	vmov	r2, r3, d0
 800124a:	4640      	mov	r0, r8
 800124c:	4649      	mov	r1, r9
 800124e:	f7ff f9db 	bl	8000608 <__aeabi_dmul>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	e9d7 0100 	ldrd	r0, r1, [r7]
 800125a:	f7ff f81d 	bl	8000298 <__aeabi_dsub>
 800125e:	4602      	mov	r2, r0
 8001260:	460b      	mov	r3, r1
 8001262:	4620      	mov	r0, r4
 8001264:	4629      	mov	r1, r5
 8001266:	f7ff f9cf 	bl	8000608 <__aeabi_dmul>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4650      	mov	r0, sl
 8001270:	4659      	mov	r1, fp
 8001272:	f7ff f813 	bl	800029c <__adddf3>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	4614      	mov	r4, r2
 800127c:	461d      	mov	r5, r3
 800127e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001280:	f7ff f96a 	bl	8000558 <__aeabi_f2d>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	ed9f 1b35 	vldr	d1, [pc, #212]	; 8001360 <pot_rotate_control+0x3a0>
 800128c:	ec43 2b10 	vmov	d0, r2, r3
 8001290:	f005 fc4e 	bl	8006b30 <pow>
 8001294:	ec53 2b10 	vmov	r2, r3, d0
 8001298:	4620      	mov	r0, r4
 800129a:	4629      	mov	r1, r5
 800129c:	f7fe fffe 	bl	800029c <__adddf3>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	4610      	mov	r0, r2
 80012a6:	4619      	mov	r1, r3
 80012a8:	f7ff fca6 	bl	8000bf8 <__aeabi_d2f>
 80012ac:	4603      	mov	r3, r0
 80012ae:	62bb      	str	r3, [r7, #40]	; 0x28
		B = c*cos(arm_angle) - d*sin(arm_angle) + b;
 80012b0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80012b2:	f7ff f951 	bl	8000558 <__aeabi_f2d>
 80012b6:	4604      	mov	r4, r0
 80012b8:	460d      	mov	r5, r1
 80012ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80012bc:	f7ff f94c 	bl	8000558 <__aeabi_f2d>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	ec43 2b10 	vmov	d0, r2, r3
 80012c8:	f005 fb8e 	bl	80069e8 <cos>
 80012cc:	ec53 2b10 	vmov	r2, r3, d0
 80012d0:	4620      	mov	r0, r4
 80012d2:	4629      	mov	r1, r5
 80012d4:	f7ff f998 	bl	8000608 <__aeabi_dmul>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	4690      	mov	r8, r2
 80012de:	4699      	mov	r9, r3
 80012e0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80012e2:	f7ff f939 	bl	8000558 <__aeabi_f2d>
 80012e6:	4604      	mov	r4, r0
 80012e8:	460d      	mov	r5, r1
 80012ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80012ec:	f7ff f934 	bl	8000558 <__aeabi_f2d>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	ec43 2b10 	vmov	d0, r2, r3
 80012f8:	f005 fbc6 	bl	8006a88 <sin>
 80012fc:	ec53 2b10 	vmov	r2, r3, d0
 8001300:	4620      	mov	r0, r4
 8001302:	4629      	mov	r1, r5
 8001304:	f7ff f980 	bl	8000608 <__aeabi_dmul>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	4640      	mov	r0, r8
 800130e:	4649      	mov	r1, r9
 8001310:	f7fe ffc2 	bl	8000298 <__aeabi_dsub>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	4614      	mov	r4, r2
 800131a:	461d      	mov	r5, r3
 800131c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800131e:	f7ff f91b 	bl	8000558 <__aeabi_f2d>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	4620      	mov	r0, r4
 8001328:	4629      	mov	r1, r5
 800132a:	f7fe ffb7 	bl	800029c <__adddf3>
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	4610      	mov	r0, r2
 8001334:	4619      	mov	r1, r3
 8001336:	f7ff fc5f 	bl	8000bf8 <__aeabi_d2f>
 800133a:	4603      	mov	r3, r0
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
		C = pow((r1-r2)/2, 2)-1;
 800133e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001342:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001346:	ee77 7a67 	vsub.f32	s15, s14, s15
 800134a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800134e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001352:	ee16 0a90 	vmov	r0, s13
 8001356:	e019      	b.n	800138c <pot_rotate_control+0x3cc>
 8001358:	54442d18 	.word	0x54442d18
 800135c:	400921fb 	.word	0x400921fb
 8001360:	00000000 	.word	0x00000000
 8001364:	40000000 	.word	0x40000000
 8001368:	20000000 	.word	0x20000000
 800136c:	43548000 	.word	0x43548000
 8001370:	42a70000 	.word	0x42a70000
 8001374:	435e8000 	.word	0x435e8000
 8001378:	428128f6 	.word	0x428128f6
 800137c:	433e0000 	.word	0x433e0000
 8001380:	4209f0a4 	.word	0x4209f0a4
 8001384:	420c0000 	.word	0x420c0000
 8001388:	40768000 	.word	0x40768000
 800138c:	f7ff f8e4 	bl	8000558 <__aeabi_f2d>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	ed9f 1bc8 	vldr	d1, [pc, #800]	; 80016b8 <pot_rotate_control+0x6f8>
 8001398:	ec43 2b10 	vmov	d0, r2, r3
 800139c:	f005 fbc8 	bl	8006b30 <pow>
 80013a0:	ec51 0b10 	vmov	r0, r1, d0
 80013a4:	f04f 0200 	mov.w	r2, #0
 80013a8:	4bc5      	ldr	r3, [pc, #788]	; (80016c0 <pot_rotate_control+0x700>)
 80013aa:	f7fe ff75 	bl	8000298 <__aeabi_dsub>
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
 80013b2:	4610      	mov	r0, r2
 80013b4:	4619      	mov	r1, r3
 80013b6:	f7ff fc1f 	bl	8000bf8 <__aeabi_d2f>
 80013ba:	4603      	mov	r3, r0
 80013bc:	623b      	str	r3, [r7, #32]
		D = A/pow(B,2)*(r1-r2) - 2*r1;
 80013be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80013c0:	f7ff f8ca 	bl	8000558 <__aeabi_f2d>
 80013c4:	4604      	mov	r4, r0
 80013c6:	460d      	mov	r5, r1
 80013c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80013ca:	f7ff f8c5 	bl	8000558 <__aeabi_f2d>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	ed9f 1bb9 	vldr	d1, [pc, #740]	; 80016b8 <pot_rotate_control+0x6f8>
 80013d6:	ec43 2b10 	vmov	d0, r2, r3
 80013da:	f005 fba9 	bl	8006b30 <pow>
 80013de:	ec53 2b10 	vmov	r2, r3, d0
 80013e2:	4620      	mov	r0, r4
 80013e4:	4629      	mov	r1, r5
 80013e6:	f7ff fa39 	bl	800085c <__aeabi_ddiv>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	4614      	mov	r4, r2
 80013f0:	461d      	mov	r5, r3
 80013f2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80013f6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80013fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013fe:	ee17 0a90 	vmov	r0, s15
 8001402:	f7ff f8a9 	bl	8000558 <__aeabi_f2d>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4620      	mov	r0, r4
 800140c:	4629      	mov	r1, r5
 800140e:	f7ff f8fb 	bl	8000608 <__aeabi_dmul>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	4614      	mov	r4, r2
 8001418:	461d      	mov	r5, r3
 800141a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800141e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001422:	ee17 0a90 	vmov	r0, s15
 8001426:	f7ff f897 	bl	8000558 <__aeabi_f2d>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	4620      	mov	r0, r4
 8001430:	4629      	mov	r1, r5
 8001432:	f7fe ff31 	bl	8000298 <__aeabi_dsub>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	4610      	mov	r0, r2
 800143c:	4619      	mov	r1, r3
 800143e:	f7ff fbdb 	bl	8000bf8 <__aeabi_d2f>
 8001442:	4603      	mov	r3, r0
 8001444:	61fb      	str	r3, [r7, #28]
		E = pow(A/(2*B),2) + pow(w/2,2) - pow(r1,2);
 8001446:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800144a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800144e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001452:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001456:	ee16 0a90 	vmov	r0, s13
 800145a:	f7ff f87d 	bl	8000558 <__aeabi_f2d>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	ed9f 1b95 	vldr	d1, [pc, #596]	; 80016b8 <pot_rotate_control+0x6f8>
 8001466:	ec43 2b10 	vmov	d0, r2, r3
 800146a:	f005 fb61 	bl	8006b30 <pow>
 800146e:	ec55 4b10 	vmov	r4, r5, d0
 8001472:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001476:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800147a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800147e:	ee16 0a90 	vmov	r0, s13
 8001482:	f7ff f869 	bl	8000558 <__aeabi_f2d>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	ed9f 1b8b 	vldr	d1, [pc, #556]	; 80016b8 <pot_rotate_control+0x6f8>
 800148e:	ec43 2b10 	vmov	d0, r2, r3
 8001492:	f005 fb4d 	bl	8006b30 <pow>
 8001496:	ec53 2b10 	vmov	r2, r3, d0
 800149a:	4620      	mov	r0, r4
 800149c:	4629      	mov	r1, r5
 800149e:	f7fe fefd 	bl	800029c <__adddf3>
 80014a2:	4602      	mov	r2, r0
 80014a4:	460b      	mov	r3, r1
 80014a6:	4614      	mov	r4, r2
 80014a8:	461d      	mov	r5, r3
 80014aa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80014ac:	f7ff f854 	bl	8000558 <__aeabi_f2d>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	ed9f 1b80 	vldr	d1, [pc, #512]	; 80016b8 <pot_rotate_control+0x6f8>
 80014b8:	ec43 2b10 	vmov	d0, r2, r3
 80014bc:	f005 fb38 	bl	8006b30 <pow>
 80014c0:	ec53 2b10 	vmov	r2, r3, d0
 80014c4:	4620      	mov	r0, r4
 80014c6:	4629      	mov	r1, r5
 80014c8:	f7fe fee6 	bl	8000298 <__aeabi_dsub>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4610      	mov	r0, r2
 80014d2:	4619      	mov	r1, r3
 80014d4:	f7ff fb90 	bl	8000bf8 <__aeabi_d2f>
 80014d8:	4603      	mov	r3, r0
 80014da:	61bb      	str	r3, [r7, #24]
		pot_radius = (-D -sqrt(pow(D,2) - 4*C*E))/(2*C);
 80014dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80014e0:	eef1 7a67 	vneg.f32	s15, s15
 80014e4:	ee17 3a90 	vmov	r3, s15
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff f835 	bl	8000558 <__aeabi_f2d>
 80014ee:	4604      	mov	r4, r0
 80014f0:	460d      	mov	r5, r1
 80014f2:	69f8      	ldr	r0, [r7, #28]
 80014f4:	f7ff f830 	bl	8000558 <__aeabi_f2d>
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	ed9f 1b6e 	vldr	d1, [pc, #440]	; 80016b8 <pot_rotate_control+0x6f8>
 8001500:	ec43 2b10 	vmov	d0, r2, r3
 8001504:	f005 fb14 	bl	8006b30 <pow>
 8001508:	ec59 8b10 	vmov	r8, r9, d0
 800150c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001510:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001514:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001518:	edd7 7a06 	vldr	s15, [r7, #24]
 800151c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001520:	ee17 0a90 	vmov	r0, s15
 8001524:	f7ff f818 	bl	8000558 <__aeabi_f2d>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	4640      	mov	r0, r8
 800152e:	4649      	mov	r1, r9
 8001530:	f7fe feb2 	bl	8000298 <__aeabi_dsub>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	ec43 2b17 	vmov	d7, r2, r3
 800153c:	eeb0 0a47 	vmov.f32	s0, s14
 8001540:	eef0 0a67 	vmov.f32	s1, s15
 8001544:	f005 fba2 	bl	8006c8c <sqrt>
 8001548:	ec53 2b10 	vmov	r2, r3, d0
 800154c:	4620      	mov	r0, r4
 800154e:	4629      	mov	r1, r5
 8001550:	f7fe fea2 	bl	8000298 <__aeabi_dsub>
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	4614      	mov	r4, r2
 800155a:	461d      	mov	r5, r3
 800155c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001560:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001564:	ee17 0a90 	vmov	r0, s15
 8001568:	f7fe fff6 	bl	8000558 <__aeabi_f2d>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	4620      	mov	r0, r4
 8001572:	4629      	mov	r1, r5
 8001574:	f7ff f972 	bl	800085c <__aeabi_ddiv>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4610      	mov	r0, r2
 800157e:	4619      	mov	r1, r3
 8001580:	f7ff fb3a 	bl	8000bf8 <__aeabi_d2f>
 8001584:	4603      	mov	r3, r0
 8001586:	617b      	str	r3, [r7, #20]

		need_count = (uint16_t)pot_radius/r1 * 10 / 6 * 720 * 0.25;
 8001588:	edd7 7a05 	vldr	s15, [r7, #20]
 800158c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001590:	ee17 3a90 	vmov	r3, s15
 8001594:	b29b      	uxth	r3, r3
 8001596:	ee07 3a90 	vmov	s15, r3
 800159a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800159e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80015a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015a6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80015aa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015ae:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80015b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015b6:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80016c4 <pot_rotate_control+0x704>
 80015ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015be:	ee17 0a90 	vmov	r0, s15
 80015c2:	f7fe ffc9 	bl	8000558 <__aeabi_f2d>
 80015c6:	f04f 0200 	mov.w	r2, #0
 80015ca:	4b3f      	ldr	r3, [pc, #252]	; (80016c8 <pot_rotate_control+0x708>)
 80015cc:	f7ff f81c 	bl	8000608 <__aeabi_dmul>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	4610      	mov	r0, r2
 80015d6:	4619      	mov	r1, r3
 80015d8:	f7ff faee 	bl	8000bb8 <__aeabi_d2uiz>
 80015dc:	4603      	mov	r3, r0
 80015de:	b29a      	uxth	r2, r3
 80015e0:	4b3a      	ldr	r3, [pc, #232]	; (80016cc <pot_rotate_control+0x70c>)
 80015e2:	801a      	strh	r2, [r3, #0]
	}

	now_count += count;
 80015e4:	4b3a      	ldr	r3, [pc, #232]	; (80016d0 <pot_rotate_control+0x710>)
 80015e6:	881a      	ldrh	r2, [r3, #0]
 80015e8:	89fb      	ldrh	r3, [r7, #14]
 80015ea:	4413      	add	r3, r2
 80015ec:	b29a      	uxth	r2, r3
 80015ee:	4b38      	ldr	r3, [pc, #224]	; (80016d0 <pot_rotate_control+0x710>)
 80015f0:	801a      	strh	r2, [r3, #0]

	if (now_count < need_count/4){
 80015f2:	4b36      	ldr	r3, [pc, #216]	; (80016cc <pot_rotate_control+0x70c>)
 80015f4:	881b      	ldrh	r3, [r3, #0]
 80015f6:	089b      	lsrs	r3, r3, #2
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	4b35      	ldr	r3, [pc, #212]	; (80016d0 <pot_rotate_control+0x710>)
 80015fc:	881b      	ldrh	r3, [r3, #0]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d90b      	bls.n	800161a <pot_rotate_control+0x65a>
		// __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, (uint16_t)(4*(max_speed-min_speed)/need_count*now_count + min_speed));
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, min_speed);
 8001602:	4b34      	ldr	r3, [pc, #208]	; (80016d4 <pot_rotate_control+0x714>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800160a:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 800160c:	2201      	movs	r2, #1
 800160e:	2140      	movs	r1, #64	; 0x40
 8001610:	4831      	ldr	r0, [pc, #196]	; (80016d8 <pot_rotate_control+0x718>)
 8001612:	f002 fa0d 	bl	8003a30 <HAL_GPIO_WritePin>
		return 1;
 8001616:	2301      	movs	r3, #1
 8001618:	e046      	b.n	80016a8 <pot_rotate_control+0x6e8>
	}
	else if(now_count >= need_count/4 && now_count < need_count/2){
 800161a:	4b2c      	ldr	r3, [pc, #176]	; (80016cc <pot_rotate_control+0x70c>)
 800161c:	881b      	ldrh	r3, [r3, #0]
 800161e:	089b      	lsrs	r3, r3, #2
 8001620:	b29a      	uxth	r2, r3
 8001622:	4b2b      	ldr	r3, [pc, #172]	; (80016d0 <pot_rotate_control+0x710>)
 8001624:	881b      	ldrh	r3, [r3, #0]
 8001626:	429a      	cmp	r2, r3
 8001628:	d813      	bhi.n	8001652 <pot_rotate_control+0x692>
 800162a:	4b28      	ldr	r3, [pc, #160]	; (80016cc <pot_rotate_control+0x70c>)
 800162c:	881b      	ldrh	r3, [r3, #0]
 800162e:	085b      	lsrs	r3, r3, #1
 8001630:	b29a      	uxth	r2, r3
 8001632:	4b27      	ldr	r3, [pc, #156]	; (80016d0 <pot_rotate_control+0x710>)
 8001634:	881b      	ldrh	r3, [r3, #0]
 8001636:	429a      	cmp	r2, r3
 8001638:	d90b      	bls.n	8001652 <pot_rotate_control+0x692>
		// __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, max_speed);
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, max_speed);
 800163a:	4b26      	ldr	r3, [pc, #152]	; (80016d4 <pot_rotate_control+0x714>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8001642:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001644:	2201      	movs	r2, #1
 8001646:	2140      	movs	r1, #64	; 0x40
 8001648:	4823      	ldr	r0, [pc, #140]	; (80016d8 <pot_rotate_control+0x718>)
 800164a:	f002 f9f1 	bl	8003a30 <HAL_GPIO_WritePin>
		return 2;
 800164e:	2302      	movs	r3, #2
 8001650:	e02a      	b.n	80016a8 <pot_rotate_control+0x6e8>
	}
	else if(now_count >= need_count/2 && now_count < need_count){
 8001652:	4b1e      	ldr	r3, [pc, #120]	; (80016cc <pot_rotate_control+0x70c>)
 8001654:	881b      	ldrh	r3, [r3, #0]
 8001656:	085b      	lsrs	r3, r3, #1
 8001658:	b29a      	uxth	r2, r3
 800165a:	4b1d      	ldr	r3, [pc, #116]	; (80016d0 <pot_rotate_control+0x710>)
 800165c:	881b      	ldrh	r3, [r3, #0]
 800165e:	429a      	cmp	r2, r3
 8001660:	d811      	bhi.n	8001686 <pot_rotate_control+0x6c6>
 8001662:	4b1b      	ldr	r3, [pc, #108]	; (80016d0 <pot_rotate_control+0x710>)
 8001664:	881a      	ldrh	r2, [r3, #0]
 8001666:	4b19      	ldr	r3, [pc, #100]	; (80016cc <pot_rotate_control+0x70c>)
 8001668:	881b      	ldrh	r3, [r3, #0]
 800166a:	429a      	cmp	r2, r3
 800166c:	d20b      	bcs.n	8001686 <pot_rotate_control+0x6c6>
		// __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, (uint16_t)(2*min_speed*(1 - now_count/need_count)));
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, min_speed);
 800166e:	4b19      	ldr	r3, [pc, #100]	; (80016d4 <pot_rotate_control+0x714>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8001676:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001678:	2201      	movs	r2, #1
 800167a:	2140      	movs	r1, #64	; 0x40
 800167c:	4816      	ldr	r0, [pc, #88]	; (80016d8 <pot_rotate_control+0x718>)
 800167e:	f002 f9d7 	bl	8003a30 <HAL_GPIO_WritePin>
		return 3;
 8001682:	2303      	movs	r3, #3
 8001684:	e010      	b.n	80016a8 <pot_rotate_control+0x6e8>
	}
	else{
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8001686:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <pot_rotate_control+0x714>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2200      	movs	r2, #0
 800168c:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 800168e:	2201      	movs	r2, #1
 8001690:	2140      	movs	r1, #64	; 0x40
 8001692:	4811      	ldr	r0, [pc, #68]	; (80016d8 <pot_rotate_control+0x718>)
 8001694:	f002 f9cc 	bl	8003a30 <HAL_GPIO_WritePin>
		first = 1;
 8001698:	4b10      	ldr	r3, [pc, #64]	; (80016dc <pot_rotate_control+0x71c>)
 800169a:	2201      	movs	r2, #1
 800169c:	601a      	str	r2, [r3, #0]
		now_count = 0;
 800169e:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <pot_rotate_control+0x710>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	801a      	strh	r2, [r3, #0]
		return 65535;
 80016a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
	}
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3750      	adds	r7, #80	; 0x50
 80016ac:	46bd      	mov	sp, r7
 80016ae:	ecbd 8b02 	vpop	{d8}
 80016b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016b6:	bf00      	nop
 80016b8:	00000000 	.word	0x00000000
 80016bc:	40000000 	.word	0x40000000
 80016c0:	3ff00000 	.word	0x3ff00000
 80016c4:	44340000 	.word	0x44340000
 80016c8:	3fd00000 	.word	0x3fd00000
 80016cc:	20000094 	.word	0x20000094
 80016d0:	20000096 	.word	0x20000096
 80016d4:	200001ac 	.word	0x200001ac
 80016d8:	40020800 	.word	0x40020800
 80016dc:	20000000 	.word	0x20000000

080016e0 <dual_arm_control>:

void dual_arm_control(float target_angle){
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	ed87 0a01 	vstr	s0, [r7, #4]
	float sensor_angle;
	int pid_value;

	/* left arm control */
	sensor_angle = read_arm_encoder_value(1);
 80016ea:	2001      	movs	r0, #1
 80016ec:	f000 f948 	bl	8001980 <read_arm_encoder_value>
 80016f0:	ed87 0a03 	vstr	s0, [r7, #12]
	pid_value = motor_pid(1, sensor_angle, target_angle, 0);
 80016f4:	2100      	movs	r1, #0
 80016f6:	edd7 0a01 	vldr	s1, [r7, #4]
 80016fa:	ed97 0a03 	vldr	s0, [r7, #12]
 80016fe:	2001      	movs	r0, #1
 8001700:	f000 f84a 	bl	8001798 <motor_pid>
 8001704:	60b8      	str	r0, [r7, #8]
	if (pid_value > 0){
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	2b00      	cmp	r3, #0
 800170a:	dd05      	ble.n	8001718 <dual_arm_control+0x38>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800170c:	2201      	movs	r2, #1
 800170e:	2120      	movs	r1, #32
 8001710:	481d      	ldr	r0, [pc, #116]	; (8001788 <dual_arm_control+0xa8>)
 8001712:	f002 f98d 	bl	8003a30 <HAL_GPIO_WritePin>
 8001716:	e004      	b.n	8001722 <dual_arm_control+0x42>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001718:	2200      	movs	r2, #0
 800171a:	2120      	movs	r1, #32
 800171c:	481a      	ldr	r0, [pc, #104]	; (8001788 <dual_arm_control+0xa8>)
 800171e:	f002 f987 	bl	8003a30 <HAL_GPIO_WritePin>
	}
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, abs(pid_value));
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001728:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800172c:	4b17      	ldr	r3, [pc, #92]	; (800178c <dual_arm_control+0xac>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	635a      	str	r2, [r3, #52]	; 0x34

	/* right arm control */
	sensor_angle = read_arm_encoder_value(2);
 8001732:	2002      	movs	r0, #2
 8001734:	f000 f924 	bl	8001980 <read_arm_encoder_value>
 8001738:	ed87 0a03 	vstr	s0, [r7, #12]
	pid_value = motor_pid(2, sensor_angle, target_angle, 0);
 800173c:	2100      	movs	r1, #0
 800173e:	edd7 0a01 	vldr	s1, [r7, #4]
 8001742:	ed97 0a03 	vldr	s0, [r7, #12]
 8001746:	2002      	movs	r0, #2
 8001748:	f000 f826 	bl	8001798 <motor_pid>
 800174c:	60b8      	str	r0, [r7, #8]
	if (pid_value > 0){
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	2b00      	cmp	r3, #0
 8001752:	dd06      	ble.n	8001762 <dual_arm_control+0x82>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001754:	2201      	movs	r2, #1
 8001756:	f44f 7100 	mov.w	r1, #512	; 0x200
 800175a:	480d      	ldr	r0, [pc, #52]	; (8001790 <dual_arm_control+0xb0>)
 800175c:	f002 f968 	bl	8003a30 <HAL_GPIO_WritePin>
 8001760:	e005      	b.n	800176e <dual_arm_control+0x8e>
	}
	else{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001762:	2200      	movs	r2, #0
 8001764:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001768:	4809      	ldr	r0, [pc, #36]	; (8001790 <dual_arm_control+0xb0>)
 800176a:	f002 f961 	bl	8003a30 <HAL_GPIO_WritePin>
	}
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, abs(pid_value));
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001774:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001778:	4b04      	ldr	r3, [pc, #16]	; (800178c <dual_arm_control+0xac>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800177e:	bf00      	nop
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40020400 	.word	0x40020400
 800178c:	200001ac 	.word	0x200001ac
 8001790:	40020000 	.word	0x40020000
 8001794:	00000000 	.word	0x00000000

08001798 <motor_pid>:
/* n: 1 or 2(モータ番号)、sensor_angle: エンコー?��?の出力角度、target_angle: 目標角度、reset: 0 or 1??��?integral?��?0にするかど?��?か�?*/
int motor_pid(int n, float sensor_angle, float target_angle, int reset){
 8001798:	b5b0      	push	{r4, r5, r7, lr}
 800179a:	b088      	sub	sp, #32
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	ed87 0a02 	vstr	s0, [r7, #8]
 80017a4:	edc7 0a01 	vstr	s1, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
	static signed long diff[2][2];
	static float integral[2];
	float p, i, d;
	if (reset == 1){
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d106      	bne.n	80017be <motor_pid+0x26>
		integral[n] = 0;
 80017b0:	4a71      	ldr	r2, [pc, #452]	; (8001978 <motor_pid+0x1e0>)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	4413      	add	r3, r2
 80017b8:	f04f 0200 	mov.w	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
	}
	diff[n][0] = diff[n][1];
 80017be:	4a6f      	ldr	r2, [pc, #444]	; (800197c <motor_pid+0x1e4>)
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	4413      	add	r3, r2
 80017c6:	685a      	ldr	r2, [r3, #4]
 80017c8:	496c      	ldr	r1, [pc, #432]	; (800197c <motor_pid+0x1e4>)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	diff[n][1] = sensor_angle - target_angle;
 80017d0:	ed97 7a02 	vldr	s14, [r7, #8]
 80017d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80017d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017e0:	ee17 1a90 	vmov	r1, s15
 80017e4:	4a65      	ldr	r2, [pc, #404]	; (800197c <motor_pid+0x1e4>)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	4413      	add	r3, r2
 80017ec:	6059      	str	r1, [r3, #4]
	integral[n] += (diff[n][0] + diff[n][1])/2.0 * DELTA_T;
 80017ee:	4a62      	ldr	r2, [pc, #392]	; (8001978 <motor_pid+0x1e0>)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4413      	add	r3, r2
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7fe fead 	bl	8000558 <__aeabi_f2d>
 80017fe:	4604      	mov	r4, r0
 8001800:	460d      	mov	r5, r1
 8001802:	4a5e      	ldr	r2, [pc, #376]	; (800197c <motor_pid+0x1e4>)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800180a:	495c      	ldr	r1, [pc, #368]	; (800197c <motor_pid+0x1e4>)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	440b      	add	r3, r1
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	4413      	add	r3, r2
 8001816:	4618      	mov	r0, r3
 8001818:	f7fe fe8c 	bl	8000534 <__aeabi_i2d>
 800181c:	f04f 0200 	mov.w	r2, #0
 8001820:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001824:	f7ff f81a 	bl	800085c <__aeabi_ddiv>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	4610      	mov	r0, r2
 800182e:	4619      	mov	r1, r3
 8001830:	a34d      	add	r3, pc, #308	; (adr r3, 8001968 <motor_pid+0x1d0>)
 8001832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001836:	f7fe fee7 	bl	8000608 <__aeabi_dmul>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4620      	mov	r0, r4
 8001840:	4629      	mov	r1, r5
 8001842:	f7fe fd2b 	bl	800029c <__adddf3>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	4610      	mov	r0, r2
 800184c:	4619      	mov	r1, r3
 800184e:	f7ff f9d3 	bl	8000bf8 <__aeabi_d2f>
 8001852:	4602      	mov	r2, r0
 8001854:	4948      	ldr	r1, [pc, #288]	; (8001978 <motor_pid+0x1e0>)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	440b      	add	r3, r1
 800185c:	601a      	str	r2, [r3, #0]
	p = P_GAIN * diff[n][1];
 800185e:	4a47      	ldr	r2, [pc, #284]	; (800197c <motor_pid+0x1e4>)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	4413      	add	r3, r2
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	4618      	mov	r0, r3
 800186a:	f7fe fe63 	bl	8000534 <__aeabi_i2d>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	4610      	mov	r0, r2
 8001874:	4619      	mov	r1, r3
 8001876:	f7ff f9bf 	bl	8000bf8 <__aeabi_d2f>
 800187a:	4603      	mov	r3, r0
 800187c:	61fb      	str	r3, [r7, #28]
	i = I_GAIN * integral[n];
 800187e:	4a3e      	ldr	r2, [pc, #248]	; (8001978 <motor_pid+0x1e0>)
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4413      	add	r3, r2
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f7fe fe65 	bl	8000558 <__aeabi_f2d>
 800188e:	a338      	add	r3, pc, #224	; (adr r3, 8001970 <motor_pid+0x1d8>)
 8001890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001894:	f7fe feb8 	bl	8000608 <__aeabi_dmul>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	4610      	mov	r0, r2
 800189e:	4619      	mov	r1, r3
 80018a0:	f7ff f9aa 	bl	8000bf8 <__aeabi_d2f>
 80018a4:	4603      	mov	r3, r0
 80018a6:	61bb      	str	r3, [r7, #24]
	d = D_GAIN * (diff[n][1] - diff[n][0]) / DELTA_T;
 80018a8:	4a34      	ldr	r2, [pc, #208]	; (800197c <motor_pid+0x1e4>)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	4413      	add	r3, r2
 80018b0:	685a      	ldr	r2, [r3, #4]
 80018b2:	4932      	ldr	r1, [pc, #200]	; (800197c <motor_pid+0x1e4>)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	4618      	mov	r0, r3
 80018be:	f7fe fe39 	bl	8000534 <__aeabi_i2d>
 80018c2:	a329      	add	r3, pc, #164	; (adr r3, 8001968 <motor_pid+0x1d0>)
 80018c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c8:	f7fe fe9e 	bl	8000608 <__aeabi_dmul>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	4610      	mov	r0, r2
 80018d2:	4619      	mov	r1, r3
 80018d4:	a324      	add	r3, pc, #144	; (adr r3, 8001968 <motor_pid+0x1d0>)
 80018d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018da:	f7fe ffbf 	bl	800085c <__aeabi_ddiv>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	4610      	mov	r0, r2
 80018e4:	4619      	mov	r1, r3
 80018e6:	f7ff f987 	bl	8000bf8 <__aeabi_d2f>
 80018ea:	4603      	mov	r3, r0
 80018ec:	617b      	str	r3, [r7, #20]
	if (p+i+d > 8.0){
 80018ee:	ed97 7a07 	vldr	s14, [r7, #28]
 80018f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80018f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80018fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001902:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001906:	eef4 7ac7 	vcmpe.f32	s15, s14
 800190a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800190e:	dd01      	ble.n	8001914 <motor_pid+0x17c>
		return 8;
 8001910:	2308      	movs	r3, #8
 8001912:	e025      	b.n	8001960 <motor_pid+0x1c8>
	}
	else if (p+i+d < -8.0){
 8001914:	ed97 7a07 	vldr	s14, [r7, #28]
 8001918:	edd7 7a06 	vldr	s15, [r7, #24]
 800191c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001920:	edd7 7a05 	vldr	s15, [r7, #20]
 8001924:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001928:	eeba 7a00 	vmov.f32	s14, #160	; 0xc1000000 -8.0
 800192c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001934:	d502      	bpl.n	800193c <motor_pid+0x1a4>
		return -8;
 8001936:	f06f 0307 	mvn.w	r3, #7
 800193a:	e011      	b.n	8001960 <motor_pid+0x1c8>
	}
	else{
		return (int)p+i+d;
 800193c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001940:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001944:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001948:	edd7 7a06 	vldr	s15, [r7, #24]
 800194c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001950:	edd7 7a05 	vldr	s15, [r7, #20]
 8001954:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001958:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800195c:	ee17 3a90 	vmov	r3, s15
	}
}
 8001960:	4618      	mov	r0, r3
 8001962:	3720      	adds	r7, #32
 8001964:	46bd      	mov	sp, r7
 8001966:	bdb0      	pop	{r4, r5, r7, pc}
 8001968:	47ae147b 	.word	0x47ae147b
 800196c:	3f847ae1 	.word	0x3f847ae1
 8001970:	9999999a 	.word	0x9999999a
 8001974:	3fa99999 	.word	0x3fa99999
 8001978:	20000098 	.word	0x20000098
 800197c:	200000a0 	.word	0x200000a0

08001980 <read_arm_encoder_value>:

float read_arm_encoder_value(int n){
 8001980:	b580      	push	{r7, lr}
 8001982:	b08c      	sub	sp, #48	; 0x30
 8001984:	af04      	add	r7, sp, #16
 8001986:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef returnValue = 0;
 8001988:	2300      	movs	r3, #0
 800198a:	77fb      	strb	r3, [r7, #31]
	uint16_t RawAngle;
	double DegAngle;
	uint8_t Encoder_Buff[2];
	if (n==1){
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d110      	bne.n	80019b4 <read_arm_encoder_value+0x34>
		returnValue = HAL_I2C_Mem_Read(&hi2c1, AS5600_DEV_ADDRESS, AS5600_REG_RAW_ANGLE,
 8001992:	f241 3388 	movw	r3, #5000	; 0x1388
 8001996:	9302      	str	r3, [sp, #8]
 8001998:	2302      	movs	r3, #2
 800199a:	9301      	str	r3, [sp, #4]
 800199c:	f107 030c 	add.w	r3, r7, #12
 80019a0:	9300      	str	r3, [sp, #0]
 80019a2:	2301      	movs	r3, #1
 80019a4:	220c      	movs	r2, #12
 80019a6:	216c      	movs	r1, #108	; 0x6c
 80019a8:	482d      	ldr	r0, [pc, #180]	; (8001a60 <read_arm_encoder_value+0xe0>)
 80019aa:	f002 f99f 	bl	8003cec <HAL_I2C_Mem_Read>
 80019ae:	4603      	mov	r3, r0
 80019b0:	77fb      	strb	r3, [r7, #31]
 80019b2:	e012      	b.n	80019da <read_arm_encoder_value+0x5a>
					I2C_MEMADD_SIZE_8BIT, (uint8_t*)Encoder_Buff, 2, 5000);
	}
	else if (n==2){
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d10f      	bne.n	80019da <read_arm_encoder_value+0x5a>
		returnValue = HAL_I2C_Mem_Read(&hi2c3, AS5600_DEV_ADDRESS, AS5600_REG_RAW_ANGLE,
 80019ba:	f241 3388 	movw	r3, #5000	; 0x1388
 80019be:	9302      	str	r3, [sp, #8]
 80019c0:	2302      	movs	r3, #2
 80019c2:	9301      	str	r3, [sp, #4]
 80019c4:	f107 030c 	add.w	r3, r7, #12
 80019c8:	9300      	str	r3, [sp, #0]
 80019ca:	2301      	movs	r3, #1
 80019cc:	220c      	movs	r2, #12
 80019ce:	216c      	movs	r1, #108	; 0x6c
 80019d0:	4824      	ldr	r0, [pc, #144]	; (8001a64 <read_arm_encoder_value+0xe4>)
 80019d2:	f002 f98b 	bl	8003cec <HAL_I2C_Mem_Read>
 80019d6:	4603      	mov	r3, r0
 80019d8:	77fb      	strb	r3, [r7, #31]
					I2C_MEMADD_SIZE_8BIT, (uint8_t*)Encoder_Buff, 2, 5000);
	}

	if (returnValue == HAL_ERROR){
 80019da:	7ffb      	ldrb	r3, [r7, #31]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d101      	bne.n	80019e4 <read_arm_encoder_value+0x64>
		NVIC_SystemReset();
 80019e0:	f7ff fad6 	bl	8000f90 <__NVIC_SystemReset>
	}

	RawAngle = (uint16_t) Encoder_Buff[0] << 8 | (uint16_t) Encoder_Buff[1];
 80019e4:	7b3b      	ldrb	r3, [r7, #12]
 80019e6:	021b      	lsls	r3, r3, #8
 80019e8:	b21a      	sxth	r2, r3
 80019ea:	7b7b      	ldrb	r3, [r7, #13]
 80019ec:	b21b      	sxth	r3, r3
 80019ee:	4313      	orrs	r3, r2
 80019f0:	b21b      	sxth	r3, r3
 80019f2:	83bb      	strh	r3, [r7, #28]
	RawAngle &= 0x0FFF;
 80019f4:	8bbb      	ldrh	r3, [r7, #28]
 80019f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019fa:	83bb      	strh	r3, [r7, #28]
	DegAngle = RawAngle * 360 / AS5600_RESOLUTION_PPR - 180.0;
 80019fc:	8bbb      	ldrh	r3, [r7, #28]
 80019fe:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001a02:	fb02 f303 	mul.w	r3, r2, r3
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	da01      	bge.n	8001a0e <read_arm_encoder_value+0x8e>
 8001a0a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001a0e:	131b      	asrs	r3, r3, #12
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7fe fd8f 	bl	8000534 <__aeabi_i2d>
 8001a16:	f04f 0200 	mov.w	r2, #0
 8001a1a:	4b13      	ldr	r3, [pc, #76]	; (8001a68 <read_arm_encoder_value+0xe8>)
 8001a1c:	f7fe fc3c 	bl	8000298 <__aeabi_dsub>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	e9c7 2304 	strd	r2, r3, [r7, #16]
	return DegAngle*0.6;
 8001a28:	a30b      	add	r3, pc, #44	; (adr r3, 8001a58 <read_arm_encoder_value+0xd8>)
 8001a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a32:	f7fe fde9 	bl	8000608 <__aeabi_dmul>
 8001a36:	4602      	mov	r2, r0
 8001a38:	460b      	mov	r3, r1
 8001a3a:	4610      	mov	r0, r2
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	f7ff f8db 	bl	8000bf8 <__aeabi_d2f>
 8001a42:	4603      	mov	r3, r0
 8001a44:	ee07 3a90 	vmov	s15, r3
}
 8001a48:	eeb0 0a67 	vmov.f32	s0, s15
 8001a4c:	3720      	adds	r7, #32
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	f3af 8000 	nop.w
 8001a58:	33333333 	.word	0x33333333
 8001a5c:	3fe33333 	.word	0x3fe33333
 8001a60:	20000158 	.word	0x20000158
 8001a64:	200000bc 	.word	0x200000bc
 8001a68:	40668000 	.word	0x40668000

08001a6c <read_rotary_encoder_value>:

uint16_t read_rotary_encoder_value(void){
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
	uint16_t enc_buff = TIM4->CNT;
 8001a72:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <read_rotary_encoder_value+0x2c>)
 8001a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a76:	80fb      	strh	r3, [r7, #6]
	TIM4->CNT = 0;
 8001a78:	4b07      	ldr	r3, [pc, #28]	; (8001a98 <read_rotary_encoder_value+0x2c>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	625a      	str	r2, [r3, #36]	; 0x24
	if (enc_buff > 32767){
 8001a7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	da01      	bge.n	8001a8a <read_rotary_encoder_value+0x1e>
		return enc_buff;
 8001a86:	88fb      	ldrh	r3, [r7, #6]
 8001a88:	e000      	b.n	8001a8c <read_rotary_encoder_value+0x20>
	}
	else{
		return enc_buff;
 8001a8a:	88fb      	ldrh	r3, [r7, #6]
	}
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	40000800 	.word	0x40000800

08001a9c <distance_read>:

int distance_read(void){
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8001aa0:	4807      	ldr	r0, [pc, #28]	; (8001ac0 <distance_read+0x24>)
 8001aa2:	f001 f9a5 	bl	8002df0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 8001aa6:	2164      	movs	r1, #100	; 0x64
 8001aa8:	4805      	ldr	r0, [pc, #20]	; (8001ac0 <distance_read+0x24>)
 8001aaa:	f001 fa88 	bl	8002fbe <HAL_ADC_PollForConversion>
	HAL_ADC_Stop(&hadc1);
 8001aae:	4804      	ldr	r0, [pc, #16]	; (8001ac0 <distance_read+0x24>)
 8001ab0:	f001 fa52 	bl	8002f58 <HAL_ADC_Stop>
	return HAL_ADC_GetValue(&hadc1);
 8001ab4:	4802      	ldr	r0, [pc, #8]	; (8001ac0 <distance_read+0x24>)
 8001ab6:	f001 fb0d 	bl	80030d4 <HAL_ADC_GetValue>
 8001aba:	4603      	mov	r3, r0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	200001f4 	.word	0x200001f4
 8001ac4:	00000000 	.word	0x00000000

08001ac8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	ed2d 8b02 	vpush	{d8}
 8001ace:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
 8001ad2:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ad4:	f001 f8b2 	bl	8002c3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ad8:	f000 f9d6 	bl	8001e88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001adc:	f000 fcb2 	bl	8002444 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001ae0:	f000 fc86 	bl	80023f0 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8001ae4:	f000 fc30 	bl	8002348 <MX_TIM4_Init>
  MX_ADC1_Init();
 8001ae8:	f000 fa3a 	bl	8001f60 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001aec:	f000 fa8a 	bl	8002004 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001af0:	f000 fab6 	bl	8002060 <MX_I2C3_Init>
  MX_TIM1_Init();
 8001af4:	f000 fae2 	bl	80020bc <MX_TIM1_Init>
  MX_TIM3_Init();
 8001af8:	f000 fbb8 	bl	800226c <MX_TIM3_Init>
  MX_TIM2_Init();
 8001afc:	f000 fb5e 	bl	80021bc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  int mode = 0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
  int pot_rotate_mode = 0;
 8001b06:	2300      	movs	r3, #0
 8001b08:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
  int waiting = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
  int pot_grasping = 0;
 8001b12:	2300      	movs	r3, #0
 8001b14:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
  float last_right_value = 0;
 8001b18:	f04f 0300 	mov.w	r3, #0
 8001b1c:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
  float last_left_value = 0;
 8001b20:	f04f 0300 	mov.w	r3, #0
 8001b24:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
  uint16_t is_rotating = 0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	f8a7 33ee 	strh.w	r3, [r7, #1006]	; 0x3ee
  uint8_t usr_buf[1000];

  /* Start PWM */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001b2e:	210c      	movs	r1, #12
 8001b30:	48cb      	ldr	r0, [pc, #812]	; (8001e60 <main+0x398>)
 8001b32:	f003 fa49 	bl	8004fc8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001b36:	2100      	movs	r1, #0
 8001b38:	48ca      	ldr	r0, [pc, #808]	; (8001e64 <main+0x39c>)
 8001b3a:	f003 fa45 	bl	8004fc8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001b3e:	2104      	movs	r1, #4
 8001b40:	48c8      	ldr	r0, [pc, #800]	; (8001e64 <main+0x39c>)
 8001b42:	f003 fa41 	bl	8004fc8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001b46:	2108      	movs	r1, #8
 8001b48:	48c6      	ldr	r0, [pc, #792]	; (8001e64 <main+0x39c>)
 8001b4a:	f003 fa3d 	bl	8004fc8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001b4e:	2100      	movs	r1, #0
 8001b50:	48c5      	ldr	r0, [pc, #788]	; (8001e68 <main+0x3a0>)
 8001b52:	f003 fa39 	bl	8004fc8 <HAL_TIM_PWM_Start>

  /* Start Encoder */
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001b56:	213c      	movs	r1, #60	; 0x3c
 8001b58:	48c4      	ldr	r0, [pc, #784]	; (8001e6c <main+0x3a4>)
 8001b5a:	f003 fb8b 	bl	8005274 <HAL_TIM_Encoder_Start>
		  sprintf(usr_buf, "%d, %d, %d, %d\n\r", (int)read_arm_encoder_value(1), (int)read_arm_encoder_value(2), mode, 1);
	  }
	  */

	  /* Received reset signal from Raspberry Pi -> System reset*/
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4) == 0){
 8001b5e:	2110      	movs	r1, #16
 8001b60:	48c3      	ldr	r0, [pc, #780]	; (8001e70 <main+0x3a8>)
 8001b62:	f001 ff4d 	bl	8003a00 <HAL_GPIO_ReadPin>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d101      	bne.n	8001b70 <main+0xa8>
		  NVIC_SystemReset();
 8001b6c:	f7ff fa10 	bl	8000f90 <__NVIC_SystemReset>
	  }

	  /* communication */
	  sprintf(usr_buf, "%d, %d, %d, %d, %u\n\r", (int)read_arm_encoder_value(1), (int)read_arm_encoder_value(2), mode, pot_rotate_mode, is_rotating);
 8001b70:	2001      	movs	r0, #1
 8001b72:	f7ff ff05 	bl	8001980 <read_arm_encoder_value>
 8001b76:	eef0 7a40 	vmov.f32	s15, s0
 8001b7a:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 8001b7e:	2002      	movs	r0, #2
 8001b80:	f7ff fefe 	bl	8001980 <read_arm_encoder_value>
 8001b84:	eef0 7a40 	vmov.f32	s15, s0
 8001b88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b8c:	f8b7 33ee 	ldrh.w	r3, [r7, #1006]	; 0x3ee
 8001b90:	1d38      	adds	r0, r7, #4
 8001b92:	9302      	str	r3, [sp, #8]
 8001b94:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 8001b98:	9301      	str	r3, [sp, #4]
 8001b9a:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	ee17 3a90 	vmov	r3, s15
 8001ba4:	ee18 2a10 	vmov	r2, s16
 8001ba8:	49b2      	ldr	r1, [pc, #712]	; (8001e74 <main+0x3ac>)
 8001baa:	f004 faed 	bl	8006188 <siprintf>

	  HAL_UART_Transmit(&huart2, usr_buf, strlen(usr_buf), 100);
 8001bae:	1d3b      	adds	r3, r7, #4
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7fe fb15 	bl	80001e0 <strlen>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	1d39      	adds	r1, r7, #4
 8001bbc:	2364      	movs	r3, #100	; 0x64
 8001bbe:	48ae      	ldr	r0, [pc, #696]	; (8001e78 <main+0x3b0>)
 8001bc0:	f003 ffe7 	bl	8005b92 <HAL_UART_Transmit>
 8001bc4:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8001bc8:	2b04      	cmp	r3, #4
 8001bca:	f200 813f 	bhi.w	8001e4c <main+0x384>
 8001bce:	a201      	add	r2, pc, #4	; (adr r2, 8001bd4 <main+0x10c>)
 8001bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bd4:	08001be9 	.word	0x08001be9
 8001bd8:	08001c35 	.word	0x08001c35
 8001bdc:	08001c69 	.word	0x08001c69
 8001be0:	08001d77 	.word	0x08001d77
 8001be4:	08001e17 	.word	0x08001e17

	  switch(mode){
	  case 0:
		  /*アー?��?角を0度に設?��?*/
		  dual_arm_control(0.0);
 8001be8:	ed9f 0aa4 	vldr	s0, [pc, #656]	; 8001e7c <main+0x3b4>
 8001bec:	f7ff fd78 	bl	80016e0 <dual_arm_control>
		  /*把持司令信号を取得するまで?��??��?*/
		  /*信号取�?->mode=1*/
		  if (distance_read() < 1000){
 8001bf0:	f7ff ff54 	bl	8001a9c <distance_read>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bfa:	da02      	bge.n	8001c02 <main+0x13a>
			  pot_grasping = 0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
		  }
		  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 1 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 0 && pot_grasping == 0){
 8001c02:	2140      	movs	r1, #64	; 0x40
 8001c04:	489e      	ldr	r0, [pc, #632]	; (8001e80 <main+0x3b8>)
 8001c06:	f001 fefb 	bl	8003a00 <HAL_GPIO_ReadPin>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	f040 8114 	bne.w	8001e3a <main+0x372>
 8001c12:	2180      	movs	r1, #128	; 0x80
 8001c14:	489a      	ldr	r0, [pc, #616]	; (8001e80 <main+0x3b8>)
 8001c16:	f001 fef3 	bl	8003a00 <HAL_GPIO_ReadPin>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	f040 810c 	bne.w	8001e3a <main+0x372>
 8001c22:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f040 8107 	bne.w	8001e3a <main+0x372>
			  mode = 1;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
		  }

		  break;
 8001c32:	e102      	b.n	8001e3a <main+0x372>

	  case 1:
		  /*アー?��?角を0度に設?��?*/
		  dual_arm_control(0.0);
 8001c34:	ed9f 0a91 	vldr	s0, [pc, #580]	; 8001e7c <main+0x3b4>
 8001c38:	f7ff fd52 	bl	80016e0 <dual_arm_control>
		  /*測距センサの閾値を上回るまで?��??��?*/
		  if (distance_read() > 3000 && pot_grasping == 0){
 8001c3c:	f7ff ff2e 	bl	8001a9c <distance_read>
 8001c40:	4603      	mov	r3, r0
 8001c42:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001c46:	4293      	cmp	r3, r2
 8001c48:	dd0a      	ble.n	8001c60 <main+0x198>
 8001c4a:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d106      	bne.n	8001c60 <main+0x198>
			  mode = 2;
 8001c52:	2302      	movs	r3, #2
 8001c54:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
			  pot_grasping = 1;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
		  else{
			  pot_grasping = 0;
		  }
		  /*閾値?��??��?->mode=2*/

		  break;
 8001c5e:	e0f5      	b.n	8001e4c <main+0x384>
			  pot_grasping = 0;
 8001c60:	2300      	movs	r3, #0
 8001c62:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
		  break;
 8001c66:	e0f1      	b.n	8001e4c <main+0x384>

	  case 2:
		  /*move arm, while each touch detection*/

		  /* left arm control */
		  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0)==1){
 8001c68:	2101      	movs	r1, #1
 8001c6a:	4886      	ldr	r0, [pc, #536]	; (8001e84 <main+0x3bc>)
 8001c6c:	f001 fec8 	bl	8003a00 <HAL_GPIO_ReadPin>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d127      	bne.n	8001cc6 <main+0x1fe>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001c76:	2201      	movs	r2, #1
 8001c78:	2120      	movs	r1, #32
 8001c7a:	4882      	ldr	r0, [pc, #520]	; (8001e84 <main+0x3bc>)
 8001c7c:	f001 fed8 	bl	8003a30 <HAL_GPIO_WritePin>
			  /* if arm doesn't work, increase the duty ratio*/
			  if (last_left_value - read_arm_encoder_value(1) < 0.1){
 8001c80:	2001      	movs	r0, #1
 8001c82:	f7ff fe7d 	bl	8001980 <read_arm_encoder_value>
 8001c86:	eeb0 7a40 	vmov.f32	s14, s0
 8001c8a:	edd7 7afc 	vldr	s15, [r7, #1008]	; 0x3f0
 8001c8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c92:	ee17 0a90 	vmov	r0, s15
 8001c96:	f7fe fc5f 	bl	8000558 <__aeabi_f2d>
 8001c9a:	a36f      	add	r3, pc, #444	; (adr r3, 8001e58 <main+0x390>)
 8001c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca0:	f7fe ff24 	bl	8000aec <__aeabi_dcmplt>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <main+0x1ea>
				  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 50);
 8001caa:	4b6e      	ldr	r3, [pc, #440]	; (8001e64 <main+0x39c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2232      	movs	r2, #50	; 0x32
 8001cb0:	635a      	str	r2, [r3, #52]	; 0x34
			  }
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 10);
 8001cb2:	4b6c      	ldr	r3, [pc, #432]	; (8001e64 <main+0x39c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	220a      	movs	r2, #10
 8001cb8:	635a      	str	r2, [r3, #52]	; 0x34
			  last_left_value = read_arm_encoder_value(1);
 8001cba:	2001      	movs	r0, #1
 8001cbc:	f7ff fe60 	bl	8001980 <read_arm_encoder_value>
 8001cc0:	ed87 0afc 	vstr	s0, [r7, #1008]	; 0x3f0
 8001cc4:	e00a      	b.n	8001cdc <main+0x214>
		  }
		  else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0)==0){
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	486e      	ldr	r0, [pc, #440]	; (8001e84 <main+0x3bc>)
 8001cca:	f001 fe99 	bl	8003a00 <HAL_GPIO_ReadPin>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d103      	bne.n	8001cdc <main+0x214>
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001cd4:	4b63      	ldr	r3, [pc, #396]	; (8001e64 <main+0x39c>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	635a      	str	r2, [r3, #52]	; 0x34
		  }

		  /* right arm control */
		  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==1){
 8001cdc:	2110      	movs	r1, #16
 8001cde:	4868      	ldr	r0, [pc, #416]	; (8001e80 <main+0x3b8>)
 8001ce0:	f001 fe8e 	bl	8003a00 <HAL_GPIO_ReadPin>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d128      	bne.n	8001d3c <main+0x274>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001cea:	2200      	movs	r2, #0
 8001cec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cf0:	4863      	ldr	r0, [pc, #396]	; (8001e80 <main+0x3b8>)
 8001cf2:	f001 fe9d 	bl	8003a30 <HAL_GPIO_WritePin>
			  /* if arm doesn't work, increase the duty ratio*/
			  if (last_right_value - read_arm_encoder_value(2) < 0.1){
 8001cf6:	2002      	movs	r0, #2
 8001cf8:	f7ff fe42 	bl	8001980 <read_arm_encoder_value>
 8001cfc:	eeb0 7a40 	vmov.f32	s14, s0
 8001d00:	edd7 7afd 	vldr	s15, [r7, #1012]	; 0x3f4
 8001d04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d08:	ee17 0a90 	vmov	r0, s15
 8001d0c:	f7fe fc24 	bl	8000558 <__aeabi_f2d>
 8001d10:	a351      	add	r3, pc, #324	; (adr r3, 8001e58 <main+0x390>)
 8001d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d16:	f7fe fee9 	bl	8000aec <__aeabi_dcmplt>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d003      	beq.n	8001d28 <main+0x260>
				  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 50);
 8001d20:	4b50      	ldr	r3, [pc, #320]	; (8001e64 <main+0x39c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2232      	movs	r2, #50	; 0x32
 8001d26:	639a      	str	r2, [r3, #56]	; 0x38
			  }
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 10);
 8001d28:	4b4e      	ldr	r3, [pc, #312]	; (8001e64 <main+0x39c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	220a      	movs	r2, #10
 8001d2e:	639a      	str	r2, [r3, #56]	; 0x38
			  last_right_value = read_arm_encoder_value(2);
 8001d30:	2002      	movs	r0, #2
 8001d32:	f7ff fe25 	bl	8001980 <read_arm_encoder_value>
 8001d36:	ed87 0afd 	vstr	s0, [r7, #1012]	; 0x3f4
 8001d3a:	e00a      	b.n	8001d52 <main+0x28a>
		  }
		  else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==0){
 8001d3c:	2110      	movs	r1, #16
 8001d3e:	4850      	ldr	r0, [pc, #320]	; (8001e80 <main+0x3b8>)
 8001d40:	f001 fe5e 	bl	8003a00 <HAL_GPIO_ReadPin>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d103      	bne.n	8001d52 <main+0x28a>
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8001d4a:	4b46      	ldr	r3, [pc, #280]	; (8001e64 <main+0x39c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	639a      	str	r2, [r3, #56]	; 0x38
		  }

		  /*スイ?��?チ接触->アー?��?動作を停止,mode=3*/
		  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==0 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0)==0){
 8001d52:	2110      	movs	r1, #16
 8001d54:	484a      	ldr	r0, [pc, #296]	; (8001e80 <main+0x3b8>)
 8001d56:	f001 fe53 	bl	8003a00 <HAL_GPIO_ReadPin>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d16e      	bne.n	8001e3e <main+0x376>
 8001d60:	2101      	movs	r1, #1
 8001d62:	4848      	ldr	r0, [pc, #288]	; (8001e84 <main+0x3bc>)
 8001d64:	f001 fe4c 	bl	8003a00 <HAL_GPIO_ReadPin>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d167      	bne.n	8001e3e <main+0x376>
			  mode = 3;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
		  }

		  break;
 8001d74:	e063      	b.n	8001e3e <main+0x376>

	  case 3:
		  /*Pot rotate mode*/
		  /*ポット回転信号を受信するまで?��??��?*/
		  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 1 && pot_rotate_mode == 0){
 8001d76:	2180      	movs	r1, #128	; 0x80
 8001d78:	4841      	ldr	r0, [pc, #260]	; (8001e80 <main+0x3b8>)
 8001d7a:	f001 fe41 	bl	8003a00 <HAL_GPIO_ReadPin>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d106      	bne.n	8001d92 <main+0x2ca>
 8001d84:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d102      	bne.n	8001d92 <main+0x2ca>
			  pot_rotate_mode = 1;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
		  }
		  /*受信?��?90度回転??��?��台形制御)*/
		  if (waiting == 0){
 8001d92:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d12a      	bne.n	8001df0 <main+0x328>
			  if (pot_rotate_mode > 0 && pot_rotate_mode <= 4){
 8001d9a:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	dd1b      	ble.n	8001dda <main+0x312>
 8001da2:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	dc17      	bgt.n	8001dda <main+0x312>
				  is_rotating = pot_rotate_control((uint16_t)read_rotary_encoder_value());
 8001daa:	f7ff fe5f 	bl	8001a6c <read_rotary_encoder_value>
 8001dae:	4603      	mov	r3, r0
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff f905 	bl	8000fc0 <pot_rotate_control>
 8001db6:	4603      	mov	r3, r0
 8001db8:	f8a7 33ee 	strh.w	r3, [r7, #1006]	; 0x3ee
				  if(is_rotating == 65535){
 8001dbc:	f8b7 33ee 	ldrh.w	r3, [r7, #1006]	; 0x3ee
 8001dc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d125      	bne.n	8001e14 <main+0x34c>
					  pot_rotate_mode++;
 8001dc8:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 8001dcc:	3301      	adds	r3, #1
 8001dce:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
					  /*こ�??��まま?��?とノンストップでポットが?��?回転してしま?��?ので、新しくGPIOから入力されるまで?��?機す?��?*/
					  waiting = 1;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
					  break;
 8001dd8:	e038      	b.n	8001e4c <main+0x384>
				  }
			  }
			  else if (pot_rotate_mode == 5){
 8001dda:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 8001dde:	2b05      	cmp	r3, #5
 8001de0:	d12f      	bne.n	8001e42 <main+0x37a>
				  pot_rotate_mode = 0;
 8001de2:	2300      	movs	r3, #0
 8001de4:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
				  mode = 4;
 8001de8:	2304      	movs	r3, #4
 8001dea:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
				  break;
 8001dee:	e02d      	b.n	8001e4c <main+0x384>
			  }
			  /*回転信号?��?4回受信->mode=4*/
		  }
		  else if(waiting == 1){
 8001df0:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d124      	bne.n	8001e42 <main+0x37a>
			  is_rotating = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	f8a7 33ee 	strh.w	r3, [r7, #1006]	; 0x3ee
			  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 1){
 8001dfe:	2180      	movs	r1, #128	; 0x80
 8001e00:	481f      	ldr	r0, [pc, #124]	; (8001e80 <main+0x3b8>)
 8001e02:	f001 fdfd 	bl	8003a00 <HAL_GPIO_ReadPin>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d11c      	bne.n	8001e46 <main+0x37e>
				  waiting = 0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
			  }
			  break;
 8001e12:	e018      	b.n	8001e46 <main+0x37e>
		  }
		  break;
 8001e14:	e015      	b.n	8001e42 <main+0x37a>

	  case 4:
		  /*把持解除司令を受信->mode=0*/
		  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 1 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 1){
 8001e16:	2140      	movs	r1, #64	; 0x40
 8001e18:	4819      	ldr	r0, [pc, #100]	; (8001e80 <main+0x3b8>)
 8001e1a:	f001 fdf1 	bl	8003a00 <HAL_GPIO_ReadPin>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d112      	bne.n	8001e4a <main+0x382>
 8001e24:	2180      	movs	r1, #128	; 0x80
 8001e26:	4816      	ldr	r0, [pc, #88]	; (8001e80 <main+0x3b8>)
 8001e28:	f001 fdea 	bl	8003a00 <HAL_GPIO_ReadPin>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d10b      	bne.n	8001e4a <main+0x382>
			  mode = 0;
 8001e32:	2300      	movs	r3, #0
 8001e34:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
		  }
		  break;
 8001e38:	e007      	b.n	8001e4a <main+0x382>
		  break;
 8001e3a:	bf00      	nop
 8001e3c:	e006      	b.n	8001e4c <main+0x384>
		  break;
 8001e3e:	bf00      	nop
 8001e40:	e004      	b.n	8001e4c <main+0x384>
		  break;
 8001e42:	bf00      	nop
 8001e44:	e002      	b.n	8001e4c <main+0x384>
			  break;
 8001e46:	bf00      	nop
 8001e48:	e000      	b.n	8001e4c <main+0x384>
		  break;
 8001e4a:	bf00      	nop
	  }

	  HAL_Delay(DELTA_T * 100);
 8001e4c:	2001      	movs	r0, #1
 8001e4e:	f000 ff67 	bl	8002d20 <HAL_Delay>
  {
 8001e52:	e684      	b.n	8001b5e <main+0x96>
 8001e54:	f3af 8000 	nop.w
 8001e58:	9999999a 	.word	0x9999999a
 8001e5c:	3fb99999 	.word	0x3fb99999
 8001e60:	2000023c 	.word	0x2000023c
 8001e64:	200001ac 	.word	0x200001ac
 8001e68:	20000284 	.word	0x20000284
 8001e6c:	20000110 	.word	0x20000110
 8001e70:	40020800 	.word	0x40020800
 8001e74:	080089c8 	.word	0x080089c8
 8001e78:	200002cc 	.word	0x200002cc
 8001e7c:	00000000 	.word	0x00000000
 8001e80:	40020000 	.word	0x40020000
 8001e84:	40020400 	.word	0x40020400

08001e88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b094      	sub	sp, #80	; 0x50
 8001e8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e8e:	f107 0320 	add.w	r3, r7, #32
 8001e92:	2230      	movs	r2, #48	; 0x30
 8001e94:	2100      	movs	r1, #0
 8001e96:	4618      	mov	r0, r3
 8001e98:	f004 f96e 	bl	8006178 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e9c:	f107 030c 	add.w	r3, r7, #12
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	60da      	str	r2, [r3, #12]
 8001eaa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eac:	2300      	movs	r3, #0
 8001eae:	60bb      	str	r3, [r7, #8]
 8001eb0:	4b29      	ldr	r3, [pc, #164]	; (8001f58 <SystemClock_Config+0xd0>)
 8001eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb4:	4a28      	ldr	r2, [pc, #160]	; (8001f58 <SystemClock_Config+0xd0>)
 8001eb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eba:	6413      	str	r3, [r2, #64]	; 0x40
 8001ebc:	4b26      	ldr	r3, [pc, #152]	; (8001f58 <SystemClock_Config+0xd0>)
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec4:	60bb      	str	r3, [r7, #8]
 8001ec6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ec8:	2300      	movs	r3, #0
 8001eca:	607b      	str	r3, [r7, #4]
 8001ecc:	4b23      	ldr	r3, [pc, #140]	; (8001f5c <SystemClock_Config+0xd4>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001ed4:	4a21      	ldr	r2, [pc, #132]	; (8001f5c <SystemClock_Config+0xd4>)
 8001ed6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001eda:	6013      	str	r3, [r2, #0]
 8001edc:	4b1f      	ldr	r3, [pc, #124]	; (8001f5c <SystemClock_Config+0xd4>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ee4:	607b      	str	r3, [r7, #4]
 8001ee6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001eec:	2301      	movs	r3, #1
 8001eee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ef0:	2310      	movs	r3, #16
 8001ef2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001efc:	2310      	movs	r3, #16
 8001efe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001f00:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001f04:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001f06:	2304      	movs	r3, #4
 8001f08:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001f0a:	2307      	movs	r3, #7
 8001f0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f0e:	f107 0320 	add.w	r3, r7, #32
 8001f12:	4618      	mov	r0, r3
 8001f14:	f002 fb94 	bl	8004640 <HAL_RCC_OscConfig>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001f1e:	f000 fb5b 	bl	80025d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f22:	230f      	movs	r3, #15
 8001f24:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f26:	2302      	movs	r3, #2
 8001f28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f32:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f34:	2300      	movs	r3, #0
 8001f36:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f38:	f107 030c 	add.w	r3, r7, #12
 8001f3c:	2102      	movs	r1, #2
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f002 fdf6 	bl	8004b30 <HAL_RCC_ClockConfig>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001f4a:	f000 fb45 	bl	80025d8 <Error_Handler>
  }
}
 8001f4e:	bf00      	nop
 8001f50:	3750      	adds	r7, #80	; 0x50
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	40007000 	.word	0x40007000

08001f60 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f66:	463b      	mov	r3, r7
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	605a      	str	r2, [r3, #4]
 8001f6e:	609a      	str	r2, [r3, #8]
 8001f70:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001f72:	4b21      	ldr	r3, [pc, #132]	; (8001ff8 <MX_ADC1_Init+0x98>)
 8001f74:	4a21      	ldr	r2, [pc, #132]	; (8001ffc <MX_ADC1_Init+0x9c>)
 8001f76:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001f78:	4b1f      	ldr	r3, [pc, #124]	; (8001ff8 <MX_ADC1_Init+0x98>)
 8001f7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f7e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001f80:	4b1d      	ldr	r3, [pc, #116]	; (8001ff8 <MX_ADC1_Init+0x98>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001f86:	4b1c      	ldr	r3, [pc, #112]	; (8001ff8 <MX_ADC1_Init+0x98>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001f8c:	4b1a      	ldr	r3, [pc, #104]	; (8001ff8 <MX_ADC1_Init+0x98>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f92:	4b19      	ldr	r3, [pc, #100]	; (8001ff8 <MX_ADC1_Init+0x98>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f9a:	4b17      	ldr	r3, [pc, #92]	; (8001ff8 <MX_ADC1_Init+0x98>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fa0:	4b15      	ldr	r3, [pc, #84]	; (8001ff8 <MX_ADC1_Init+0x98>)
 8001fa2:	4a17      	ldr	r2, [pc, #92]	; (8002000 <MX_ADC1_Init+0xa0>)
 8001fa4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001fa6:	4b14      	ldr	r3, [pc, #80]	; (8001ff8 <MX_ADC1_Init+0x98>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001fac:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <MX_ADC1_Init+0x98>)
 8001fae:	2201      	movs	r2, #1
 8001fb0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001fb2:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <MX_ADC1_Init+0x98>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001fba:	4b0f      	ldr	r3, [pc, #60]	; (8001ff8 <MX_ADC1_Init+0x98>)
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001fc0:	480d      	ldr	r0, [pc, #52]	; (8001ff8 <MX_ADC1_Init+0x98>)
 8001fc2:	f000 fed1 	bl	8002d68 <HAL_ADC_Init>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001fcc:	f000 fb04 	bl	80025d8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fdc:	463b      	mov	r3, r7
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4805      	ldr	r0, [pc, #20]	; (8001ff8 <MX_ADC1_Init+0x98>)
 8001fe2:	f001 f885 	bl	80030f0 <HAL_ADC_ConfigChannel>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001fec:	f000 faf4 	bl	80025d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ff0:	bf00      	nop
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	200001f4 	.word	0x200001f4
 8001ffc:	40012000 	.word	0x40012000
 8002000:	0f000001 	.word	0x0f000001

08002004 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002008:	4b12      	ldr	r3, [pc, #72]	; (8002054 <MX_I2C1_Init+0x50>)
 800200a:	4a13      	ldr	r2, [pc, #76]	; (8002058 <MX_I2C1_Init+0x54>)
 800200c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800200e:	4b11      	ldr	r3, [pc, #68]	; (8002054 <MX_I2C1_Init+0x50>)
 8002010:	4a12      	ldr	r2, [pc, #72]	; (800205c <MX_I2C1_Init+0x58>)
 8002012:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002014:	4b0f      	ldr	r3, [pc, #60]	; (8002054 <MX_I2C1_Init+0x50>)
 8002016:	2200      	movs	r2, #0
 8002018:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800201a:	4b0e      	ldr	r3, [pc, #56]	; (8002054 <MX_I2C1_Init+0x50>)
 800201c:	2200      	movs	r2, #0
 800201e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002020:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <MX_I2C1_Init+0x50>)
 8002022:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002026:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002028:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <MX_I2C1_Init+0x50>)
 800202a:	2200      	movs	r2, #0
 800202c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800202e:	4b09      	ldr	r3, [pc, #36]	; (8002054 <MX_I2C1_Init+0x50>)
 8002030:	2200      	movs	r2, #0
 8002032:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002034:	4b07      	ldr	r3, [pc, #28]	; (8002054 <MX_I2C1_Init+0x50>)
 8002036:	2200      	movs	r2, #0
 8002038:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800203a:	4b06      	ldr	r3, [pc, #24]	; (8002054 <MX_I2C1_Init+0x50>)
 800203c:	2200      	movs	r2, #0
 800203e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002040:	4804      	ldr	r0, [pc, #16]	; (8002054 <MX_I2C1_Init+0x50>)
 8002042:	f001 fd0f 	bl	8003a64 <HAL_I2C_Init>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800204c:	f000 fac4 	bl	80025d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002050:	bf00      	nop
 8002052:	bd80      	pop	{r7, pc}
 8002054:	20000158 	.word	0x20000158
 8002058:	40005400 	.word	0x40005400
 800205c:	000186a0 	.word	0x000186a0

08002060 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002064:	4b12      	ldr	r3, [pc, #72]	; (80020b0 <MX_I2C3_Init+0x50>)
 8002066:	4a13      	ldr	r2, [pc, #76]	; (80020b4 <MX_I2C3_Init+0x54>)
 8002068:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800206a:	4b11      	ldr	r3, [pc, #68]	; (80020b0 <MX_I2C3_Init+0x50>)
 800206c:	4a12      	ldr	r2, [pc, #72]	; (80020b8 <MX_I2C3_Init+0x58>)
 800206e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002070:	4b0f      	ldr	r3, [pc, #60]	; (80020b0 <MX_I2C3_Init+0x50>)
 8002072:	2200      	movs	r2, #0
 8002074:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002076:	4b0e      	ldr	r3, [pc, #56]	; (80020b0 <MX_I2C3_Init+0x50>)
 8002078:	2200      	movs	r2, #0
 800207a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800207c:	4b0c      	ldr	r3, [pc, #48]	; (80020b0 <MX_I2C3_Init+0x50>)
 800207e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002082:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002084:	4b0a      	ldr	r3, [pc, #40]	; (80020b0 <MX_I2C3_Init+0x50>)
 8002086:	2200      	movs	r2, #0
 8002088:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800208a:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <MX_I2C3_Init+0x50>)
 800208c:	2200      	movs	r2, #0
 800208e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002090:	4b07      	ldr	r3, [pc, #28]	; (80020b0 <MX_I2C3_Init+0x50>)
 8002092:	2200      	movs	r2, #0
 8002094:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002096:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <MX_I2C3_Init+0x50>)
 8002098:	2200      	movs	r2, #0
 800209a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800209c:	4804      	ldr	r0, [pc, #16]	; (80020b0 <MX_I2C3_Init+0x50>)
 800209e:	f001 fce1 	bl	8003a64 <HAL_I2C_Init>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80020a8:	f000 fa96 	bl	80025d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80020ac:	bf00      	nop
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	200000bc 	.word	0x200000bc
 80020b4:	40005c00 	.word	0x40005c00
 80020b8:	000186a0 	.word	0x000186a0

080020bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b092      	sub	sp, #72	; 0x48
 80020c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020c6:	2200      	movs	r2, #0
 80020c8:	601a      	str	r2, [r3, #0]
 80020ca:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	605a      	str	r2, [r3, #4]
 80020d6:	609a      	str	r2, [r3, #8]
 80020d8:	60da      	str	r2, [r3, #12]
 80020da:	611a      	str	r2, [r3, #16]
 80020dc:	615a      	str	r2, [r3, #20]
 80020de:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80020e0:	1d3b      	adds	r3, r7, #4
 80020e2:	2220      	movs	r2, #32
 80020e4:	2100      	movs	r1, #0
 80020e6:	4618      	mov	r0, r3
 80020e8:	f004 f846 	bl	8006178 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020ec:	4b31      	ldr	r3, [pc, #196]	; (80021b4 <MX_TIM1_Init+0xf8>)
 80020ee:	4a32      	ldr	r2, [pc, #200]	; (80021b8 <MX_TIM1_Init+0xfc>)
 80020f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 80020f2:	4b30      	ldr	r3, [pc, #192]	; (80021b4 <MX_TIM1_Init+0xf8>)
 80020f4:	2253      	movs	r2, #83	; 0x53
 80020f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020f8:	4b2e      	ldr	r3, [pc, #184]	; (80021b4 <MX_TIM1_Init+0xf8>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49;
 80020fe:	4b2d      	ldr	r3, [pc, #180]	; (80021b4 <MX_TIM1_Init+0xf8>)
 8002100:	2231      	movs	r2, #49	; 0x31
 8002102:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002104:	4b2b      	ldr	r3, [pc, #172]	; (80021b4 <MX_TIM1_Init+0xf8>)
 8002106:	2200      	movs	r2, #0
 8002108:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800210a:	4b2a      	ldr	r3, [pc, #168]	; (80021b4 <MX_TIM1_Init+0xf8>)
 800210c:	2200      	movs	r2, #0
 800210e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002110:	4b28      	ldr	r3, [pc, #160]	; (80021b4 <MX_TIM1_Init+0xf8>)
 8002112:	2200      	movs	r2, #0
 8002114:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002116:	4827      	ldr	r0, [pc, #156]	; (80021b4 <MX_TIM1_Init+0xf8>)
 8002118:	f002 ff06 	bl	8004f28 <HAL_TIM_PWM_Init>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8002122:	f000 fa59 	bl	80025d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002126:	2300      	movs	r3, #0
 8002128:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800212a:	2300      	movs	r3, #0
 800212c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800212e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002132:	4619      	mov	r1, r3
 8002134:	481f      	ldr	r0, [pc, #124]	; (80021b4 <MX_TIM1_Init+0xf8>)
 8002136:	f003 fc1f 	bl	8005978 <HAL_TIMEx_MasterConfigSynchronization>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8002140:	f000 fa4a 	bl	80025d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002144:	2360      	movs	r3, #96	; 0x60
 8002146:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002148:	2300      	movs	r3, #0
 800214a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800214c:	2300      	movs	r3, #0
 800214e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002150:	2300      	movs	r3, #0
 8002152:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002154:	2300      	movs	r3, #0
 8002156:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002158:	2300      	movs	r3, #0
 800215a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800215c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002160:	220c      	movs	r2, #12
 8002162:	4619      	mov	r1, r3
 8002164:	4813      	ldr	r0, [pc, #76]	; (80021b4 <MX_TIM1_Init+0xf8>)
 8002166:	f003 f913 	bl	8005390 <HAL_TIM_PWM_ConfigChannel>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8002170:	f000 fa32 	bl	80025d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002174:	2300      	movs	r3, #0
 8002176:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002178:	2300      	movs	r3, #0
 800217a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800217c:	2300      	movs	r3, #0
 800217e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002180:	2300      	movs	r3, #0
 8002182:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002184:	2300      	movs	r3, #0
 8002186:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002188:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800218c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800218e:	2300      	movs	r3, #0
 8002190:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002192:	1d3b      	adds	r3, r7, #4
 8002194:	4619      	mov	r1, r3
 8002196:	4807      	ldr	r0, [pc, #28]	; (80021b4 <MX_TIM1_Init+0xf8>)
 8002198:	f003 fc5c 	bl	8005a54 <HAL_TIMEx_ConfigBreakDeadTime>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <MX_TIM1_Init+0xea>
  {
    Error_Handler();
 80021a2:	f000 fa19 	bl	80025d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80021a6:	4803      	ldr	r0, [pc, #12]	; (80021b4 <MX_TIM1_Init+0xf8>)
 80021a8:	f000 fbbc 	bl	8002924 <HAL_TIM_MspPostInit>

}
 80021ac:	bf00      	nop
 80021ae:	3748      	adds	r7, #72	; 0x48
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	2000023c 	.word	0x2000023c
 80021b8:	40010000 	.word	0x40010000

080021bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b08a      	sub	sp, #40	; 0x28
 80021c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021c2:	f107 0320 	add.w	r3, r7, #32
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021cc:	1d3b      	adds	r3, r7, #4
 80021ce:	2200      	movs	r2, #0
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	605a      	str	r2, [r3, #4]
 80021d4:	609a      	str	r2, [r3, #8]
 80021d6:	60da      	str	r2, [r3, #12]
 80021d8:	611a      	str	r2, [r3, #16]
 80021da:	615a      	str	r2, [r3, #20]
 80021dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021de:	4b22      	ldr	r3, [pc, #136]	; (8002268 <MX_TIM2_Init+0xac>)
 80021e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80021e6:	4b20      	ldr	r3, [pc, #128]	; (8002268 <MX_TIM2_Init+0xac>)
 80021e8:	2253      	movs	r2, #83	; 0x53
 80021ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ec:	4b1e      	ldr	r3, [pc, #120]	; (8002268 <MX_TIM2_Init+0xac>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80021f2:	4b1d      	ldr	r3, [pc, #116]	; (8002268 <MX_TIM2_Init+0xac>)
 80021f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021fa:	4b1b      	ldr	r3, [pc, #108]	; (8002268 <MX_TIM2_Init+0xac>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002200:	4b19      	ldr	r3, [pc, #100]	; (8002268 <MX_TIM2_Init+0xac>)
 8002202:	2200      	movs	r2, #0
 8002204:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002206:	4818      	ldr	r0, [pc, #96]	; (8002268 <MX_TIM2_Init+0xac>)
 8002208:	f002 fe8e 	bl	8004f28 <HAL_TIM_PWM_Init>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002212:	f000 f9e1 	bl	80025d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002216:	2300      	movs	r3, #0
 8002218:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800221a:	2300      	movs	r3, #0
 800221c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800221e:	f107 0320 	add.w	r3, r7, #32
 8002222:	4619      	mov	r1, r3
 8002224:	4810      	ldr	r0, [pc, #64]	; (8002268 <MX_TIM2_Init+0xac>)
 8002226:	f003 fba7 	bl	8005978 <HAL_TIMEx_MasterConfigSynchronization>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002230:	f000 f9d2 	bl	80025d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002234:	2360      	movs	r3, #96	; 0x60
 8002236:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002238:	2300      	movs	r3, #0
 800223a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800223c:	2300      	movs	r3, #0
 800223e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002240:	2300      	movs	r3, #0
 8002242:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002244:	1d3b      	adds	r3, r7, #4
 8002246:	2200      	movs	r2, #0
 8002248:	4619      	mov	r1, r3
 800224a:	4807      	ldr	r0, [pc, #28]	; (8002268 <MX_TIM2_Init+0xac>)
 800224c:	f003 f8a0 	bl	8005390 <HAL_TIM_PWM_ConfigChannel>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8002256:	f000 f9bf 	bl	80025d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800225a:	4803      	ldr	r0, [pc, #12]	; (8002268 <MX_TIM2_Init+0xac>)
 800225c:	f000 fb62 	bl	8002924 <HAL_TIM_MspPostInit>

}
 8002260:	bf00      	nop
 8002262:	3728      	adds	r7, #40	; 0x28
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	20000284 	.word	0x20000284

0800226c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b08a      	sub	sp, #40	; 0x28
 8002270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002272:	f107 0320 	add.w	r3, r7, #32
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800227c:	1d3b      	adds	r3, r7, #4
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	605a      	str	r2, [r3, #4]
 8002284:	609a      	str	r2, [r3, #8]
 8002286:	60da      	str	r2, [r3, #12]
 8002288:	611a      	str	r2, [r3, #16]
 800228a:	615a      	str	r2, [r3, #20]
 800228c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800228e:	4b2c      	ldr	r3, [pc, #176]	; (8002340 <MX_TIM3_Init+0xd4>)
 8002290:	4a2c      	ldr	r2, [pc, #176]	; (8002344 <MX_TIM3_Init+0xd8>)
 8002292:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8002294:	4b2a      	ldr	r3, [pc, #168]	; (8002340 <MX_TIM3_Init+0xd4>)
 8002296:	2253      	movs	r2, #83	; 0x53
 8002298:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800229a:	4b29      	ldr	r3, [pc, #164]	; (8002340 <MX_TIM3_Init+0xd4>)
 800229c:	2200      	movs	r2, #0
 800229e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49;
 80022a0:	4b27      	ldr	r3, [pc, #156]	; (8002340 <MX_TIM3_Init+0xd4>)
 80022a2:	2231      	movs	r2, #49	; 0x31
 80022a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022a6:	4b26      	ldr	r3, [pc, #152]	; (8002340 <MX_TIM3_Init+0xd4>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022ac:	4b24      	ldr	r3, [pc, #144]	; (8002340 <MX_TIM3_Init+0xd4>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80022b2:	4823      	ldr	r0, [pc, #140]	; (8002340 <MX_TIM3_Init+0xd4>)
 80022b4:	f002 fe38 	bl	8004f28 <HAL_TIM_PWM_Init>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80022be:	f000 f98b 	bl	80025d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022c2:	2300      	movs	r3, #0
 80022c4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022c6:	2300      	movs	r3, #0
 80022c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022ca:	f107 0320 	add.w	r3, r7, #32
 80022ce:	4619      	mov	r1, r3
 80022d0:	481b      	ldr	r0, [pc, #108]	; (8002340 <MX_TIM3_Init+0xd4>)
 80022d2:	f003 fb51 	bl	8005978 <HAL_TIMEx_MasterConfigSynchronization>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80022dc:	f000 f97c 	bl	80025d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022e0:	2360      	movs	r3, #96	; 0x60
 80022e2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80022e4:	2300      	movs	r3, #0
 80022e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022e8:	2300      	movs	r3, #0
 80022ea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022ec:	2300      	movs	r3, #0
 80022ee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022f0:	1d3b      	adds	r3, r7, #4
 80022f2:	2200      	movs	r2, #0
 80022f4:	4619      	mov	r1, r3
 80022f6:	4812      	ldr	r0, [pc, #72]	; (8002340 <MX_TIM3_Init+0xd4>)
 80022f8:	f003 f84a 	bl	8005390 <HAL_TIM_PWM_ConfigChannel>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002302:	f000 f969 	bl	80025d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002306:	1d3b      	adds	r3, r7, #4
 8002308:	2204      	movs	r2, #4
 800230a:	4619      	mov	r1, r3
 800230c:	480c      	ldr	r0, [pc, #48]	; (8002340 <MX_TIM3_Init+0xd4>)
 800230e:	f003 f83f 	bl	8005390 <HAL_TIM_PWM_ConfigChannel>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002318:	f000 f95e 	bl	80025d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800231c:	1d3b      	adds	r3, r7, #4
 800231e:	2208      	movs	r2, #8
 8002320:	4619      	mov	r1, r3
 8002322:	4807      	ldr	r0, [pc, #28]	; (8002340 <MX_TIM3_Init+0xd4>)
 8002324:	f003 f834 	bl	8005390 <HAL_TIM_PWM_ConfigChannel>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 800232e:	f000 f953 	bl	80025d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002332:	4803      	ldr	r0, [pc, #12]	; (8002340 <MX_TIM3_Init+0xd4>)
 8002334:	f000 faf6 	bl	8002924 <HAL_TIM_MspPostInit>

}
 8002338:	bf00      	nop
 800233a:	3728      	adds	r7, #40	; 0x28
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	200001ac 	.word	0x200001ac
 8002344:	40000400 	.word	0x40000400

08002348 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08c      	sub	sp, #48	; 0x30
 800234c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800234e:	f107 030c 	add.w	r3, r7, #12
 8002352:	2224      	movs	r2, #36	; 0x24
 8002354:	2100      	movs	r1, #0
 8002356:	4618      	mov	r0, r3
 8002358:	f003 ff0e 	bl	8006178 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800235c:	1d3b      	adds	r3, r7, #4
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002364:	4b20      	ldr	r3, [pc, #128]	; (80023e8 <MX_TIM4_Init+0xa0>)
 8002366:	4a21      	ldr	r2, [pc, #132]	; (80023ec <MX_TIM4_Init+0xa4>)
 8002368:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800236a:	4b1f      	ldr	r3, [pc, #124]	; (80023e8 <MX_TIM4_Init+0xa0>)
 800236c:	2200      	movs	r2, #0
 800236e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002370:	4b1d      	ldr	r3, [pc, #116]	; (80023e8 <MX_TIM4_Init+0xa0>)
 8002372:	2200      	movs	r2, #0
 8002374:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002376:	4b1c      	ldr	r3, [pc, #112]	; (80023e8 <MX_TIM4_Init+0xa0>)
 8002378:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800237c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800237e:	4b1a      	ldr	r3, [pc, #104]	; (80023e8 <MX_TIM4_Init+0xa0>)
 8002380:	2200      	movs	r2, #0
 8002382:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002384:	4b18      	ldr	r3, [pc, #96]	; (80023e8 <MX_TIM4_Init+0xa0>)
 8002386:	2200      	movs	r2, #0
 8002388:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800238a:	2303      	movs	r3, #3
 800238c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800238e:	2300      	movs	r3, #0
 8002390:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002392:	2301      	movs	r3, #1
 8002394:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002396:	2300      	movs	r3, #0
 8002398:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800239a:	2300      	movs	r3, #0
 800239c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800239e:	2300      	movs	r3, #0
 80023a0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80023a2:	2301      	movs	r3, #1
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80023a6:	2300      	movs	r3, #0
 80023a8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80023aa:	2300      	movs	r3, #0
 80023ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80023ae:	f107 030c 	add.w	r3, r7, #12
 80023b2:	4619      	mov	r1, r3
 80023b4:	480c      	ldr	r0, [pc, #48]	; (80023e8 <MX_TIM4_Init+0xa0>)
 80023b6:	f002 feb7 	bl	8005128 <HAL_TIM_Encoder_Init>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80023c0:	f000 f90a 	bl	80025d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023c4:	2300      	movs	r3, #0
 80023c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023c8:	2300      	movs	r3, #0
 80023ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80023cc:	1d3b      	adds	r3, r7, #4
 80023ce:	4619      	mov	r1, r3
 80023d0:	4805      	ldr	r0, [pc, #20]	; (80023e8 <MX_TIM4_Init+0xa0>)
 80023d2:	f003 fad1 	bl	8005978 <HAL_TIMEx_MasterConfigSynchronization>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80023dc:	f000 f8fc 	bl	80025d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80023e0:	bf00      	nop
 80023e2:	3730      	adds	r7, #48	; 0x30
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	20000110 	.word	0x20000110
 80023ec:	40000800 	.word	0x40000800

080023f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80023f4:	4b11      	ldr	r3, [pc, #68]	; (800243c <MX_USART2_UART_Init+0x4c>)
 80023f6:	4a12      	ldr	r2, [pc, #72]	; (8002440 <MX_USART2_UART_Init+0x50>)
 80023f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80023fa:	4b10      	ldr	r3, [pc, #64]	; (800243c <MX_USART2_UART_Init+0x4c>)
 80023fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002400:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002402:	4b0e      	ldr	r3, [pc, #56]	; (800243c <MX_USART2_UART_Init+0x4c>)
 8002404:	2200      	movs	r2, #0
 8002406:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002408:	4b0c      	ldr	r3, [pc, #48]	; (800243c <MX_USART2_UART_Init+0x4c>)
 800240a:	2200      	movs	r2, #0
 800240c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800240e:	4b0b      	ldr	r3, [pc, #44]	; (800243c <MX_USART2_UART_Init+0x4c>)
 8002410:	2200      	movs	r2, #0
 8002412:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002414:	4b09      	ldr	r3, [pc, #36]	; (800243c <MX_USART2_UART_Init+0x4c>)
 8002416:	220c      	movs	r2, #12
 8002418:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800241a:	4b08      	ldr	r3, [pc, #32]	; (800243c <MX_USART2_UART_Init+0x4c>)
 800241c:	2200      	movs	r2, #0
 800241e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002420:	4b06      	ldr	r3, [pc, #24]	; (800243c <MX_USART2_UART_Init+0x4c>)
 8002422:	2200      	movs	r2, #0
 8002424:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002426:	4805      	ldr	r0, [pc, #20]	; (800243c <MX_USART2_UART_Init+0x4c>)
 8002428:	f003 fb66 	bl	8005af8 <HAL_UART_Init>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002432:	f000 f8d1 	bl	80025d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	200002cc 	.word	0x200002cc
 8002440:	40004400 	.word	0x40004400

08002444 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b08a      	sub	sp, #40	; 0x28
 8002448:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800244a:	f107 0314 	add.w	r3, r7, #20
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	605a      	str	r2, [r3, #4]
 8002454:	609a      	str	r2, [r3, #8]
 8002456:	60da      	str	r2, [r3, #12]
 8002458:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800245a:	2300      	movs	r3, #0
 800245c:	613b      	str	r3, [r7, #16]
 800245e:	4b5a      	ldr	r3, [pc, #360]	; (80025c8 <MX_GPIO_Init+0x184>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002462:	4a59      	ldr	r2, [pc, #356]	; (80025c8 <MX_GPIO_Init+0x184>)
 8002464:	f043 0304 	orr.w	r3, r3, #4
 8002468:	6313      	str	r3, [r2, #48]	; 0x30
 800246a:	4b57      	ldr	r3, [pc, #348]	; (80025c8 <MX_GPIO_Init+0x184>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	f003 0304 	and.w	r3, r3, #4
 8002472:	613b      	str	r3, [r7, #16]
 8002474:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	4b53      	ldr	r3, [pc, #332]	; (80025c8 <MX_GPIO_Init+0x184>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	4a52      	ldr	r2, [pc, #328]	; (80025c8 <MX_GPIO_Init+0x184>)
 8002480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002484:	6313      	str	r3, [r2, #48]	; 0x30
 8002486:	4b50      	ldr	r3, [pc, #320]	; (80025c8 <MX_GPIO_Init+0x184>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002492:	2300      	movs	r3, #0
 8002494:	60bb      	str	r3, [r7, #8]
 8002496:	4b4c      	ldr	r3, [pc, #304]	; (80025c8 <MX_GPIO_Init+0x184>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	4a4b      	ldr	r2, [pc, #300]	; (80025c8 <MX_GPIO_Init+0x184>)
 800249c:	f043 0301 	orr.w	r3, r3, #1
 80024a0:	6313      	str	r3, [r2, #48]	; 0x30
 80024a2:	4b49      	ldr	r3, [pc, #292]	; (80025c8 <MX_GPIO_Init+0x184>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	60bb      	str	r3, [r7, #8]
 80024ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ae:	2300      	movs	r3, #0
 80024b0:	607b      	str	r3, [r7, #4]
 80024b2:	4b45      	ldr	r3, [pc, #276]	; (80025c8 <MX_GPIO_Init+0x184>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	4a44      	ldr	r2, [pc, #272]	; (80025c8 <MX_GPIO_Init+0x184>)
 80024b8:	f043 0302 	orr.w	r3, r3, #2
 80024bc:	6313      	str	r3, [r2, #48]	; 0x30
 80024be:	4b42      	ldr	r3, [pc, #264]	; (80025c8 <MX_GPIO_Init+0x184>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	607b      	str	r3, [r7, #4]
 80024c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 80024ca:	2200      	movs	r2, #0
 80024cc:	f44f 7108 	mov.w	r1, #544	; 0x220
 80024d0:	483e      	ldr	r0, [pc, #248]	; (80025cc <MX_GPIO_Init+0x188>)
 80024d2:	f001 faad 	bl	8003a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_5, GPIO_PIN_RESET);
 80024d6:	2200      	movs	r2, #0
 80024d8:	f242 0120 	movw	r1, #8224	; 0x2020
 80024dc:	483c      	ldr	r0, [pc, #240]	; (80025d0 <MX_GPIO_Init+0x18c>)
 80024de:	f001 faa7 	bl	8003a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80024e2:	2200      	movs	r2, #0
 80024e4:	2140      	movs	r1, #64	; 0x40
 80024e6:	483b      	ldr	r0, [pc, #236]	; (80025d4 <MX_GPIO_Init+0x190>)
 80024e8:	f001 faa2 	bl	8003a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80024ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80024f2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80024f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f8:	2300      	movs	r3, #0
 80024fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80024fc:	f107 0314 	add.w	r3, r7, #20
 8002500:	4619      	mov	r1, r3
 8002502:	4834      	ldr	r0, [pc, #208]	; (80025d4 <MX_GPIO_Init+0x190>)
 8002504:	f001 f8f8 	bl	80036f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002508:	2310      	movs	r3, #16
 800250a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800250c:	2300      	movs	r3, #0
 800250e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002510:	2300      	movs	r3, #0
 8002512:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002514:	f107 0314 	add.w	r3, r7, #20
 8002518:	4619      	mov	r1, r3
 800251a:	482c      	ldr	r0, [pc, #176]	; (80025cc <MX_GPIO_Init+0x188>)
 800251c:	f001 f8ec 	bl	80036f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9;
 8002520:	f44f 7308 	mov.w	r3, #544	; 0x220
 8002524:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002526:	2301      	movs	r3, #1
 8002528:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252a:	2300      	movs	r3, #0
 800252c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800252e:	2300      	movs	r3, #0
 8002530:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002532:	f107 0314 	add.w	r3, r7, #20
 8002536:	4619      	mov	r1, r3
 8002538:	4824      	ldr	r0, [pc, #144]	; (80025cc <MX_GPIO_Init+0x188>)
 800253a:	f001 f8dd 	bl	80036f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800253e:	23c0      	movs	r3, #192	; 0xc0
 8002540:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002542:	2300      	movs	r3, #0
 8002544:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002546:	2302      	movs	r3, #2
 8002548:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800254a:	f107 0314 	add.w	r3, r7, #20
 800254e:	4619      	mov	r1, r3
 8002550:	481e      	ldr	r0, [pc, #120]	; (80025cc <MX_GPIO_Init+0x188>)
 8002552:	f001 f8d1 	bl	80036f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002556:	2310      	movs	r3, #16
 8002558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800255a:	2300      	movs	r3, #0
 800255c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800255e:	2302      	movs	r3, #2
 8002560:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002562:	f107 0314 	add.w	r3, r7, #20
 8002566:	4619      	mov	r1, r3
 8002568:	481a      	ldr	r0, [pc, #104]	; (80025d4 <MX_GPIO_Init+0x190>)
 800256a:	f001 f8c5 	bl	80036f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800256e:	2301      	movs	r3, #1
 8002570:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002572:	2300      	movs	r3, #0
 8002574:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002576:	2300      	movs	r3, #0
 8002578:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800257a:	f107 0314 	add.w	r3, r7, #20
 800257e:	4619      	mov	r1, r3
 8002580:	4813      	ldr	r0, [pc, #76]	; (80025d0 <MX_GPIO_Init+0x18c>)
 8002582:	f001 f8b9 	bl	80036f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 8002586:	f242 0320 	movw	r3, #8224	; 0x2020
 800258a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800258c:	2301      	movs	r3, #1
 800258e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002590:	2300      	movs	r3, #0
 8002592:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002594:	2300      	movs	r3, #0
 8002596:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002598:	f107 0314 	add.w	r3, r7, #20
 800259c:	4619      	mov	r1, r3
 800259e:	480c      	ldr	r0, [pc, #48]	; (80025d0 <MX_GPIO_Init+0x18c>)
 80025a0:	f001 f8aa 	bl	80036f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80025a4:	2340      	movs	r3, #64	; 0x40
 80025a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025a8:	2301      	movs	r3, #1
 80025aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ac:	2300      	movs	r3, #0
 80025ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b0:	2300      	movs	r3, #0
 80025b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025b4:	f107 0314 	add.w	r3, r7, #20
 80025b8:	4619      	mov	r1, r3
 80025ba:	4806      	ldr	r0, [pc, #24]	; (80025d4 <MX_GPIO_Init+0x190>)
 80025bc:	f001 f89c 	bl	80036f8 <HAL_GPIO_Init>

}
 80025c0:	bf00      	nop
 80025c2:	3728      	adds	r7, #40	; 0x28
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40023800 	.word	0x40023800
 80025cc:	40020000 	.word	0x40020000
 80025d0:	40020400 	.word	0x40020400
 80025d4:	40020800 	.word	0x40020800

080025d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80025dc:	b672      	cpsid	i
}
 80025de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025e0:	e7fe      	b.n	80025e0 <Error_Handler+0x8>
	...

080025e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ea:	2300      	movs	r3, #0
 80025ec:	607b      	str	r3, [r7, #4]
 80025ee:	4b10      	ldr	r3, [pc, #64]	; (8002630 <HAL_MspInit+0x4c>)
 80025f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f2:	4a0f      	ldr	r2, [pc, #60]	; (8002630 <HAL_MspInit+0x4c>)
 80025f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025f8:	6453      	str	r3, [r2, #68]	; 0x44
 80025fa:	4b0d      	ldr	r3, [pc, #52]	; (8002630 <HAL_MspInit+0x4c>)
 80025fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002602:	607b      	str	r3, [r7, #4]
 8002604:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002606:	2300      	movs	r3, #0
 8002608:	603b      	str	r3, [r7, #0]
 800260a:	4b09      	ldr	r3, [pc, #36]	; (8002630 <HAL_MspInit+0x4c>)
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	4a08      	ldr	r2, [pc, #32]	; (8002630 <HAL_MspInit+0x4c>)
 8002610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002614:	6413      	str	r3, [r2, #64]	; 0x40
 8002616:	4b06      	ldr	r3, [pc, #24]	; (8002630 <HAL_MspInit+0x4c>)
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800261e:	603b      	str	r3, [r7, #0]
 8002620:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002622:	2007      	movs	r0, #7
 8002624:	f001 f834 	bl	8003690 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002628:	bf00      	nop
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40023800 	.word	0x40023800

08002634 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b08a      	sub	sp, #40	; 0x28
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800263c:	f107 0314 	add.w	r3, r7, #20
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	609a      	str	r2, [r3, #8]
 8002648:	60da      	str	r2, [r3, #12]
 800264a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a17      	ldr	r2, [pc, #92]	; (80026b0 <HAL_ADC_MspInit+0x7c>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d127      	bne.n	80026a6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	613b      	str	r3, [r7, #16]
 800265a:	4b16      	ldr	r3, [pc, #88]	; (80026b4 <HAL_ADC_MspInit+0x80>)
 800265c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265e:	4a15      	ldr	r2, [pc, #84]	; (80026b4 <HAL_ADC_MspInit+0x80>)
 8002660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002664:	6453      	str	r3, [r2, #68]	; 0x44
 8002666:	4b13      	ldr	r3, [pc, #76]	; (80026b4 <HAL_ADC_MspInit+0x80>)
 8002668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266e:	613b      	str	r3, [r7, #16]
 8002670:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	4b0f      	ldr	r3, [pc, #60]	; (80026b4 <HAL_ADC_MspInit+0x80>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267a:	4a0e      	ldr	r2, [pc, #56]	; (80026b4 <HAL_ADC_MspInit+0x80>)
 800267c:	f043 0301 	orr.w	r3, r3, #1
 8002680:	6313      	str	r3, [r2, #48]	; 0x30
 8002682:	4b0c      	ldr	r3, [pc, #48]	; (80026b4 <HAL_ADC_MspInit+0x80>)
 8002684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800268e:	2301      	movs	r3, #1
 8002690:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002692:	2303      	movs	r3, #3
 8002694:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002696:	2300      	movs	r3, #0
 8002698:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800269a:	f107 0314 	add.w	r3, r7, #20
 800269e:	4619      	mov	r1, r3
 80026a0:	4805      	ldr	r0, [pc, #20]	; (80026b8 <HAL_ADC_MspInit+0x84>)
 80026a2:	f001 f829 	bl	80036f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80026a6:	bf00      	nop
 80026a8:	3728      	adds	r7, #40	; 0x28
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40012000 	.word	0x40012000
 80026b4:	40023800 	.word	0x40023800
 80026b8:	40020000 	.word	0x40020000

080026bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b08c      	sub	sp, #48	; 0x30
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c4:	f107 031c 	add.w	r3, r7, #28
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	605a      	str	r2, [r3, #4]
 80026ce:	609a      	str	r2, [r3, #8]
 80026d0:	60da      	str	r2, [r3, #12]
 80026d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a42      	ldr	r2, [pc, #264]	; (80027e4 <HAL_I2C_MspInit+0x128>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d12d      	bne.n	800273a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	61bb      	str	r3, [r7, #24]
 80026e2:	4b41      	ldr	r3, [pc, #260]	; (80027e8 <HAL_I2C_MspInit+0x12c>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e6:	4a40      	ldr	r2, [pc, #256]	; (80027e8 <HAL_I2C_MspInit+0x12c>)
 80026e8:	f043 0302 	orr.w	r3, r3, #2
 80026ec:	6313      	str	r3, [r2, #48]	; 0x30
 80026ee:	4b3e      	ldr	r3, [pc, #248]	; (80027e8 <HAL_I2C_MspInit+0x12c>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	61bb      	str	r3, [r7, #24]
 80026f8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80026fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80026fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002700:	2312      	movs	r3, #18
 8002702:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002704:	2300      	movs	r3, #0
 8002706:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002708:	2303      	movs	r3, #3
 800270a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800270c:	2304      	movs	r3, #4
 800270e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002710:	f107 031c 	add.w	r3, r7, #28
 8002714:	4619      	mov	r1, r3
 8002716:	4835      	ldr	r0, [pc, #212]	; (80027ec <HAL_I2C_MspInit+0x130>)
 8002718:	f000 ffee 	bl	80036f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800271c:	2300      	movs	r3, #0
 800271e:	617b      	str	r3, [r7, #20]
 8002720:	4b31      	ldr	r3, [pc, #196]	; (80027e8 <HAL_I2C_MspInit+0x12c>)
 8002722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002724:	4a30      	ldr	r2, [pc, #192]	; (80027e8 <HAL_I2C_MspInit+0x12c>)
 8002726:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800272a:	6413      	str	r3, [r2, #64]	; 0x40
 800272c:	4b2e      	ldr	r3, [pc, #184]	; (80027e8 <HAL_I2C_MspInit+0x12c>)
 800272e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002730:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002734:	617b      	str	r3, [r7, #20]
 8002736:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002738:	e050      	b.n	80027dc <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a2c      	ldr	r2, [pc, #176]	; (80027f0 <HAL_I2C_MspInit+0x134>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d14b      	bne.n	80027dc <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002744:	2300      	movs	r3, #0
 8002746:	613b      	str	r3, [r7, #16]
 8002748:	4b27      	ldr	r3, [pc, #156]	; (80027e8 <HAL_I2C_MspInit+0x12c>)
 800274a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274c:	4a26      	ldr	r2, [pc, #152]	; (80027e8 <HAL_I2C_MspInit+0x12c>)
 800274e:	f043 0304 	orr.w	r3, r3, #4
 8002752:	6313      	str	r3, [r2, #48]	; 0x30
 8002754:	4b24      	ldr	r3, [pc, #144]	; (80027e8 <HAL_I2C_MspInit+0x12c>)
 8002756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	613b      	str	r3, [r7, #16]
 800275e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002760:	2300      	movs	r3, #0
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	4b20      	ldr	r3, [pc, #128]	; (80027e8 <HAL_I2C_MspInit+0x12c>)
 8002766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002768:	4a1f      	ldr	r2, [pc, #124]	; (80027e8 <HAL_I2C_MspInit+0x12c>)
 800276a:	f043 0301 	orr.w	r3, r3, #1
 800276e:	6313      	str	r3, [r2, #48]	; 0x30
 8002770:	4b1d      	ldr	r3, [pc, #116]	; (80027e8 <HAL_I2C_MspInit+0x12c>)
 8002772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800277c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002780:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002782:	2312      	movs	r3, #18
 8002784:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002786:	2300      	movs	r3, #0
 8002788:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800278a:	2303      	movs	r3, #3
 800278c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800278e:	2304      	movs	r3, #4
 8002790:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002792:	f107 031c 	add.w	r3, r7, #28
 8002796:	4619      	mov	r1, r3
 8002798:	4816      	ldr	r0, [pc, #88]	; (80027f4 <HAL_I2C_MspInit+0x138>)
 800279a:	f000 ffad 	bl	80036f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800279e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027a4:	2312      	movs	r3, #18
 80027a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a8:	2300      	movs	r3, #0
 80027aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ac:	2303      	movs	r3, #3
 80027ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80027b0:	2304      	movs	r3, #4
 80027b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b4:	f107 031c 	add.w	r3, r7, #28
 80027b8:	4619      	mov	r1, r3
 80027ba:	480f      	ldr	r0, [pc, #60]	; (80027f8 <HAL_I2C_MspInit+0x13c>)
 80027bc:	f000 ff9c 	bl	80036f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80027c0:	2300      	movs	r3, #0
 80027c2:	60bb      	str	r3, [r7, #8]
 80027c4:	4b08      	ldr	r3, [pc, #32]	; (80027e8 <HAL_I2C_MspInit+0x12c>)
 80027c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c8:	4a07      	ldr	r2, [pc, #28]	; (80027e8 <HAL_I2C_MspInit+0x12c>)
 80027ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027ce:	6413      	str	r3, [r2, #64]	; 0x40
 80027d0:	4b05      	ldr	r3, [pc, #20]	; (80027e8 <HAL_I2C_MspInit+0x12c>)
 80027d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027d8:	60bb      	str	r3, [r7, #8]
 80027da:	68bb      	ldr	r3, [r7, #8]
}
 80027dc:	bf00      	nop
 80027de:	3730      	adds	r7, #48	; 0x30
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	40005400 	.word	0x40005400
 80027e8:	40023800 	.word	0x40023800
 80027ec:	40020400 	.word	0x40020400
 80027f0:	40005c00 	.word	0x40005c00
 80027f4:	40020800 	.word	0x40020800
 80027f8:	40020000 	.word	0x40020000

080027fc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b087      	sub	sp, #28
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a1f      	ldr	r2, [pc, #124]	; (8002888 <HAL_TIM_PWM_MspInit+0x8c>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d10e      	bne.n	800282c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800280e:	2300      	movs	r3, #0
 8002810:	617b      	str	r3, [r7, #20]
 8002812:	4b1e      	ldr	r3, [pc, #120]	; (800288c <HAL_TIM_PWM_MspInit+0x90>)
 8002814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002816:	4a1d      	ldr	r2, [pc, #116]	; (800288c <HAL_TIM_PWM_MspInit+0x90>)
 8002818:	f043 0301 	orr.w	r3, r3, #1
 800281c:	6453      	str	r3, [r2, #68]	; 0x44
 800281e:	4b1b      	ldr	r3, [pc, #108]	; (800288c <HAL_TIM_PWM_MspInit+0x90>)
 8002820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	617b      	str	r3, [r7, #20]
 8002828:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800282a:	e026      	b.n	800287a <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM2)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002834:	d10e      	bne.n	8002854 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002836:	2300      	movs	r3, #0
 8002838:	613b      	str	r3, [r7, #16]
 800283a:	4b14      	ldr	r3, [pc, #80]	; (800288c <HAL_TIM_PWM_MspInit+0x90>)
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	4a13      	ldr	r2, [pc, #76]	; (800288c <HAL_TIM_PWM_MspInit+0x90>)
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	6413      	str	r3, [r2, #64]	; 0x40
 8002846:	4b11      	ldr	r3, [pc, #68]	; (800288c <HAL_TIM_PWM_MspInit+0x90>)
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	613b      	str	r3, [r7, #16]
 8002850:	693b      	ldr	r3, [r7, #16]
}
 8002852:	e012      	b.n	800287a <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a0d      	ldr	r2, [pc, #52]	; (8002890 <HAL_TIM_PWM_MspInit+0x94>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d10d      	bne.n	800287a <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800285e:	2300      	movs	r3, #0
 8002860:	60fb      	str	r3, [r7, #12]
 8002862:	4b0a      	ldr	r3, [pc, #40]	; (800288c <HAL_TIM_PWM_MspInit+0x90>)
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	4a09      	ldr	r2, [pc, #36]	; (800288c <HAL_TIM_PWM_MspInit+0x90>)
 8002868:	f043 0302 	orr.w	r3, r3, #2
 800286c:	6413      	str	r3, [r2, #64]	; 0x40
 800286e:	4b07      	ldr	r3, [pc, #28]	; (800288c <HAL_TIM_PWM_MspInit+0x90>)
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	68fb      	ldr	r3, [r7, #12]
}
 800287a:	bf00      	nop
 800287c:	371c      	adds	r7, #28
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	40010000 	.word	0x40010000
 800288c:	40023800 	.word	0x40023800
 8002890:	40000400 	.word	0x40000400

08002894 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b08a      	sub	sp, #40	; 0x28
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800289c:	f107 0314 	add.w	r3, r7, #20
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	605a      	str	r2, [r3, #4]
 80028a6:	609a      	str	r2, [r3, #8]
 80028a8:	60da      	str	r2, [r3, #12]
 80028aa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a19      	ldr	r2, [pc, #100]	; (8002918 <HAL_TIM_Encoder_MspInit+0x84>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d12b      	bne.n	800290e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80028b6:	2300      	movs	r3, #0
 80028b8:	613b      	str	r3, [r7, #16]
 80028ba:	4b18      	ldr	r3, [pc, #96]	; (800291c <HAL_TIM_Encoder_MspInit+0x88>)
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	4a17      	ldr	r2, [pc, #92]	; (800291c <HAL_TIM_Encoder_MspInit+0x88>)
 80028c0:	f043 0304 	orr.w	r3, r3, #4
 80028c4:	6413      	str	r3, [r2, #64]	; 0x40
 80028c6:	4b15      	ldr	r3, [pc, #84]	; (800291c <HAL_TIM_Encoder_MspInit+0x88>)
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ca:	f003 0304 	and.w	r3, r3, #4
 80028ce:	613b      	str	r3, [r7, #16]
 80028d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028d2:	2300      	movs	r3, #0
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	4b11      	ldr	r3, [pc, #68]	; (800291c <HAL_TIM_Encoder_MspInit+0x88>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	4a10      	ldr	r2, [pc, #64]	; (800291c <HAL_TIM_Encoder_MspInit+0x88>)
 80028dc:	f043 0302 	orr.w	r3, r3, #2
 80028e0:	6313      	str	r3, [r2, #48]	; 0x30
 80028e2:	4b0e      	ldr	r3, [pc, #56]	; (800291c <HAL_TIM_Encoder_MspInit+0x88>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028ee:	23c0      	movs	r3, #192	; 0xc0
 80028f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f2:	2302      	movs	r3, #2
 80028f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f6:	2300      	movs	r3, #0
 80028f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028fa:	2300      	movs	r3, #0
 80028fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80028fe:	2302      	movs	r3, #2
 8002900:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002902:	f107 0314 	add.w	r3, r7, #20
 8002906:	4619      	mov	r1, r3
 8002908:	4805      	ldr	r0, [pc, #20]	; (8002920 <HAL_TIM_Encoder_MspInit+0x8c>)
 800290a:	f000 fef5 	bl	80036f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800290e:	bf00      	nop
 8002910:	3728      	adds	r7, #40	; 0x28
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	40000800 	.word	0x40000800
 800291c:	40023800 	.word	0x40023800
 8002920:	40020400 	.word	0x40020400

08002924 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b08c      	sub	sp, #48	; 0x30
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800292c:	f107 031c 	add.w	r3, r7, #28
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	605a      	str	r2, [r3, #4]
 8002936:	609a      	str	r2, [r3, #8]
 8002938:	60da      	str	r2, [r3, #12]
 800293a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a46      	ldr	r2, [pc, #280]	; (8002a5c <HAL_TIM_MspPostInit+0x138>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d11f      	bne.n	8002986 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002946:	2300      	movs	r3, #0
 8002948:	61bb      	str	r3, [r7, #24]
 800294a:	4b45      	ldr	r3, [pc, #276]	; (8002a60 <HAL_TIM_MspPostInit+0x13c>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294e:	4a44      	ldr	r2, [pc, #272]	; (8002a60 <HAL_TIM_MspPostInit+0x13c>)
 8002950:	f043 0301 	orr.w	r3, r3, #1
 8002954:	6313      	str	r3, [r2, #48]	; 0x30
 8002956:	4b42      	ldr	r3, [pc, #264]	; (8002a60 <HAL_TIM_MspPostInit+0x13c>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	61bb      	str	r3, [r7, #24]
 8002960:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002962:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002968:	2302      	movs	r3, #2
 800296a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296c:	2300      	movs	r3, #0
 800296e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002970:	2300      	movs	r3, #0
 8002972:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002974:	2301      	movs	r3, #1
 8002976:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002978:	f107 031c 	add.w	r3, r7, #28
 800297c:	4619      	mov	r1, r3
 800297e:	4839      	ldr	r0, [pc, #228]	; (8002a64 <HAL_TIM_MspPostInit+0x140>)
 8002980:	f000 feba 	bl	80036f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002984:	e066      	b.n	8002a54 <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM2)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800298e:	d11f      	bne.n	80029d0 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002990:	2300      	movs	r3, #0
 8002992:	617b      	str	r3, [r7, #20]
 8002994:	4b32      	ldr	r3, [pc, #200]	; (8002a60 <HAL_TIM_MspPostInit+0x13c>)
 8002996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002998:	4a31      	ldr	r2, [pc, #196]	; (8002a60 <HAL_TIM_MspPostInit+0x13c>)
 800299a:	f043 0301 	orr.w	r3, r3, #1
 800299e:	6313      	str	r3, [r2, #48]	; 0x30
 80029a0:	4b2f      	ldr	r3, [pc, #188]	; (8002a60 <HAL_TIM_MspPostInit+0x13c>)
 80029a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	617b      	str	r3, [r7, #20]
 80029aa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80029ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b2:	2302      	movs	r3, #2
 80029b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b6:	2300      	movs	r3, #0
 80029b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ba:	2300      	movs	r3, #0
 80029bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029be:	2301      	movs	r3, #1
 80029c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029c2:	f107 031c 	add.w	r3, r7, #28
 80029c6:	4619      	mov	r1, r3
 80029c8:	4826      	ldr	r0, [pc, #152]	; (8002a64 <HAL_TIM_MspPostInit+0x140>)
 80029ca:	f000 fe95 	bl	80036f8 <HAL_GPIO_Init>
}
 80029ce:	e041      	b.n	8002a54 <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM3)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a24      	ldr	r2, [pc, #144]	; (8002a68 <HAL_TIM_MspPostInit+0x144>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d13c      	bne.n	8002a54 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029da:	2300      	movs	r3, #0
 80029dc:	613b      	str	r3, [r7, #16]
 80029de:	4b20      	ldr	r3, [pc, #128]	; (8002a60 <HAL_TIM_MspPostInit+0x13c>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	4a1f      	ldr	r2, [pc, #124]	; (8002a60 <HAL_TIM_MspPostInit+0x13c>)
 80029e4:	f043 0304 	orr.w	r3, r3, #4
 80029e8:	6313      	str	r3, [r2, #48]	; 0x30
 80029ea:	4b1d      	ldr	r3, [pc, #116]	; (8002a60 <HAL_TIM_MspPostInit+0x13c>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ee:	f003 0304 	and.w	r3, r3, #4
 80029f2:	613b      	str	r3, [r7, #16]
 80029f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029f6:	2300      	movs	r3, #0
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	4b19      	ldr	r3, [pc, #100]	; (8002a60 <HAL_TIM_MspPostInit+0x13c>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	4a18      	ldr	r2, [pc, #96]	; (8002a60 <HAL_TIM_MspPostInit+0x13c>)
 8002a00:	f043 0302 	orr.w	r3, r3, #2
 8002a04:	6313      	str	r3, [r2, #48]	; 0x30
 8002a06:	4b16      	ldr	r3, [pc, #88]	; (8002a60 <HAL_TIM_MspPostInit+0x13c>)
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002a12:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002a16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a18:	2302      	movs	r3, #2
 8002a1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a20:	2300      	movs	r3, #0
 8002a22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a24:	2302      	movs	r3, #2
 8002a26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a28:	f107 031c 	add.w	r3, r7, #28
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	480f      	ldr	r0, [pc, #60]	; (8002a6c <HAL_TIM_MspPostInit+0x148>)
 8002a30:	f000 fe62 	bl	80036f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002a34:	2310      	movs	r3, #16
 8002a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a38:	2302      	movs	r3, #2
 8002a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a40:	2300      	movs	r3, #0
 8002a42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a44:	2302      	movs	r3, #2
 8002a46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a48:	f107 031c 	add.w	r3, r7, #28
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	4808      	ldr	r0, [pc, #32]	; (8002a70 <HAL_TIM_MspPostInit+0x14c>)
 8002a50:	f000 fe52 	bl	80036f8 <HAL_GPIO_Init>
}
 8002a54:	bf00      	nop
 8002a56:	3730      	adds	r7, #48	; 0x30
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	40010000 	.word	0x40010000
 8002a60:	40023800 	.word	0x40023800
 8002a64:	40020000 	.word	0x40020000
 8002a68:	40000400 	.word	0x40000400
 8002a6c:	40020800 	.word	0x40020800
 8002a70:	40020400 	.word	0x40020400

08002a74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b08a      	sub	sp, #40	; 0x28
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a7c:	f107 0314 	add.w	r3, r7, #20
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	605a      	str	r2, [r3, #4]
 8002a86:	609a      	str	r2, [r3, #8]
 8002a88:	60da      	str	r2, [r3, #12]
 8002a8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a19      	ldr	r2, [pc, #100]	; (8002af8 <HAL_UART_MspInit+0x84>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d12b      	bne.n	8002aee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a96:	2300      	movs	r3, #0
 8002a98:	613b      	str	r3, [r7, #16]
 8002a9a:	4b18      	ldr	r3, [pc, #96]	; (8002afc <HAL_UART_MspInit+0x88>)
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	4a17      	ldr	r2, [pc, #92]	; (8002afc <HAL_UART_MspInit+0x88>)
 8002aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8002aa6:	4b15      	ldr	r3, [pc, #84]	; (8002afc <HAL_UART_MspInit+0x88>)
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aae:	613b      	str	r3, [r7, #16]
 8002ab0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60fb      	str	r3, [r7, #12]
 8002ab6:	4b11      	ldr	r3, [pc, #68]	; (8002afc <HAL_UART_MspInit+0x88>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	4a10      	ldr	r2, [pc, #64]	; (8002afc <HAL_UART_MspInit+0x88>)
 8002abc:	f043 0301 	orr.w	r3, r3, #1
 8002ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac2:	4b0e      	ldr	r3, [pc, #56]	; (8002afc <HAL_UART_MspInit+0x88>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002ace:	230c      	movs	r3, #12
 8002ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ada:	2300      	movs	r3, #0
 8002adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ade:	2307      	movs	r3, #7
 8002ae0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae2:	f107 0314 	add.w	r3, r7, #20
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	4805      	ldr	r0, [pc, #20]	; (8002b00 <HAL_UART_MspInit+0x8c>)
 8002aea:	f000 fe05 	bl	80036f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002aee:	bf00      	nop
 8002af0:	3728      	adds	r7, #40	; 0x28
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40004400 	.word	0x40004400
 8002afc:	40023800 	.word	0x40023800
 8002b00:	40020000 	.word	0x40020000

08002b04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b08:	e7fe      	b.n	8002b08 <NMI_Handler+0x4>

08002b0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b0e:	e7fe      	b.n	8002b0e <HardFault_Handler+0x4>

08002b10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b14:	e7fe      	b.n	8002b14 <MemManage_Handler+0x4>

08002b16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b16:	b480      	push	{r7}
 8002b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b1a:	e7fe      	b.n	8002b1a <BusFault_Handler+0x4>

08002b1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b20:	e7fe      	b.n	8002b20 <UsageFault_Handler+0x4>

08002b22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b22:	b480      	push	{r7}
 8002b24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b26:	bf00      	nop
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b34:	bf00      	nop
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr

08002b3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b42:	bf00      	nop
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b50:	f000 f8c6 	bl	8002ce0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b54:	bf00      	nop
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b60:	4a14      	ldr	r2, [pc, #80]	; (8002bb4 <_sbrk+0x5c>)
 8002b62:	4b15      	ldr	r3, [pc, #84]	; (8002bb8 <_sbrk+0x60>)
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b6c:	4b13      	ldr	r3, [pc, #76]	; (8002bbc <_sbrk+0x64>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d102      	bne.n	8002b7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b74:	4b11      	ldr	r3, [pc, #68]	; (8002bbc <_sbrk+0x64>)
 8002b76:	4a12      	ldr	r2, [pc, #72]	; (8002bc0 <_sbrk+0x68>)
 8002b78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b7a:	4b10      	ldr	r3, [pc, #64]	; (8002bbc <_sbrk+0x64>)
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4413      	add	r3, r2
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d207      	bcs.n	8002b98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b88:	f003 facc 	bl	8006124 <__errno>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	220c      	movs	r2, #12
 8002b90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b96:	e009      	b.n	8002bac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b98:	4b08      	ldr	r3, [pc, #32]	; (8002bbc <_sbrk+0x64>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b9e:	4b07      	ldr	r3, [pc, #28]	; (8002bbc <_sbrk+0x64>)
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	4a05      	ldr	r2, [pc, #20]	; (8002bbc <_sbrk+0x64>)
 8002ba8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002baa:	68fb      	ldr	r3, [r7, #12]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3718      	adds	r7, #24
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	20018000 	.word	0x20018000
 8002bb8:	00000400 	.word	0x00000400
 8002bbc:	200000b0 	.word	0x200000b0
 8002bc0:	20000328 	.word	0x20000328

08002bc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bc8:	4b06      	ldr	r3, [pc, #24]	; (8002be4 <SystemInit+0x20>)
 8002bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bce:	4a05      	ldr	r2, [pc, #20]	; (8002be4 <SystemInit+0x20>)
 8002bd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bd8:	bf00      	nop
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	e000ed00 	.word	0xe000ed00

08002be8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002be8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bec:	480d      	ldr	r0, [pc, #52]	; (8002c24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002bee:	490e      	ldr	r1, [pc, #56]	; (8002c28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002bf0:	4a0e      	ldr	r2, [pc, #56]	; (8002c2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002bf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bf4:	e002      	b.n	8002bfc <LoopCopyDataInit>

08002bf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bfa:	3304      	adds	r3, #4

08002bfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c00:	d3f9      	bcc.n	8002bf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c02:	4a0b      	ldr	r2, [pc, #44]	; (8002c30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c04:	4c0b      	ldr	r4, [pc, #44]	; (8002c34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c08:	e001      	b.n	8002c0e <LoopFillZerobss>

08002c0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c0c:	3204      	adds	r2, #4

08002c0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c10:	d3fb      	bcc.n	8002c0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002c12:	f7ff ffd7 	bl	8002bc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c16:	f003 fa8b 	bl	8006130 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c1a:	f7fe ff55 	bl	8001ac8 <main>
  bx  lr    
 8002c1e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c20:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002c24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c28:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002c2c:	08008c58 	.word	0x08008c58
  ldr r2, =_sbss
 8002c30:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002c34:	20000324 	.word	0x20000324

08002c38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c38:	e7fe      	b.n	8002c38 <ADC_IRQHandler>
	...

08002c3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c40:	4b0e      	ldr	r3, [pc, #56]	; (8002c7c <HAL_Init+0x40>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a0d      	ldr	r2, [pc, #52]	; (8002c7c <HAL_Init+0x40>)
 8002c46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c4c:	4b0b      	ldr	r3, [pc, #44]	; (8002c7c <HAL_Init+0x40>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a0a      	ldr	r2, [pc, #40]	; (8002c7c <HAL_Init+0x40>)
 8002c52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c58:	4b08      	ldr	r3, [pc, #32]	; (8002c7c <HAL_Init+0x40>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a07      	ldr	r2, [pc, #28]	; (8002c7c <HAL_Init+0x40>)
 8002c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c64:	2003      	movs	r0, #3
 8002c66:	f000 fd13 	bl	8003690 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c6a:	2000      	movs	r0, #0
 8002c6c:	f000 f808 	bl	8002c80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c70:	f7ff fcb8 	bl	80025e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40023c00 	.word	0x40023c00

08002c80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c88:	4b12      	ldr	r3, [pc, #72]	; (8002cd4 <HAL_InitTick+0x54>)
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	4b12      	ldr	r3, [pc, #72]	; (8002cd8 <HAL_InitTick+0x58>)
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	4619      	mov	r1, r3
 8002c92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c96:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f000 fd1d 	bl	80036de <HAL_SYSTICK_Config>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e00e      	b.n	8002ccc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2b0f      	cmp	r3, #15
 8002cb2:	d80a      	bhi.n	8002cca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	6879      	ldr	r1, [r7, #4]
 8002cb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cbc:	f000 fcf3 	bl	80036a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cc0:	4a06      	ldr	r2, [pc, #24]	; (8002cdc <HAL_InitTick+0x5c>)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	e000      	b.n	8002ccc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	20000004 	.word	0x20000004
 8002cd8:	2000000c 	.word	0x2000000c
 8002cdc:	20000008 	.word	0x20000008

08002ce0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ce4:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <HAL_IncTick+0x20>)
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	461a      	mov	r2, r3
 8002cea:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <HAL_IncTick+0x24>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4413      	add	r3, r2
 8002cf0:	4a04      	ldr	r2, [pc, #16]	; (8002d04 <HAL_IncTick+0x24>)
 8002cf2:	6013      	str	r3, [r2, #0]
}
 8002cf4:	bf00      	nop
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	2000000c 	.word	0x2000000c
 8002d04:	20000310 	.word	0x20000310

08002d08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d0c:	4b03      	ldr	r3, [pc, #12]	; (8002d1c <HAL_GetTick+0x14>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	20000310 	.word	0x20000310

08002d20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d28:	f7ff ffee 	bl	8002d08 <HAL_GetTick>
 8002d2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d38:	d005      	beq.n	8002d46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d3a:	4b0a      	ldr	r3, [pc, #40]	; (8002d64 <HAL_Delay+0x44>)
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	461a      	mov	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	4413      	add	r3, r2
 8002d44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d46:	bf00      	nop
 8002d48:	f7ff ffde 	bl	8002d08 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d8f7      	bhi.n	8002d48 <HAL_Delay+0x28>
  {
  }
}
 8002d58:	bf00      	nop
 8002d5a:	bf00      	nop
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	2000000c 	.word	0x2000000c

08002d68 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d70:	2300      	movs	r3, #0
 8002d72:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e033      	b.n	8002de6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d109      	bne.n	8002d9a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7ff fc54 	bl	8002634 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	f003 0310 	and.w	r3, r3, #16
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d118      	bne.n	8002dd8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002dae:	f023 0302 	bic.w	r3, r3, #2
 8002db2:	f043 0202 	orr.w	r2, r3, #2
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 faba 	bl	8003334 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	f023 0303 	bic.w	r3, r3, #3
 8002dce:	f043 0201 	orr.w	r2, r3, #1
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	641a      	str	r2, [r3, #64]	; 0x40
 8002dd6:	e001      	b.n	8002ddc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3710      	adds	r7, #16
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
	...

08002df0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d101      	bne.n	8002e0a <HAL_ADC_Start+0x1a>
 8002e06:	2302      	movs	r3, #2
 8002e08:	e097      	b.n	8002f3a <HAL_ADC_Start+0x14a>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d018      	beq.n	8002e52 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689a      	ldr	r2, [r3, #8]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f042 0201 	orr.w	r2, r2, #1
 8002e2e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e30:	4b45      	ldr	r3, [pc, #276]	; (8002f48 <HAL_ADC_Start+0x158>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a45      	ldr	r2, [pc, #276]	; (8002f4c <HAL_ADC_Start+0x15c>)
 8002e36:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3a:	0c9a      	lsrs	r2, r3, #18
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	4413      	add	r3, r2
 8002e42:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002e44:	e002      	b.n	8002e4c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1f9      	bne.n	8002e46 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f003 0301 	and.w	r3, r3, #1
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d15f      	bne.n	8002f20 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e64:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002e68:	f023 0301 	bic.w	r3, r3, #1
 8002e6c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d007      	beq.n	8002e92 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e8a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e9e:	d106      	bne.n	8002eae <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea4:	f023 0206 	bic.w	r2, r3, #6
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	645a      	str	r2, [r3, #68]	; 0x44
 8002eac:	e002      	b.n	8002eb4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ebc:	4b24      	ldr	r3, [pc, #144]	; (8002f50 <HAL_ADC_Start+0x160>)
 8002ebe:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002ec8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f003 031f 	and.w	r3, r3, #31
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10f      	bne.n	8002ef6 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d129      	bne.n	8002f38 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689a      	ldr	r2, [r3, #8]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ef2:	609a      	str	r2, [r3, #8]
 8002ef4:	e020      	b.n	8002f38 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a16      	ldr	r2, [pc, #88]	; (8002f54 <HAL_ADC_Start+0x164>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d11b      	bne.n	8002f38 <HAL_ADC_Start+0x148>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d114      	bne.n	8002f38 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f1c:	609a      	str	r2, [r3, #8]
 8002f1e:	e00b      	b.n	8002f38 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f24:	f043 0210 	orr.w	r2, r3, #16
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f30:	f043 0201 	orr.w	r2, r3, #1
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3714      	adds	r7, #20
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	20000004 	.word	0x20000004
 8002f4c:	431bde83 	.word	0x431bde83
 8002f50:	40012300 	.word	0x40012300
 8002f54:	40012000 	.word	0x40012000

08002f58 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d101      	bne.n	8002f6e <HAL_ADC_Stop+0x16>
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	e021      	b.n	8002fb2 <HAL_ADC_Stop+0x5a>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 0201 	bic.w	r2, r2, #1
 8002f84:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d109      	bne.n	8002fa8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f98:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f9c:	f023 0301 	bic.w	r3, r3, #1
 8002fa0:	f043 0201 	orr.w	r2, r3, #1
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr

08002fbe <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b084      	sub	sp, #16
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
 8002fc6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fda:	d113      	bne.n	8003004 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fea:	d10b      	bne.n	8003004 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff0:	f043 0220 	orr.w	r2, r3, #32
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e063      	b.n	80030cc <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003004:	f7ff fe80 	bl	8002d08 <HAL_GetTick>
 8003008:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800300a:	e021      	b.n	8003050 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003012:	d01d      	beq.n	8003050 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d007      	beq.n	800302a <HAL_ADC_PollForConversion+0x6c>
 800301a:	f7ff fe75 	bl	8002d08 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	429a      	cmp	r2, r3
 8003028:	d212      	bcs.n	8003050 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b02      	cmp	r3, #2
 8003036:	d00b      	beq.n	8003050 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303c:	f043 0204 	orr.w	r2, r3, #4
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e03d      	b.n	80030cc <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b02      	cmp	r3, #2
 800305c:	d1d6      	bne.n	800300c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f06f 0212 	mvn.w	r2, #18
 8003066:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d123      	bne.n	80030ca <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003086:	2b00      	cmp	r3, #0
 8003088:	d11f      	bne.n	80030ca <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003090:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003094:	2b00      	cmp	r3, #0
 8003096:	d006      	beq.n	80030a6 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d111      	bne.n	80030ca <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d105      	bne.n	80030ca <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	f043 0201 	orr.w	r2, r3, #1
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3710      	adds	r7, #16
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
	...

080030f0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80030fa:	2300      	movs	r3, #0
 80030fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003104:	2b01      	cmp	r3, #1
 8003106:	d101      	bne.n	800310c <HAL_ADC_ConfigChannel+0x1c>
 8003108:	2302      	movs	r3, #2
 800310a:	e105      	b.n	8003318 <HAL_ADC_ConfigChannel+0x228>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2b09      	cmp	r3, #9
 800311a:	d925      	bls.n	8003168 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68d9      	ldr	r1, [r3, #12]
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	b29b      	uxth	r3, r3
 8003128:	461a      	mov	r2, r3
 800312a:	4613      	mov	r3, r2
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	4413      	add	r3, r2
 8003130:	3b1e      	subs	r3, #30
 8003132:	2207      	movs	r2, #7
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	43da      	mvns	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	400a      	ands	r2, r1
 8003140:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68d9      	ldr	r1, [r3, #12]
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	b29b      	uxth	r3, r3
 8003152:	4618      	mov	r0, r3
 8003154:	4603      	mov	r3, r0
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	4403      	add	r3, r0
 800315a:	3b1e      	subs	r3, #30
 800315c:	409a      	lsls	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	430a      	orrs	r2, r1
 8003164:	60da      	str	r2, [r3, #12]
 8003166:	e022      	b.n	80031ae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6919      	ldr	r1, [r3, #16]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	b29b      	uxth	r3, r3
 8003174:	461a      	mov	r2, r3
 8003176:	4613      	mov	r3, r2
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	4413      	add	r3, r2
 800317c:	2207      	movs	r2, #7
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	43da      	mvns	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	400a      	ands	r2, r1
 800318a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6919      	ldr	r1, [r3, #16]
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	689a      	ldr	r2, [r3, #8]
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	b29b      	uxth	r3, r3
 800319c:	4618      	mov	r0, r3
 800319e:	4603      	mov	r3, r0
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	4403      	add	r3, r0
 80031a4:	409a      	lsls	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	2b06      	cmp	r3, #6
 80031b4:	d824      	bhi.n	8003200 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685a      	ldr	r2, [r3, #4]
 80031c0:	4613      	mov	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	4413      	add	r3, r2
 80031c6:	3b05      	subs	r3, #5
 80031c8:	221f      	movs	r2, #31
 80031ca:	fa02 f303 	lsl.w	r3, r2, r3
 80031ce:	43da      	mvns	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	400a      	ands	r2, r1
 80031d6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	4618      	mov	r0, r3
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	685a      	ldr	r2, [r3, #4]
 80031ea:	4613      	mov	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4413      	add	r3, r2
 80031f0:	3b05      	subs	r3, #5
 80031f2:	fa00 f203 	lsl.w	r2, r0, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	430a      	orrs	r2, r1
 80031fc:	635a      	str	r2, [r3, #52]	; 0x34
 80031fe:	e04c      	b.n	800329a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	2b0c      	cmp	r3, #12
 8003206:	d824      	bhi.n	8003252 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	4613      	mov	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4413      	add	r3, r2
 8003218:	3b23      	subs	r3, #35	; 0x23
 800321a:	221f      	movs	r2, #31
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	43da      	mvns	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	400a      	ands	r2, r1
 8003228:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	b29b      	uxth	r3, r3
 8003236:	4618      	mov	r0, r3
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685a      	ldr	r2, [r3, #4]
 800323c:	4613      	mov	r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	4413      	add	r3, r2
 8003242:	3b23      	subs	r3, #35	; 0x23
 8003244:	fa00 f203 	lsl.w	r2, r0, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	430a      	orrs	r2, r1
 800324e:	631a      	str	r2, [r3, #48]	; 0x30
 8003250:	e023      	b.n	800329a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685a      	ldr	r2, [r3, #4]
 800325c:	4613      	mov	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4413      	add	r3, r2
 8003262:	3b41      	subs	r3, #65	; 0x41
 8003264:	221f      	movs	r2, #31
 8003266:	fa02 f303 	lsl.w	r3, r2, r3
 800326a:	43da      	mvns	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	400a      	ands	r2, r1
 8003272:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	b29b      	uxth	r3, r3
 8003280:	4618      	mov	r0, r3
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685a      	ldr	r2, [r3, #4]
 8003286:	4613      	mov	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	4413      	add	r3, r2
 800328c:	3b41      	subs	r3, #65	; 0x41
 800328e:	fa00 f203 	lsl.w	r2, r0, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	430a      	orrs	r2, r1
 8003298:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800329a:	4b22      	ldr	r3, [pc, #136]	; (8003324 <HAL_ADC_ConfigChannel+0x234>)
 800329c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a21      	ldr	r2, [pc, #132]	; (8003328 <HAL_ADC_ConfigChannel+0x238>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d109      	bne.n	80032bc <HAL_ADC_ConfigChannel+0x1cc>
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2b12      	cmp	r3, #18
 80032ae:	d105      	bne.n	80032bc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a19      	ldr	r2, [pc, #100]	; (8003328 <HAL_ADC_ConfigChannel+0x238>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d123      	bne.n	800330e <HAL_ADC_ConfigChannel+0x21e>
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2b10      	cmp	r3, #16
 80032cc:	d003      	beq.n	80032d6 <HAL_ADC_ConfigChannel+0x1e6>
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2b11      	cmp	r3, #17
 80032d4:	d11b      	bne.n	800330e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2b10      	cmp	r3, #16
 80032e8:	d111      	bne.n	800330e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80032ea:	4b10      	ldr	r3, [pc, #64]	; (800332c <HAL_ADC_ConfigChannel+0x23c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a10      	ldr	r2, [pc, #64]	; (8003330 <HAL_ADC_ConfigChannel+0x240>)
 80032f0:	fba2 2303 	umull	r2, r3, r2, r3
 80032f4:	0c9a      	lsrs	r2, r3, #18
 80032f6:	4613      	mov	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4413      	add	r3, r2
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003300:	e002      	b.n	8003308 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	3b01      	subs	r3, #1
 8003306:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1f9      	bne.n	8003302 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3714      	adds	r7, #20
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr
 8003324:	40012300 	.word	0x40012300
 8003328:	40012000 	.word	0x40012000
 800332c:	20000004 	.word	0x20000004
 8003330:	431bde83 	.word	0x431bde83

08003334 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800333c:	4b79      	ldr	r3, [pc, #484]	; (8003524 <ADC_Init+0x1f0>)
 800333e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	685a      	ldr	r2, [r3, #4]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	431a      	orrs	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003368:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6859      	ldr	r1, [r3, #4]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	021a      	lsls	r2, r3, #8
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	685a      	ldr	r2, [r3, #4]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800338c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	6859      	ldr	r1, [r3, #4]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689a      	ldr	r2, [r3, #8]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689a      	ldr	r2, [r3, #8]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6899      	ldr	r1, [r3, #8]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	68da      	ldr	r2, [r3, #12]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c6:	4a58      	ldr	r2, [pc, #352]	; (8003528 <ADC_Init+0x1f4>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d022      	beq.n	8003412 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	689a      	ldr	r2, [r3, #8]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6899      	ldr	r1, [r3, #8]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80033fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	6899      	ldr	r1, [r3, #8]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	430a      	orrs	r2, r1
 800340e:	609a      	str	r2, [r3, #8]
 8003410:	e00f      	b.n	8003432 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689a      	ldr	r2, [r3, #8]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003420:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003430:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 0202 	bic.w	r2, r2, #2
 8003440:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	6899      	ldr	r1, [r3, #8]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	7e1b      	ldrb	r3, [r3, #24]
 800344c:	005a      	lsls	r2, r3, #1
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 3020 	ldrb.w	r3, [r3, #32]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d01b      	beq.n	8003498 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	685a      	ldr	r2, [r3, #4]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800346e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	685a      	ldr	r2, [r3, #4]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800347e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6859      	ldr	r1, [r3, #4]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348a:	3b01      	subs	r3, #1
 800348c:	035a      	lsls	r2, r3, #13
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	605a      	str	r2, [r3, #4]
 8003496:	e007      	b.n	80034a8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685a      	ldr	r2, [r3, #4]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80034b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	69db      	ldr	r3, [r3, #28]
 80034c2:	3b01      	subs	r3, #1
 80034c4:	051a      	lsls	r2, r3, #20
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	689a      	ldr	r2, [r3, #8]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80034dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	6899      	ldr	r1, [r3, #8]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80034ea:	025a      	lsls	r2, r3, #9
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	430a      	orrs	r2, r1
 80034f2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	689a      	ldr	r2, [r3, #8]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003502:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6899      	ldr	r1, [r3, #8]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	029a      	lsls	r2, r3, #10
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	430a      	orrs	r2, r1
 8003516:	609a      	str	r2, [r3, #8]
}
 8003518:	bf00      	nop
 800351a:	3714      	adds	r7, #20
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr
 8003524:	40012300 	.word	0x40012300
 8003528:	0f000001 	.word	0x0f000001

0800352c <__NVIC_SetPriorityGrouping>:
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f003 0307 	and.w	r3, r3, #7
 800353a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800353c:	4b0c      	ldr	r3, [pc, #48]	; (8003570 <__NVIC_SetPriorityGrouping+0x44>)
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003542:	68ba      	ldr	r2, [r7, #8]
 8003544:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003548:	4013      	ands	r3, r2
 800354a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003554:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003558:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800355c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800355e:	4a04      	ldr	r2, [pc, #16]	; (8003570 <__NVIC_SetPriorityGrouping+0x44>)
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	60d3      	str	r3, [r2, #12]
}
 8003564:	bf00      	nop
 8003566:	3714      	adds	r7, #20
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr
 8003570:	e000ed00 	.word	0xe000ed00

08003574 <__NVIC_GetPriorityGrouping>:
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003578:	4b04      	ldr	r3, [pc, #16]	; (800358c <__NVIC_GetPriorityGrouping+0x18>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	0a1b      	lsrs	r3, r3, #8
 800357e:	f003 0307 	and.w	r3, r3, #7
}
 8003582:	4618      	mov	r0, r3
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr
 800358c:	e000ed00 	.word	0xe000ed00

08003590 <__NVIC_SetPriority>:
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	4603      	mov	r3, r0
 8003598:	6039      	str	r1, [r7, #0]
 800359a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800359c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	db0a      	blt.n	80035ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	b2da      	uxtb	r2, r3
 80035a8:	490c      	ldr	r1, [pc, #48]	; (80035dc <__NVIC_SetPriority+0x4c>)
 80035aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ae:	0112      	lsls	r2, r2, #4
 80035b0:	b2d2      	uxtb	r2, r2
 80035b2:	440b      	add	r3, r1
 80035b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80035b8:	e00a      	b.n	80035d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	b2da      	uxtb	r2, r3
 80035be:	4908      	ldr	r1, [pc, #32]	; (80035e0 <__NVIC_SetPriority+0x50>)
 80035c0:	79fb      	ldrb	r3, [r7, #7]
 80035c2:	f003 030f 	and.w	r3, r3, #15
 80035c6:	3b04      	subs	r3, #4
 80035c8:	0112      	lsls	r2, r2, #4
 80035ca:	b2d2      	uxtb	r2, r2
 80035cc:	440b      	add	r3, r1
 80035ce:	761a      	strb	r2, [r3, #24]
}
 80035d0:	bf00      	nop
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr
 80035dc:	e000e100 	.word	0xe000e100
 80035e0:	e000ed00 	.word	0xe000ed00

080035e4 <NVIC_EncodePriority>:
{
 80035e4:	b480      	push	{r7}
 80035e6:	b089      	sub	sp, #36	; 0x24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f003 0307 	and.w	r3, r3, #7
 80035f6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	f1c3 0307 	rsb	r3, r3, #7
 80035fe:	2b04      	cmp	r3, #4
 8003600:	bf28      	it	cs
 8003602:	2304      	movcs	r3, #4
 8003604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	3304      	adds	r3, #4
 800360a:	2b06      	cmp	r3, #6
 800360c:	d902      	bls.n	8003614 <NVIC_EncodePriority+0x30>
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	3b03      	subs	r3, #3
 8003612:	e000      	b.n	8003616 <NVIC_EncodePriority+0x32>
 8003614:	2300      	movs	r3, #0
 8003616:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003618:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	fa02 f303 	lsl.w	r3, r2, r3
 8003622:	43da      	mvns	r2, r3
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	401a      	ands	r2, r3
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800362c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	fa01 f303 	lsl.w	r3, r1, r3
 8003636:	43d9      	mvns	r1, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800363c:	4313      	orrs	r3, r2
}
 800363e:	4618      	mov	r0, r3
 8003640:	3724      	adds	r7, #36	; 0x24
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
	...

0800364c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3b01      	subs	r3, #1
 8003658:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800365c:	d301      	bcc.n	8003662 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800365e:	2301      	movs	r3, #1
 8003660:	e00f      	b.n	8003682 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003662:	4a0a      	ldr	r2, [pc, #40]	; (800368c <SysTick_Config+0x40>)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	3b01      	subs	r3, #1
 8003668:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800366a:	210f      	movs	r1, #15
 800366c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003670:	f7ff ff8e 	bl	8003590 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003674:	4b05      	ldr	r3, [pc, #20]	; (800368c <SysTick_Config+0x40>)
 8003676:	2200      	movs	r2, #0
 8003678:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800367a:	4b04      	ldr	r3, [pc, #16]	; (800368c <SysTick_Config+0x40>)
 800367c:	2207      	movs	r2, #7
 800367e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	e000e010 	.word	0xe000e010

08003690 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f7ff ff47 	bl	800352c <__NVIC_SetPriorityGrouping>
}
 800369e:	bf00      	nop
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b086      	sub	sp, #24
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	4603      	mov	r3, r0
 80036ae:	60b9      	str	r1, [r7, #8]
 80036b0:	607a      	str	r2, [r7, #4]
 80036b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036b4:	2300      	movs	r3, #0
 80036b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036b8:	f7ff ff5c 	bl	8003574 <__NVIC_GetPriorityGrouping>
 80036bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	68b9      	ldr	r1, [r7, #8]
 80036c2:	6978      	ldr	r0, [r7, #20]
 80036c4:	f7ff ff8e 	bl	80035e4 <NVIC_EncodePriority>
 80036c8:	4602      	mov	r2, r0
 80036ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036ce:	4611      	mov	r1, r2
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7ff ff5d 	bl	8003590 <__NVIC_SetPriority>
}
 80036d6:	bf00      	nop
 80036d8:	3718      	adds	r7, #24
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b082      	sub	sp, #8
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f7ff ffb0 	bl	800364c <SysTick_Config>
 80036ec:	4603      	mov	r3, r0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
	...

080036f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b089      	sub	sp, #36	; 0x24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003702:	2300      	movs	r3, #0
 8003704:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003706:	2300      	movs	r3, #0
 8003708:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800370a:	2300      	movs	r3, #0
 800370c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800370e:	2300      	movs	r3, #0
 8003710:	61fb      	str	r3, [r7, #28]
 8003712:	e159      	b.n	80039c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003714:	2201      	movs	r2, #1
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	4013      	ands	r3, r2
 8003726:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	429a      	cmp	r2, r3
 800372e:	f040 8148 	bne.w	80039c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f003 0303 	and.w	r3, r3, #3
 800373a:	2b01      	cmp	r3, #1
 800373c:	d005      	beq.n	800374a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003746:	2b02      	cmp	r3, #2
 8003748:	d130      	bne.n	80037ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	005b      	lsls	r3, r3, #1
 8003754:	2203      	movs	r2, #3
 8003756:	fa02 f303 	lsl.w	r3, r2, r3
 800375a:	43db      	mvns	r3, r3
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	4013      	ands	r3, r2
 8003760:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	68da      	ldr	r2, [r3, #12]
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	fa02 f303 	lsl.w	r3, r2, r3
 800376e:	69ba      	ldr	r2, [r7, #24]
 8003770:	4313      	orrs	r3, r2
 8003772:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003780:	2201      	movs	r2, #1
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	fa02 f303 	lsl.w	r3, r2, r3
 8003788:	43db      	mvns	r3, r3
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	4013      	ands	r3, r2
 800378e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	091b      	lsrs	r3, r3, #4
 8003796:	f003 0201 	and.w	r2, r3, #1
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f003 0303 	and.w	r3, r3, #3
 80037b4:	2b03      	cmp	r3, #3
 80037b6:	d017      	beq.n	80037e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	2203      	movs	r2, #3
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	43db      	mvns	r3, r3
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	4013      	ands	r3, r2
 80037ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	689a      	ldr	r2, [r3, #8]
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	4313      	orrs	r3, r2
 80037e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f003 0303 	and.w	r3, r3, #3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d123      	bne.n	800383c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	08da      	lsrs	r2, r3, #3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	3208      	adds	r2, #8
 80037fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003800:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	f003 0307 	and.w	r3, r3, #7
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	220f      	movs	r2, #15
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	43db      	mvns	r3, r3
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	4013      	ands	r3, r2
 8003816:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	691a      	ldr	r2, [r3, #16]
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	f003 0307 	and.w	r3, r3, #7
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	4313      	orrs	r3, r2
 800382c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	08da      	lsrs	r2, r3, #3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	3208      	adds	r2, #8
 8003836:	69b9      	ldr	r1, [r7, #24]
 8003838:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	2203      	movs	r2, #3
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	43db      	mvns	r3, r3
 800384e:	69ba      	ldr	r2, [r7, #24]
 8003850:	4013      	ands	r3, r2
 8003852:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f003 0203 	and.w	r2, r3, #3
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	4313      	orrs	r3, r2
 8003868:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003878:	2b00      	cmp	r3, #0
 800387a:	f000 80a2 	beq.w	80039c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800387e:	2300      	movs	r3, #0
 8003880:	60fb      	str	r3, [r7, #12]
 8003882:	4b57      	ldr	r3, [pc, #348]	; (80039e0 <HAL_GPIO_Init+0x2e8>)
 8003884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003886:	4a56      	ldr	r2, [pc, #344]	; (80039e0 <HAL_GPIO_Init+0x2e8>)
 8003888:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800388c:	6453      	str	r3, [r2, #68]	; 0x44
 800388e:	4b54      	ldr	r3, [pc, #336]	; (80039e0 <HAL_GPIO_Init+0x2e8>)
 8003890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003896:	60fb      	str	r3, [r7, #12]
 8003898:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800389a:	4a52      	ldr	r2, [pc, #328]	; (80039e4 <HAL_GPIO_Init+0x2ec>)
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	089b      	lsrs	r3, r3, #2
 80038a0:	3302      	adds	r3, #2
 80038a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	f003 0303 	and.w	r3, r3, #3
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	220f      	movs	r2, #15
 80038b2:	fa02 f303 	lsl.w	r3, r2, r3
 80038b6:	43db      	mvns	r3, r3
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	4013      	ands	r3, r2
 80038bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a49      	ldr	r2, [pc, #292]	; (80039e8 <HAL_GPIO_Init+0x2f0>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d019      	beq.n	80038fa <HAL_GPIO_Init+0x202>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a48      	ldr	r2, [pc, #288]	; (80039ec <HAL_GPIO_Init+0x2f4>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d013      	beq.n	80038f6 <HAL_GPIO_Init+0x1fe>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a47      	ldr	r2, [pc, #284]	; (80039f0 <HAL_GPIO_Init+0x2f8>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d00d      	beq.n	80038f2 <HAL_GPIO_Init+0x1fa>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a46      	ldr	r2, [pc, #280]	; (80039f4 <HAL_GPIO_Init+0x2fc>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d007      	beq.n	80038ee <HAL_GPIO_Init+0x1f6>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a45      	ldr	r2, [pc, #276]	; (80039f8 <HAL_GPIO_Init+0x300>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d101      	bne.n	80038ea <HAL_GPIO_Init+0x1f2>
 80038e6:	2304      	movs	r3, #4
 80038e8:	e008      	b.n	80038fc <HAL_GPIO_Init+0x204>
 80038ea:	2307      	movs	r3, #7
 80038ec:	e006      	b.n	80038fc <HAL_GPIO_Init+0x204>
 80038ee:	2303      	movs	r3, #3
 80038f0:	e004      	b.n	80038fc <HAL_GPIO_Init+0x204>
 80038f2:	2302      	movs	r3, #2
 80038f4:	e002      	b.n	80038fc <HAL_GPIO_Init+0x204>
 80038f6:	2301      	movs	r3, #1
 80038f8:	e000      	b.n	80038fc <HAL_GPIO_Init+0x204>
 80038fa:	2300      	movs	r3, #0
 80038fc:	69fa      	ldr	r2, [r7, #28]
 80038fe:	f002 0203 	and.w	r2, r2, #3
 8003902:	0092      	lsls	r2, r2, #2
 8003904:	4093      	lsls	r3, r2
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	4313      	orrs	r3, r2
 800390a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800390c:	4935      	ldr	r1, [pc, #212]	; (80039e4 <HAL_GPIO_Init+0x2ec>)
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	089b      	lsrs	r3, r3, #2
 8003912:	3302      	adds	r3, #2
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800391a:	4b38      	ldr	r3, [pc, #224]	; (80039fc <HAL_GPIO_Init+0x304>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	43db      	mvns	r3, r3
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	4013      	ands	r3, r2
 8003928:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d003      	beq.n	800393e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003936:	69ba      	ldr	r2, [r7, #24]
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	4313      	orrs	r3, r2
 800393c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800393e:	4a2f      	ldr	r2, [pc, #188]	; (80039fc <HAL_GPIO_Init+0x304>)
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003944:	4b2d      	ldr	r3, [pc, #180]	; (80039fc <HAL_GPIO_Init+0x304>)
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	43db      	mvns	r3, r3
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	4013      	ands	r3, r2
 8003952:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d003      	beq.n	8003968 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	4313      	orrs	r3, r2
 8003966:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003968:	4a24      	ldr	r2, [pc, #144]	; (80039fc <HAL_GPIO_Init+0x304>)
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800396e:	4b23      	ldr	r3, [pc, #140]	; (80039fc <HAL_GPIO_Init+0x304>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	43db      	mvns	r3, r3
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	4013      	ands	r3, r2
 800397c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d003      	beq.n	8003992 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	4313      	orrs	r3, r2
 8003990:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003992:	4a1a      	ldr	r2, [pc, #104]	; (80039fc <HAL_GPIO_Init+0x304>)
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003998:	4b18      	ldr	r3, [pc, #96]	; (80039fc <HAL_GPIO_Init+0x304>)
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	43db      	mvns	r3, r3
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	4013      	ands	r3, r2
 80039a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d003      	beq.n	80039bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039bc:	4a0f      	ldr	r2, [pc, #60]	; (80039fc <HAL_GPIO_Init+0x304>)
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	3301      	adds	r3, #1
 80039c6:	61fb      	str	r3, [r7, #28]
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	2b0f      	cmp	r3, #15
 80039cc:	f67f aea2 	bls.w	8003714 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039d0:	bf00      	nop
 80039d2:	bf00      	nop
 80039d4:	3724      	adds	r7, #36	; 0x24
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	40023800 	.word	0x40023800
 80039e4:	40013800 	.word	0x40013800
 80039e8:	40020000 	.word	0x40020000
 80039ec:	40020400 	.word	0x40020400
 80039f0:	40020800 	.word	0x40020800
 80039f4:	40020c00 	.word	0x40020c00
 80039f8:	40021000 	.word	0x40021000
 80039fc:	40013c00 	.word	0x40013c00

08003a00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	460b      	mov	r3, r1
 8003a0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	691a      	ldr	r2, [r3, #16]
 8003a10:	887b      	ldrh	r3, [r7, #2]
 8003a12:	4013      	ands	r3, r2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d002      	beq.n	8003a1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	73fb      	strb	r3, [r7, #15]
 8003a1c:	e001      	b.n	8003a22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3714      	adds	r7, #20
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	460b      	mov	r3, r1
 8003a3a:	807b      	strh	r3, [r7, #2]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a40:	787b      	ldrb	r3, [r7, #1]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a46:	887a      	ldrh	r2, [r7, #2]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a4c:	e003      	b.n	8003a56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a4e:	887b      	ldrh	r3, [r7, #2]
 8003a50:	041a      	lsls	r2, r3, #16
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	619a      	str	r2, [r3, #24]
}
 8003a56:	bf00      	nop
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
	...

08003a64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e12b      	b.n	8003cce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d106      	bne.n	8003a90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f7fe fe16 	bl	80026bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2224      	movs	r2, #36	; 0x24
 8003a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f022 0201 	bic.w	r2, r2, #1
 8003aa6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ab6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ac6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ac8:	f001 fa06 	bl	8004ed8 <HAL_RCC_GetPCLK1Freq>
 8003acc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	4a81      	ldr	r2, [pc, #516]	; (8003cd8 <HAL_I2C_Init+0x274>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d807      	bhi.n	8003ae8 <HAL_I2C_Init+0x84>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	4a80      	ldr	r2, [pc, #512]	; (8003cdc <HAL_I2C_Init+0x278>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	bf94      	ite	ls
 8003ae0:	2301      	movls	r3, #1
 8003ae2:	2300      	movhi	r3, #0
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	e006      	b.n	8003af6 <HAL_I2C_Init+0x92>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	4a7d      	ldr	r2, [pc, #500]	; (8003ce0 <HAL_I2C_Init+0x27c>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	bf94      	ite	ls
 8003af0:	2301      	movls	r3, #1
 8003af2:	2300      	movhi	r3, #0
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e0e7      	b.n	8003cce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	4a78      	ldr	r2, [pc, #480]	; (8003ce4 <HAL_I2C_Init+0x280>)
 8003b02:	fba2 2303 	umull	r2, r3, r2, r3
 8003b06:	0c9b      	lsrs	r3, r3, #18
 8003b08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68ba      	ldr	r2, [r7, #8]
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	6a1b      	ldr	r3, [r3, #32]
 8003b24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	4a6a      	ldr	r2, [pc, #424]	; (8003cd8 <HAL_I2C_Init+0x274>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d802      	bhi.n	8003b38 <HAL_I2C_Init+0xd4>
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	3301      	adds	r3, #1
 8003b36:	e009      	b.n	8003b4c <HAL_I2C_Init+0xe8>
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b3e:	fb02 f303 	mul.w	r3, r2, r3
 8003b42:	4a69      	ldr	r2, [pc, #420]	; (8003ce8 <HAL_I2C_Init+0x284>)
 8003b44:	fba2 2303 	umull	r2, r3, r2, r3
 8003b48:	099b      	lsrs	r3, r3, #6
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	6812      	ldr	r2, [r2, #0]
 8003b50:	430b      	orrs	r3, r1
 8003b52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	69db      	ldr	r3, [r3, #28]
 8003b5a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b5e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	495c      	ldr	r1, [pc, #368]	; (8003cd8 <HAL_I2C_Init+0x274>)
 8003b68:	428b      	cmp	r3, r1
 8003b6a:	d819      	bhi.n	8003ba0 <HAL_I2C_Init+0x13c>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	1e59      	subs	r1, r3, #1
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b7a:	1c59      	adds	r1, r3, #1
 8003b7c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b80:	400b      	ands	r3, r1
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00a      	beq.n	8003b9c <HAL_I2C_Init+0x138>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	1e59      	subs	r1, r3, #1
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	005b      	lsls	r3, r3, #1
 8003b90:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b94:	3301      	adds	r3, #1
 8003b96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b9a:	e051      	b.n	8003c40 <HAL_I2C_Init+0x1dc>
 8003b9c:	2304      	movs	r3, #4
 8003b9e:	e04f      	b.n	8003c40 <HAL_I2C_Init+0x1dc>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d111      	bne.n	8003bcc <HAL_I2C_Init+0x168>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	1e58      	subs	r0, r3, #1
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6859      	ldr	r1, [r3, #4]
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	440b      	add	r3, r1
 8003bb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bba:	3301      	adds	r3, #1
 8003bbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	bf0c      	ite	eq
 8003bc4:	2301      	moveq	r3, #1
 8003bc6:	2300      	movne	r3, #0
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	e012      	b.n	8003bf2 <HAL_I2C_Init+0x18e>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	1e58      	subs	r0, r3, #1
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6859      	ldr	r1, [r3, #4]
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	440b      	add	r3, r1
 8003bda:	0099      	lsls	r1, r3, #2
 8003bdc:	440b      	add	r3, r1
 8003bde:	fbb0 f3f3 	udiv	r3, r0, r3
 8003be2:	3301      	adds	r3, #1
 8003be4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	bf0c      	ite	eq
 8003bec:	2301      	moveq	r3, #1
 8003bee:	2300      	movne	r3, #0
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <HAL_I2C_Init+0x196>
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e022      	b.n	8003c40 <HAL_I2C_Init+0x1dc>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10e      	bne.n	8003c20 <HAL_I2C_Init+0x1bc>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	1e58      	subs	r0, r3, #1
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6859      	ldr	r1, [r3, #4]
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	440b      	add	r3, r1
 8003c10:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c14:	3301      	adds	r3, #1
 8003c16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c1e:	e00f      	b.n	8003c40 <HAL_I2C_Init+0x1dc>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	1e58      	subs	r0, r3, #1
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6859      	ldr	r1, [r3, #4]
 8003c28:	460b      	mov	r3, r1
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	440b      	add	r3, r1
 8003c2e:	0099      	lsls	r1, r3, #2
 8003c30:	440b      	add	r3, r1
 8003c32:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c36:	3301      	adds	r3, #1
 8003c38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c40:	6879      	ldr	r1, [r7, #4]
 8003c42:	6809      	ldr	r1, [r1, #0]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	69da      	ldr	r2, [r3, #28]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	430a      	orrs	r2, r1
 8003c62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	6911      	ldr	r1, [r2, #16]
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	68d2      	ldr	r2, [r2, #12]
 8003c7a:	4311      	orrs	r1, r2
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	6812      	ldr	r2, [r2, #0]
 8003c80:	430b      	orrs	r3, r1
 8003c82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	695a      	ldr	r2, [r3, #20]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	431a      	orrs	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f042 0201 	orr.w	r2, r2, #1
 8003cae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2220      	movs	r2, #32
 8003cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	000186a0 	.word	0x000186a0
 8003cdc:	001e847f 	.word	0x001e847f
 8003ce0:	003d08ff 	.word	0x003d08ff
 8003ce4:	431bde83 	.word	0x431bde83
 8003ce8:	10624dd3 	.word	0x10624dd3

08003cec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b08c      	sub	sp, #48	; 0x30
 8003cf0:	af02      	add	r7, sp, #8
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	4608      	mov	r0, r1
 8003cf6:	4611      	mov	r1, r2
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	817b      	strh	r3, [r7, #10]
 8003cfe:	460b      	mov	r3, r1
 8003d00:	813b      	strh	r3, [r7, #8]
 8003d02:	4613      	mov	r3, r2
 8003d04:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d06:	f7fe ffff 	bl	8002d08 <HAL_GetTick>
 8003d0a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b20      	cmp	r3, #32
 8003d16:	f040 8208 	bne.w	800412a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	2319      	movs	r3, #25
 8003d20:	2201      	movs	r2, #1
 8003d22:	497b      	ldr	r1, [pc, #492]	; (8003f10 <HAL_I2C_Mem_Read+0x224>)
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f000 faef 	bl	8004308 <I2C_WaitOnFlagUntilTimeout>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003d30:	2302      	movs	r3, #2
 8003d32:	e1fb      	b.n	800412c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d101      	bne.n	8003d42 <HAL_I2C_Mem_Read+0x56>
 8003d3e:	2302      	movs	r3, #2
 8003d40:	e1f4      	b.n	800412c <HAL_I2C_Mem_Read+0x440>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0301 	and.w	r3, r3, #1
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d007      	beq.n	8003d68 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f042 0201 	orr.w	r2, r2, #1
 8003d66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d76:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2222      	movs	r2, #34	; 0x22
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2240      	movs	r2, #64	; 0x40
 8003d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003d98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	4a5b      	ldr	r2, [pc, #364]	; (8003f14 <HAL_I2C_Mem_Read+0x228>)
 8003da8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003daa:	88f8      	ldrh	r0, [r7, #6]
 8003dac:	893a      	ldrh	r2, [r7, #8]
 8003dae:	8979      	ldrh	r1, [r7, #10]
 8003db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db2:	9301      	str	r3, [sp, #4]
 8003db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db6:	9300      	str	r3, [sp, #0]
 8003db8:	4603      	mov	r3, r0
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f000 f9bc 	bl	8004138 <I2C_RequestMemoryRead>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e1b0      	b.n	800412c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d113      	bne.n	8003dfa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	623b      	str	r3, [r7, #32]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	695b      	ldr	r3, [r3, #20]
 8003ddc:	623b      	str	r3, [r7, #32]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	623b      	str	r3, [r7, #32]
 8003de6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003df6:	601a      	str	r2, [r3, #0]
 8003df8:	e184      	b.n	8004104 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d11b      	bne.n	8003e3a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e12:	2300      	movs	r3, #0
 8003e14:	61fb      	str	r3, [r7, #28]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	695b      	ldr	r3, [r3, #20]
 8003e1c:	61fb      	str	r3, [r7, #28]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	61fb      	str	r3, [r7, #28]
 8003e26:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e36:	601a      	str	r2, [r3, #0]
 8003e38:	e164      	b.n	8004104 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d11b      	bne.n	8003e7a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e50:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e62:	2300      	movs	r3, #0
 8003e64:	61bb      	str	r3, [r7, #24]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	61bb      	str	r3, [r7, #24]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	61bb      	str	r3, [r7, #24]
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	e144      	b.n	8004104 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	617b      	str	r3, [r7, #20]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	695b      	ldr	r3, [r3, #20]
 8003e84:	617b      	str	r3, [r7, #20]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	617b      	str	r3, [r7, #20]
 8003e8e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003e90:	e138      	b.n	8004104 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e96:	2b03      	cmp	r3, #3
 8003e98:	f200 80f1 	bhi.w	800407e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d123      	bne.n	8003eec <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ea6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ea8:	68f8      	ldr	r0, [r7, #12]
 8003eaa:	f000 fb44 	bl	8004536 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d001      	beq.n	8003eb8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e139      	b.n	800412c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	691a      	ldr	r2, [r3, #16]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec2:	b2d2      	uxtb	r2, r2
 8003ec4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eca:	1c5a      	adds	r2, r3, #1
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003eea:	e10b      	b.n	8004104 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d14e      	bne.n	8003f92 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef6:	9300      	str	r3, [sp, #0]
 8003ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003efa:	2200      	movs	r2, #0
 8003efc:	4906      	ldr	r1, [pc, #24]	; (8003f18 <HAL_I2C_Mem_Read+0x22c>)
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	f000 fa02 	bl	8004308 <I2C_WaitOnFlagUntilTimeout>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d008      	beq.n	8003f1c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e10e      	b.n	800412c <HAL_I2C_Mem_Read+0x440>
 8003f0e:	bf00      	nop
 8003f10:	00100002 	.word	0x00100002
 8003f14:	ffff0000 	.word	0xffff0000
 8003f18:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	691a      	ldr	r2, [r3, #16]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f36:	b2d2      	uxtb	r2, r2
 8003f38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3e:	1c5a      	adds	r2, r3, #1
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	3b01      	subs	r3, #1
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	691a      	ldr	r2, [r3, #16]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	b2d2      	uxtb	r2, r2
 8003f6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f70:	1c5a      	adds	r2, r3, #1
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f90:	e0b8      	b.n	8004104 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f94:	9300      	str	r3, [sp, #0]
 8003f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f98:	2200      	movs	r2, #0
 8003f9a:	4966      	ldr	r1, [pc, #408]	; (8004134 <HAL_I2C_Mem_Read+0x448>)
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f000 f9b3 	bl	8004308 <I2C_WaitOnFlagUntilTimeout>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d001      	beq.n	8003fac <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e0bf      	b.n	800412c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	691a      	ldr	r2, [r3, #16]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc6:	b2d2      	uxtb	r2, r2
 8003fc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fce:	1c5a      	adds	r2, r3, #1
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff0:	9300      	str	r3, [sp, #0]
 8003ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	494f      	ldr	r1, [pc, #316]	; (8004134 <HAL_I2C_Mem_Read+0x448>)
 8003ff8:	68f8      	ldr	r0, [r7, #12]
 8003ffa:	f000 f985 	bl	8004308 <I2C_WaitOnFlagUntilTimeout>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d001      	beq.n	8004008 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e091      	b.n	800412c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004016:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	691a      	ldr	r2, [r3, #16]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004022:	b2d2      	uxtb	r2, r2
 8004024:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402a:	1c5a      	adds	r2, r3, #1
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004034:	3b01      	subs	r3, #1
 8004036:	b29a      	uxth	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004040:	b29b      	uxth	r3, r3
 8004042:	3b01      	subs	r3, #1
 8004044:	b29a      	uxth	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	691a      	ldr	r2, [r3, #16]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004054:	b2d2      	uxtb	r2, r2
 8004056:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405c:	1c5a      	adds	r2, r3, #1
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004066:	3b01      	subs	r3, #1
 8004068:	b29a      	uxth	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004072:	b29b      	uxth	r3, r3
 8004074:	3b01      	subs	r3, #1
 8004076:	b29a      	uxth	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800407c:	e042      	b.n	8004104 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800407e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004080:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	f000 fa57 	bl	8004536 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d001      	beq.n	8004092 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e04c      	b.n	800412c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	691a      	ldr	r2, [r3, #16]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409c:	b2d2      	uxtb	r2, r2
 800409e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a4:	1c5a      	adds	r2, r3, #1
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ae:	3b01      	subs	r3, #1
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	3b01      	subs	r3, #1
 80040be:	b29a      	uxth	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	f003 0304 	and.w	r3, r3, #4
 80040ce:	2b04      	cmp	r3, #4
 80040d0:	d118      	bne.n	8004104 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	691a      	ldr	r2, [r3, #16]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040dc:	b2d2      	uxtb	r2, r2
 80040de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e4:	1c5a      	adds	r2, r3, #1
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ee:	3b01      	subs	r3, #1
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	3b01      	subs	r3, #1
 80040fe:	b29a      	uxth	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004108:	2b00      	cmp	r3, #0
 800410a:	f47f aec2 	bne.w	8003e92 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2220      	movs	r2, #32
 8004112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004126:	2300      	movs	r3, #0
 8004128:	e000      	b.n	800412c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800412a:	2302      	movs	r3, #2
  }
}
 800412c:	4618      	mov	r0, r3
 800412e:	3728      	adds	r7, #40	; 0x28
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	00010004 	.word	0x00010004

08004138 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b088      	sub	sp, #32
 800413c:	af02      	add	r7, sp, #8
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	4608      	mov	r0, r1
 8004142:	4611      	mov	r1, r2
 8004144:	461a      	mov	r2, r3
 8004146:	4603      	mov	r3, r0
 8004148:	817b      	strh	r3, [r7, #10]
 800414a:	460b      	mov	r3, r1
 800414c:	813b      	strh	r3, [r7, #8]
 800414e:	4613      	mov	r3, r2
 8004150:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004160:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004170:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	6a3b      	ldr	r3, [r7, #32]
 8004178:	2200      	movs	r2, #0
 800417a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f000 f8c2 	bl	8004308 <I2C_WaitOnFlagUntilTimeout>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00d      	beq.n	80041a6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004194:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004198:	d103      	bne.n	80041a2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e0aa      	b.n	80042fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041a6:	897b      	ldrh	r3, [r7, #10]
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	461a      	mov	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80041b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b8:	6a3a      	ldr	r2, [r7, #32]
 80041ba:	4952      	ldr	r1, [pc, #328]	; (8004304 <I2C_RequestMemoryRead+0x1cc>)
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f000 f8fa 	bl	80043b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d001      	beq.n	80041cc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e097      	b.n	80042fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041cc:	2300      	movs	r3, #0
 80041ce:	617b      	str	r3, [r7, #20]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	617b      	str	r3, [r7, #20]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	617b      	str	r3, [r7, #20]
 80041e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041e4:	6a39      	ldr	r1, [r7, #32]
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f000 f964 	bl	80044b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00d      	beq.n	800420e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f6:	2b04      	cmp	r3, #4
 80041f8:	d107      	bne.n	800420a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004208:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e076      	b.n	80042fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800420e:	88fb      	ldrh	r3, [r7, #6]
 8004210:	2b01      	cmp	r3, #1
 8004212:	d105      	bne.n	8004220 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004214:	893b      	ldrh	r3, [r7, #8]
 8004216:	b2da      	uxtb	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	611a      	str	r2, [r3, #16]
 800421e:	e021      	b.n	8004264 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004220:	893b      	ldrh	r3, [r7, #8]
 8004222:	0a1b      	lsrs	r3, r3, #8
 8004224:	b29b      	uxth	r3, r3
 8004226:	b2da      	uxtb	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800422e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004230:	6a39      	ldr	r1, [r7, #32]
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f000 f93e 	bl	80044b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00d      	beq.n	800425a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004242:	2b04      	cmp	r3, #4
 8004244:	d107      	bne.n	8004256 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004254:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e050      	b.n	80042fc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800425a:	893b      	ldrh	r3, [r7, #8]
 800425c:	b2da      	uxtb	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004266:	6a39      	ldr	r1, [r7, #32]
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f000 f923 	bl	80044b4 <I2C_WaitOnTXEFlagUntilTimeout>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00d      	beq.n	8004290 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004278:	2b04      	cmp	r3, #4
 800427a:	d107      	bne.n	800428c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800428a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e035      	b.n	80042fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800429e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a2:	9300      	str	r3, [sp, #0]
 80042a4:	6a3b      	ldr	r3, [r7, #32]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f000 f82b 	bl	8004308 <I2C_WaitOnFlagUntilTimeout>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00d      	beq.n	80042d4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042c6:	d103      	bne.n	80042d0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e013      	b.n	80042fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80042d4:	897b      	ldrh	r3, [r7, #10]
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	f043 0301 	orr.w	r3, r3, #1
 80042dc:	b2da      	uxtb	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e6:	6a3a      	ldr	r2, [r7, #32]
 80042e8:	4906      	ldr	r1, [pc, #24]	; (8004304 <I2C_RequestMemoryRead+0x1cc>)
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f000 f863 	bl	80043b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e000      	b.n	80042fc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3718      	adds	r7, #24
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	00010002 	.word	0x00010002

08004308 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	603b      	str	r3, [r7, #0]
 8004314:	4613      	mov	r3, r2
 8004316:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004318:	e025      	b.n	8004366 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004320:	d021      	beq.n	8004366 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004322:	f7fe fcf1 	bl	8002d08 <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	683a      	ldr	r2, [r7, #0]
 800432e:	429a      	cmp	r2, r3
 8004330:	d302      	bcc.n	8004338 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d116      	bne.n	8004366 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2220      	movs	r2, #32
 8004342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004352:	f043 0220 	orr.w	r2, r3, #32
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e023      	b.n	80043ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	0c1b      	lsrs	r3, r3, #16
 800436a:	b2db      	uxtb	r3, r3
 800436c:	2b01      	cmp	r3, #1
 800436e:	d10d      	bne.n	800438c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	43da      	mvns	r2, r3
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	4013      	ands	r3, r2
 800437c:	b29b      	uxth	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	bf0c      	ite	eq
 8004382:	2301      	moveq	r3, #1
 8004384:	2300      	movne	r3, #0
 8004386:	b2db      	uxtb	r3, r3
 8004388:	461a      	mov	r2, r3
 800438a:	e00c      	b.n	80043a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	43da      	mvns	r2, r3
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	4013      	ands	r3, r2
 8004398:	b29b      	uxth	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	bf0c      	ite	eq
 800439e:	2301      	moveq	r3, #1
 80043a0:	2300      	movne	r3, #0
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	461a      	mov	r2, r3
 80043a6:	79fb      	ldrb	r3, [r7, #7]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d0b6      	beq.n	800431a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b084      	sub	sp, #16
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	60f8      	str	r0, [r7, #12]
 80043be:	60b9      	str	r1, [r7, #8]
 80043c0:	607a      	str	r2, [r7, #4]
 80043c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043c4:	e051      	b.n	800446a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043d4:	d123      	bne.n	800441e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2220      	movs	r2, #32
 80043fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440a:	f043 0204 	orr.w	r2, r3, #4
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e046      	b.n	80044ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004424:	d021      	beq.n	800446a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004426:	f7fe fc6f 	bl	8002d08 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	429a      	cmp	r2, r3
 8004434:	d302      	bcc.n	800443c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d116      	bne.n	800446a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2220      	movs	r2, #32
 8004446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	f043 0220 	orr.w	r2, r3, #32
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e020      	b.n	80044ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	0c1b      	lsrs	r3, r3, #16
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2b01      	cmp	r3, #1
 8004472:	d10c      	bne.n	800448e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	43da      	mvns	r2, r3
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	4013      	ands	r3, r2
 8004480:	b29b      	uxth	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	bf14      	ite	ne
 8004486:	2301      	movne	r3, #1
 8004488:	2300      	moveq	r3, #0
 800448a:	b2db      	uxtb	r3, r3
 800448c:	e00b      	b.n	80044a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	43da      	mvns	r2, r3
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	4013      	ands	r3, r2
 800449a:	b29b      	uxth	r3, r3
 800449c:	2b00      	cmp	r3, #0
 800449e:	bf14      	ite	ne
 80044a0:	2301      	movne	r3, #1
 80044a2:	2300      	moveq	r3, #0
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d18d      	bne.n	80043c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3710      	adds	r7, #16
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044c0:	e02d      	b.n	800451e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044c2:	68f8      	ldr	r0, [r7, #12]
 80044c4:	f000 f88d 	bl	80045e2 <I2C_IsAcknowledgeFailed>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d001      	beq.n	80044d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e02d      	b.n	800452e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044d8:	d021      	beq.n	800451e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044da:	f7fe fc15 	bl	8002d08 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d302      	bcc.n	80044f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d116      	bne.n	800451e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2220      	movs	r2, #32
 80044fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450a:	f043 0220 	orr.w	r2, r3, #32
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e007      	b.n	800452e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004528:	2b80      	cmp	r3, #128	; 0x80
 800452a:	d1ca      	bne.n	80044c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b084      	sub	sp, #16
 800453a:	af00      	add	r7, sp, #0
 800453c:	60f8      	str	r0, [r7, #12]
 800453e:	60b9      	str	r1, [r7, #8]
 8004540:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004542:	e042      	b.n	80045ca <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	f003 0310 	and.w	r3, r3, #16
 800454e:	2b10      	cmp	r3, #16
 8004550:	d119      	bne.n	8004586 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f06f 0210 	mvn.w	r2, #16
 800455a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2220      	movs	r2, #32
 8004566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e029      	b.n	80045da <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004586:	f7fe fbbf 	bl	8002d08 <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	429a      	cmp	r2, r3
 8004594:	d302      	bcc.n	800459c <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d116      	bne.n	80045ca <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2220      	movs	r2, #32
 80045a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b6:	f043 0220 	orr.w	r2, r3, #32
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e007      	b.n	80045da <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d4:	2b40      	cmp	r3, #64	; 0x40
 80045d6:	d1b5      	bne.n	8004544 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80045e2:	b480      	push	{r7}
 80045e4:	b083      	sub	sp, #12
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	695b      	ldr	r3, [r3, #20]
 80045f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045f8:	d11b      	bne.n	8004632 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004602:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2220      	movs	r2, #32
 800460e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	f043 0204 	orr.w	r2, r3, #4
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e000      	b.n	8004634 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e264      	b.n	8004b1c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	2b00      	cmp	r3, #0
 800465c:	d075      	beq.n	800474a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800465e:	4ba3      	ldr	r3, [pc, #652]	; (80048ec <HAL_RCC_OscConfig+0x2ac>)
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f003 030c 	and.w	r3, r3, #12
 8004666:	2b04      	cmp	r3, #4
 8004668:	d00c      	beq.n	8004684 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800466a:	4ba0      	ldr	r3, [pc, #640]	; (80048ec <HAL_RCC_OscConfig+0x2ac>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004672:	2b08      	cmp	r3, #8
 8004674:	d112      	bne.n	800469c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004676:	4b9d      	ldr	r3, [pc, #628]	; (80048ec <HAL_RCC_OscConfig+0x2ac>)
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800467e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004682:	d10b      	bne.n	800469c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004684:	4b99      	ldr	r3, [pc, #612]	; (80048ec <HAL_RCC_OscConfig+0x2ac>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d05b      	beq.n	8004748 <HAL_RCC_OscConfig+0x108>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d157      	bne.n	8004748 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e23f      	b.n	8004b1c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046a4:	d106      	bne.n	80046b4 <HAL_RCC_OscConfig+0x74>
 80046a6:	4b91      	ldr	r3, [pc, #580]	; (80048ec <HAL_RCC_OscConfig+0x2ac>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a90      	ldr	r2, [pc, #576]	; (80048ec <HAL_RCC_OscConfig+0x2ac>)
 80046ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046b0:	6013      	str	r3, [r2, #0]
 80046b2:	e01d      	b.n	80046f0 <HAL_RCC_OscConfig+0xb0>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046bc:	d10c      	bne.n	80046d8 <HAL_RCC_OscConfig+0x98>
 80046be:	4b8b      	ldr	r3, [pc, #556]	; (80048ec <HAL_RCC_OscConfig+0x2ac>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a8a      	ldr	r2, [pc, #552]	; (80048ec <HAL_RCC_OscConfig+0x2ac>)
 80046c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046c8:	6013      	str	r3, [r2, #0]
 80046ca:	4b88      	ldr	r3, [pc, #544]	; (80048ec <HAL_RCC_OscConfig+0x2ac>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a87      	ldr	r2, [pc, #540]	; (80048ec <HAL_RCC_OscConfig+0x2ac>)
 80046d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046d4:	6013      	str	r3, [r2, #0]
 80046d6:	e00b      	b.n	80046f0 <HAL_RCC_OscConfig+0xb0>
 80046d8:	4b84      	ldr	r3, [pc, #528]	; (80048ec <HAL_RCC_OscConfig+0x2ac>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a83      	ldr	r2, [pc, #524]	; (80048ec <HAL_RCC_OscConfig+0x2ac>)
 80046de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046e2:	6013      	str	r3, [r2, #0]
 80046e4:	4b81      	ldr	r3, [pc, #516]	; (80048ec <HAL_RCC_OscConfig+0x2ac>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a80      	ldr	r2, [pc, #512]	; (80048ec <HAL_RCC_OscConfig+0x2ac>)
 80046ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d013      	beq.n	8004720 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f8:	f7fe fb06 	bl	8002d08 <HAL_GetTick>
 80046fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046fe:	e008      	b.n	8004712 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004700:	f7fe fb02 	bl	8002d08 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b64      	cmp	r3, #100	; 0x64
 800470c:	d901      	bls.n	8004712 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e204      	b.n	8004b1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004712:	4b76      	ldr	r3, [pc, #472]	; (80048ec <HAL_RCC_OscConfig+0x2ac>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d0f0      	beq.n	8004700 <HAL_RCC_OscConfig+0xc0>
 800471e:	e014      	b.n	800474a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004720:	f7fe faf2 	bl	8002d08 <HAL_GetTick>
 8004724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004726:	e008      	b.n	800473a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004728:	f7fe faee 	bl	8002d08 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b64      	cmp	r3, #100	; 0x64
 8004734:	d901      	bls.n	800473a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e1f0      	b.n	8004b1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800473a:	4b6c      	ldr	r3, [pc, #432]	; (80048ec <HAL_RCC_OscConfig+0x2ac>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1f0      	bne.n	8004728 <HAL_RCC_OscConfig+0xe8>
 8004746:	e000      	b.n	800474a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004748:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d063      	beq.n	800481e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004756:	4b65      	ldr	r3, [pc, #404]	; (80048ec <HAL_RCC_OscConfig+0x2ac>)
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f003 030c 	and.w	r3, r3, #12
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00b      	beq.n	800477a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004762:	4b62      	ldr	r3, [pc, #392]	; (80048ec <HAL_RCC_OscConfig+0x2ac>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800476a:	2b08      	cmp	r3, #8
 800476c:	d11c      	bne.n	80047a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800476e:	4b5f      	ldr	r3, [pc, #380]	; (80048ec <HAL_RCC_OscConfig+0x2ac>)
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d116      	bne.n	80047a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800477a:	4b5c      	ldr	r3, [pc, #368]	; (80048ec <HAL_RCC_OscConfig+0x2ac>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	2b00      	cmp	r3, #0
 8004784:	d005      	beq.n	8004792 <HAL_RCC_OscConfig+0x152>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	2b01      	cmp	r3, #1
 800478c:	d001      	beq.n	8004792 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e1c4      	b.n	8004b1c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004792:	4b56      	ldr	r3, [pc, #344]	; (80048ec <HAL_RCC_OscConfig+0x2ac>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	00db      	lsls	r3, r3, #3
 80047a0:	4952      	ldr	r1, [pc, #328]	; (80048ec <HAL_RCC_OscConfig+0x2ac>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047a6:	e03a      	b.n	800481e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d020      	beq.n	80047f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047b0:	4b4f      	ldr	r3, [pc, #316]	; (80048f0 <HAL_RCC_OscConfig+0x2b0>)
 80047b2:	2201      	movs	r2, #1
 80047b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b6:	f7fe faa7 	bl	8002d08 <HAL_GetTick>
 80047ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047bc:	e008      	b.n	80047d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047be:	f7fe faa3 	bl	8002d08 <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d901      	bls.n	80047d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e1a5      	b.n	8004b1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047d0:	4b46      	ldr	r3, [pc, #280]	; (80048ec <HAL_RCC_OscConfig+0x2ac>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0302 	and.w	r3, r3, #2
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d0f0      	beq.n	80047be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047dc:	4b43      	ldr	r3, [pc, #268]	; (80048ec <HAL_RCC_OscConfig+0x2ac>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	00db      	lsls	r3, r3, #3
 80047ea:	4940      	ldr	r1, [pc, #256]	; (80048ec <HAL_RCC_OscConfig+0x2ac>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	600b      	str	r3, [r1, #0]
 80047f0:	e015      	b.n	800481e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047f2:	4b3f      	ldr	r3, [pc, #252]	; (80048f0 <HAL_RCC_OscConfig+0x2b0>)
 80047f4:	2200      	movs	r2, #0
 80047f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f8:	f7fe fa86 	bl	8002d08 <HAL_GetTick>
 80047fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047fe:	e008      	b.n	8004812 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004800:	f7fe fa82 	bl	8002d08 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	2b02      	cmp	r3, #2
 800480c:	d901      	bls.n	8004812 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e184      	b.n	8004b1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004812:	4b36      	ldr	r3, [pc, #216]	; (80048ec <HAL_RCC_OscConfig+0x2ac>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1f0      	bne.n	8004800 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0308 	and.w	r3, r3, #8
 8004826:	2b00      	cmp	r3, #0
 8004828:	d030      	beq.n	800488c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d016      	beq.n	8004860 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004832:	4b30      	ldr	r3, [pc, #192]	; (80048f4 <HAL_RCC_OscConfig+0x2b4>)
 8004834:	2201      	movs	r2, #1
 8004836:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004838:	f7fe fa66 	bl	8002d08 <HAL_GetTick>
 800483c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800483e:	e008      	b.n	8004852 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004840:	f7fe fa62 	bl	8002d08 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b02      	cmp	r3, #2
 800484c:	d901      	bls.n	8004852 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e164      	b.n	8004b1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004852:	4b26      	ldr	r3, [pc, #152]	; (80048ec <HAL_RCC_OscConfig+0x2ac>)
 8004854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d0f0      	beq.n	8004840 <HAL_RCC_OscConfig+0x200>
 800485e:	e015      	b.n	800488c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004860:	4b24      	ldr	r3, [pc, #144]	; (80048f4 <HAL_RCC_OscConfig+0x2b4>)
 8004862:	2200      	movs	r2, #0
 8004864:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004866:	f7fe fa4f 	bl	8002d08 <HAL_GetTick>
 800486a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800486c:	e008      	b.n	8004880 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800486e:	f7fe fa4b 	bl	8002d08 <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	2b02      	cmp	r3, #2
 800487a:	d901      	bls.n	8004880 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e14d      	b.n	8004b1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004880:	4b1a      	ldr	r3, [pc, #104]	; (80048ec <HAL_RCC_OscConfig+0x2ac>)
 8004882:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d1f0      	bne.n	800486e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0304 	and.w	r3, r3, #4
 8004894:	2b00      	cmp	r3, #0
 8004896:	f000 80a0 	beq.w	80049da <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800489a:	2300      	movs	r3, #0
 800489c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800489e:	4b13      	ldr	r3, [pc, #76]	; (80048ec <HAL_RCC_OscConfig+0x2ac>)
 80048a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d10f      	bne.n	80048ca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048aa:	2300      	movs	r3, #0
 80048ac:	60bb      	str	r3, [r7, #8]
 80048ae:	4b0f      	ldr	r3, [pc, #60]	; (80048ec <HAL_RCC_OscConfig+0x2ac>)
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	4a0e      	ldr	r2, [pc, #56]	; (80048ec <HAL_RCC_OscConfig+0x2ac>)
 80048b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048b8:	6413      	str	r3, [r2, #64]	; 0x40
 80048ba:	4b0c      	ldr	r3, [pc, #48]	; (80048ec <HAL_RCC_OscConfig+0x2ac>)
 80048bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c2:	60bb      	str	r3, [r7, #8]
 80048c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048c6:	2301      	movs	r3, #1
 80048c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ca:	4b0b      	ldr	r3, [pc, #44]	; (80048f8 <HAL_RCC_OscConfig+0x2b8>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d121      	bne.n	800491a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048d6:	4b08      	ldr	r3, [pc, #32]	; (80048f8 <HAL_RCC_OscConfig+0x2b8>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a07      	ldr	r2, [pc, #28]	; (80048f8 <HAL_RCC_OscConfig+0x2b8>)
 80048dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048e2:	f7fe fa11 	bl	8002d08 <HAL_GetTick>
 80048e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048e8:	e011      	b.n	800490e <HAL_RCC_OscConfig+0x2ce>
 80048ea:	bf00      	nop
 80048ec:	40023800 	.word	0x40023800
 80048f0:	42470000 	.word	0x42470000
 80048f4:	42470e80 	.word	0x42470e80
 80048f8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048fc:	f7fe fa04 	bl	8002d08 <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	2b02      	cmp	r3, #2
 8004908:	d901      	bls.n	800490e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e106      	b.n	8004b1c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800490e:	4b85      	ldr	r3, [pc, #532]	; (8004b24 <HAL_RCC_OscConfig+0x4e4>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004916:	2b00      	cmp	r3, #0
 8004918:	d0f0      	beq.n	80048fc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d106      	bne.n	8004930 <HAL_RCC_OscConfig+0x2f0>
 8004922:	4b81      	ldr	r3, [pc, #516]	; (8004b28 <HAL_RCC_OscConfig+0x4e8>)
 8004924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004926:	4a80      	ldr	r2, [pc, #512]	; (8004b28 <HAL_RCC_OscConfig+0x4e8>)
 8004928:	f043 0301 	orr.w	r3, r3, #1
 800492c:	6713      	str	r3, [r2, #112]	; 0x70
 800492e:	e01c      	b.n	800496a <HAL_RCC_OscConfig+0x32a>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	2b05      	cmp	r3, #5
 8004936:	d10c      	bne.n	8004952 <HAL_RCC_OscConfig+0x312>
 8004938:	4b7b      	ldr	r3, [pc, #492]	; (8004b28 <HAL_RCC_OscConfig+0x4e8>)
 800493a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800493c:	4a7a      	ldr	r2, [pc, #488]	; (8004b28 <HAL_RCC_OscConfig+0x4e8>)
 800493e:	f043 0304 	orr.w	r3, r3, #4
 8004942:	6713      	str	r3, [r2, #112]	; 0x70
 8004944:	4b78      	ldr	r3, [pc, #480]	; (8004b28 <HAL_RCC_OscConfig+0x4e8>)
 8004946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004948:	4a77      	ldr	r2, [pc, #476]	; (8004b28 <HAL_RCC_OscConfig+0x4e8>)
 800494a:	f043 0301 	orr.w	r3, r3, #1
 800494e:	6713      	str	r3, [r2, #112]	; 0x70
 8004950:	e00b      	b.n	800496a <HAL_RCC_OscConfig+0x32a>
 8004952:	4b75      	ldr	r3, [pc, #468]	; (8004b28 <HAL_RCC_OscConfig+0x4e8>)
 8004954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004956:	4a74      	ldr	r2, [pc, #464]	; (8004b28 <HAL_RCC_OscConfig+0x4e8>)
 8004958:	f023 0301 	bic.w	r3, r3, #1
 800495c:	6713      	str	r3, [r2, #112]	; 0x70
 800495e:	4b72      	ldr	r3, [pc, #456]	; (8004b28 <HAL_RCC_OscConfig+0x4e8>)
 8004960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004962:	4a71      	ldr	r2, [pc, #452]	; (8004b28 <HAL_RCC_OscConfig+0x4e8>)
 8004964:	f023 0304 	bic.w	r3, r3, #4
 8004968:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d015      	beq.n	800499e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004972:	f7fe f9c9 	bl	8002d08 <HAL_GetTick>
 8004976:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004978:	e00a      	b.n	8004990 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800497a:	f7fe f9c5 	bl	8002d08 <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	f241 3288 	movw	r2, #5000	; 0x1388
 8004988:	4293      	cmp	r3, r2
 800498a:	d901      	bls.n	8004990 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e0c5      	b.n	8004b1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004990:	4b65      	ldr	r3, [pc, #404]	; (8004b28 <HAL_RCC_OscConfig+0x4e8>)
 8004992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004994:	f003 0302 	and.w	r3, r3, #2
 8004998:	2b00      	cmp	r3, #0
 800499a:	d0ee      	beq.n	800497a <HAL_RCC_OscConfig+0x33a>
 800499c:	e014      	b.n	80049c8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800499e:	f7fe f9b3 	bl	8002d08 <HAL_GetTick>
 80049a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049a4:	e00a      	b.n	80049bc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049a6:	f7fe f9af 	bl	8002d08 <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d901      	bls.n	80049bc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e0af      	b.n	8004b1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049bc:	4b5a      	ldr	r3, [pc, #360]	; (8004b28 <HAL_RCC_OscConfig+0x4e8>)
 80049be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c0:	f003 0302 	and.w	r3, r3, #2
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d1ee      	bne.n	80049a6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049c8:	7dfb      	ldrb	r3, [r7, #23]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d105      	bne.n	80049da <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049ce:	4b56      	ldr	r3, [pc, #344]	; (8004b28 <HAL_RCC_OscConfig+0x4e8>)
 80049d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d2:	4a55      	ldr	r2, [pc, #340]	; (8004b28 <HAL_RCC_OscConfig+0x4e8>)
 80049d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	f000 809b 	beq.w	8004b1a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049e4:	4b50      	ldr	r3, [pc, #320]	; (8004b28 <HAL_RCC_OscConfig+0x4e8>)
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f003 030c 	and.w	r3, r3, #12
 80049ec:	2b08      	cmp	r3, #8
 80049ee:	d05c      	beq.n	8004aaa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d141      	bne.n	8004a7c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049f8:	4b4c      	ldr	r3, [pc, #304]	; (8004b2c <HAL_RCC_OscConfig+0x4ec>)
 80049fa:	2200      	movs	r2, #0
 80049fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049fe:	f7fe f983 	bl	8002d08 <HAL_GetTick>
 8004a02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a04:	e008      	b.n	8004a18 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a06:	f7fe f97f 	bl	8002d08 <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d901      	bls.n	8004a18 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e081      	b.n	8004b1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a18:	4b43      	ldr	r3, [pc, #268]	; (8004b28 <HAL_RCC_OscConfig+0x4e8>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1f0      	bne.n	8004a06 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	69da      	ldr	r2, [r3, #28]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a1b      	ldr	r3, [r3, #32]
 8004a2c:	431a      	orrs	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a32:	019b      	lsls	r3, r3, #6
 8004a34:	431a      	orrs	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a3a:	085b      	lsrs	r3, r3, #1
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	041b      	lsls	r3, r3, #16
 8004a40:	431a      	orrs	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a46:	061b      	lsls	r3, r3, #24
 8004a48:	4937      	ldr	r1, [pc, #220]	; (8004b28 <HAL_RCC_OscConfig+0x4e8>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a4e:	4b37      	ldr	r3, [pc, #220]	; (8004b2c <HAL_RCC_OscConfig+0x4ec>)
 8004a50:	2201      	movs	r2, #1
 8004a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a54:	f7fe f958 	bl	8002d08 <HAL_GetTick>
 8004a58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a5c:	f7fe f954 	bl	8002d08 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e056      	b.n	8004b1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a6e:	4b2e      	ldr	r3, [pc, #184]	; (8004b28 <HAL_RCC_OscConfig+0x4e8>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d0f0      	beq.n	8004a5c <HAL_RCC_OscConfig+0x41c>
 8004a7a:	e04e      	b.n	8004b1a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a7c:	4b2b      	ldr	r3, [pc, #172]	; (8004b2c <HAL_RCC_OscConfig+0x4ec>)
 8004a7e:	2200      	movs	r2, #0
 8004a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a82:	f7fe f941 	bl	8002d08 <HAL_GetTick>
 8004a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a88:	e008      	b.n	8004a9c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a8a:	f7fe f93d 	bl	8002d08 <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d901      	bls.n	8004a9c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e03f      	b.n	8004b1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a9c:	4b22      	ldr	r3, [pc, #136]	; (8004b28 <HAL_RCC_OscConfig+0x4e8>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1f0      	bne.n	8004a8a <HAL_RCC_OscConfig+0x44a>
 8004aa8:	e037      	b.n	8004b1a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d101      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e032      	b.n	8004b1c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ab6:	4b1c      	ldr	r3, [pc, #112]	; (8004b28 <HAL_RCC_OscConfig+0x4e8>)
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d028      	beq.n	8004b16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d121      	bne.n	8004b16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d11a      	bne.n	8004b16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004aec:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d111      	bne.n	8004b16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004afc:	085b      	lsrs	r3, r3, #1
 8004afe:	3b01      	subs	r3, #1
 8004b00:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d107      	bne.n	8004b16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b10:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d001      	beq.n	8004b1a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e000      	b.n	8004b1c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3718      	adds	r7, #24
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	40007000 	.word	0x40007000
 8004b28:	40023800 	.word	0x40023800
 8004b2c:	42470060 	.word	0x42470060

08004b30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e0cc      	b.n	8004cde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b44:	4b68      	ldr	r3, [pc, #416]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0307 	and.w	r3, r3, #7
 8004b4c:	683a      	ldr	r2, [r7, #0]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d90c      	bls.n	8004b6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b52:	4b65      	ldr	r3, [pc, #404]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b54:	683a      	ldr	r2, [r7, #0]
 8004b56:	b2d2      	uxtb	r2, r2
 8004b58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b5a:	4b63      	ldr	r3, [pc, #396]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0307 	and.w	r3, r3, #7
 8004b62:	683a      	ldr	r2, [r7, #0]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d001      	beq.n	8004b6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e0b8      	b.n	8004cde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0302 	and.w	r3, r3, #2
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d020      	beq.n	8004bba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0304 	and.w	r3, r3, #4
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d005      	beq.n	8004b90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b84:	4b59      	ldr	r3, [pc, #356]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	4a58      	ldr	r2, [pc, #352]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004b8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0308 	and.w	r3, r3, #8
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d005      	beq.n	8004ba8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b9c:	4b53      	ldr	r3, [pc, #332]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	4a52      	ldr	r2, [pc, #328]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004ba2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ba6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ba8:	4b50      	ldr	r3, [pc, #320]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	494d      	ldr	r1, [pc, #308]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d044      	beq.n	8004c50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d107      	bne.n	8004bde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bce:	4b47      	ldr	r3, [pc, #284]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d119      	bne.n	8004c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e07f      	b.n	8004cde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d003      	beq.n	8004bee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bea:	2b03      	cmp	r3, #3
 8004bec:	d107      	bne.n	8004bfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bee:	4b3f      	ldr	r3, [pc, #252]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d109      	bne.n	8004c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e06f      	b.n	8004cde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bfe:	4b3b      	ldr	r3, [pc, #236]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e067      	b.n	8004cde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c0e:	4b37      	ldr	r3, [pc, #220]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f023 0203 	bic.w	r2, r3, #3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	4934      	ldr	r1, [pc, #208]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c20:	f7fe f872 	bl	8002d08 <HAL_GetTick>
 8004c24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c26:	e00a      	b.n	8004c3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c28:	f7fe f86e 	bl	8002d08 <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d901      	bls.n	8004c3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e04f      	b.n	8004cde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c3e:	4b2b      	ldr	r3, [pc, #172]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f003 020c 	and.w	r2, r3, #12
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d1eb      	bne.n	8004c28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c50:	4b25      	ldr	r3, [pc, #148]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0307 	and.w	r3, r3, #7
 8004c58:	683a      	ldr	r2, [r7, #0]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d20c      	bcs.n	8004c78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c5e:	4b22      	ldr	r3, [pc, #136]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c60:	683a      	ldr	r2, [r7, #0]
 8004c62:	b2d2      	uxtb	r2, r2
 8004c64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c66:	4b20      	ldr	r3, [pc, #128]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0307 	and.w	r3, r3, #7
 8004c6e:	683a      	ldr	r2, [r7, #0]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d001      	beq.n	8004c78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e032      	b.n	8004cde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0304 	and.w	r3, r3, #4
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d008      	beq.n	8004c96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c84:	4b19      	ldr	r3, [pc, #100]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	4916      	ldr	r1, [pc, #88]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0308 	and.w	r3, r3, #8
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d009      	beq.n	8004cb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ca2:	4b12      	ldr	r3, [pc, #72]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	00db      	lsls	r3, r3, #3
 8004cb0:	490e      	ldr	r1, [pc, #56]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004cb6:	f000 f821 	bl	8004cfc <HAL_RCC_GetSysClockFreq>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	4b0b      	ldr	r3, [pc, #44]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	091b      	lsrs	r3, r3, #4
 8004cc2:	f003 030f 	and.w	r3, r3, #15
 8004cc6:	490a      	ldr	r1, [pc, #40]	; (8004cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8004cc8:	5ccb      	ldrb	r3, [r1, r3]
 8004cca:	fa22 f303 	lsr.w	r3, r2, r3
 8004cce:	4a09      	ldr	r2, [pc, #36]	; (8004cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8004cd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004cd2:	4b09      	ldr	r3, [pc, #36]	; (8004cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7fd ffd2 	bl	8002c80 <HAL_InitTick>

  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	40023c00 	.word	0x40023c00
 8004cec:	40023800 	.word	0x40023800
 8004cf0:	080089e0 	.word	0x080089e0
 8004cf4:	20000004 	.word	0x20000004
 8004cf8:	20000008 	.word	0x20000008

08004cfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cfc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004d00:	b084      	sub	sp, #16
 8004d02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d04:	2300      	movs	r3, #0
 8004d06:	607b      	str	r3, [r7, #4]
 8004d08:	2300      	movs	r3, #0
 8004d0a:	60fb      	str	r3, [r7, #12]
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004d10:	2300      	movs	r3, #0
 8004d12:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d14:	4b67      	ldr	r3, [pc, #412]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f003 030c 	and.w	r3, r3, #12
 8004d1c:	2b08      	cmp	r3, #8
 8004d1e:	d00d      	beq.n	8004d3c <HAL_RCC_GetSysClockFreq+0x40>
 8004d20:	2b08      	cmp	r3, #8
 8004d22:	f200 80bd 	bhi.w	8004ea0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d002      	beq.n	8004d30 <HAL_RCC_GetSysClockFreq+0x34>
 8004d2a:	2b04      	cmp	r3, #4
 8004d2c:	d003      	beq.n	8004d36 <HAL_RCC_GetSysClockFreq+0x3a>
 8004d2e:	e0b7      	b.n	8004ea0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d30:	4b61      	ldr	r3, [pc, #388]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004d32:	60bb      	str	r3, [r7, #8]
       break;
 8004d34:	e0b7      	b.n	8004ea6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d36:	4b61      	ldr	r3, [pc, #388]	; (8004ebc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004d38:	60bb      	str	r3, [r7, #8]
      break;
 8004d3a:	e0b4      	b.n	8004ea6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d3c:	4b5d      	ldr	r3, [pc, #372]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d44:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d46:	4b5b      	ldr	r3, [pc, #364]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d04d      	beq.n	8004dee <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d52:	4b58      	ldr	r3, [pc, #352]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	099b      	lsrs	r3, r3, #6
 8004d58:	461a      	mov	r2, r3
 8004d5a:	f04f 0300 	mov.w	r3, #0
 8004d5e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004d62:	f04f 0100 	mov.w	r1, #0
 8004d66:	ea02 0800 	and.w	r8, r2, r0
 8004d6a:	ea03 0901 	and.w	r9, r3, r1
 8004d6e:	4640      	mov	r0, r8
 8004d70:	4649      	mov	r1, r9
 8004d72:	f04f 0200 	mov.w	r2, #0
 8004d76:	f04f 0300 	mov.w	r3, #0
 8004d7a:	014b      	lsls	r3, r1, #5
 8004d7c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004d80:	0142      	lsls	r2, r0, #5
 8004d82:	4610      	mov	r0, r2
 8004d84:	4619      	mov	r1, r3
 8004d86:	ebb0 0008 	subs.w	r0, r0, r8
 8004d8a:	eb61 0109 	sbc.w	r1, r1, r9
 8004d8e:	f04f 0200 	mov.w	r2, #0
 8004d92:	f04f 0300 	mov.w	r3, #0
 8004d96:	018b      	lsls	r3, r1, #6
 8004d98:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004d9c:	0182      	lsls	r2, r0, #6
 8004d9e:	1a12      	subs	r2, r2, r0
 8004da0:	eb63 0301 	sbc.w	r3, r3, r1
 8004da4:	f04f 0000 	mov.w	r0, #0
 8004da8:	f04f 0100 	mov.w	r1, #0
 8004dac:	00d9      	lsls	r1, r3, #3
 8004dae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004db2:	00d0      	lsls	r0, r2, #3
 8004db4:	4602      	mov	r2, r0
 8004db6:	460b      	mov	r3, r1
 8004db8:	eb12 0208 	adds.w	r2, r2, r8
 8004dbc:	eb43 0309 	adc.w	r3, r3, r9
 8004dc0:	f04f 0000 	mov.w	r0, #0
 8004dc4:	f04f 0100 	mov.w	r1, #0
 8004dc8:	0259      	lsls	r1, r3, #9
 8004dca:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004dce:	0250      	lsls	r0, r2, #9
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	4610      	mov	r0, r2
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	461a      	mov	r2, r3
 8004ddc:	f04f 0300 	mov.w	r3, #0
 8004de0:	f7fb ff5a 	bl	8000c98 <__aeabi_uldivmod>
 8004de4:	4602      	mov	r2, r0
 8004de6:	460b      	mov	r3, r1
 8004de8:	4613      	mov	r3, r2
 8004dea:	60fb      	str	r3, [r7, #12]
 8004dec:	e04a      	b.n	8004e84 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dee:	4b31      	ldr	r3, [pc, #196]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	099b      	lsrs	r3, r3, #6
 8004df4:	461a      	mov	r2, r3
 8004df6:	f04f 0300 	mov.w	r3, #0
 8004dfa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004dfe:	f04f 0100 	mov.w	r1, #0
 8004e02:	ea02 0400 	and.w	r4, r2, r0
 8004e06:	ea03 0501 	and.w	r5, r3, r1
 8004e0a:	4620      	mov	r0, r4
 8004e0c:	4629      	mov	r1, r5
 8004e0e:	f04f 0200 	mov.w	r2, #0
 8004e12:	f04f 0300 	mov.w	r3, #0
 8004e16:	014b      	lsls	r3, r1, #5
 8004e18:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004e1c:	0142      	lsls	r2, r0, #5
 8004e1e:	4610      	mov	r0, r2
 8004e20:	4619      	mov	r1, r3
 8004e22:	1b00      	subs	r0, r0, r4
 8004e24:	eb61 0105 	sbc.w	r1, r1, r5
 8004e28:	f04f 0200 	mov.w	r2, #0
 8004e2c:	f04f 0300 	mov.w	r3, #0
 8004e30:	018b      	lsls	r3, r1, #6
 8004e32:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004e36:	0182      	lsls	r2, r0, #6
 8004e38:	1a12      	subs	r2, r2, r0
 8004e3a:	eb63 0301 	sbc.w	r3, r3, r1
 8004e3e:	f04f 0000 	mov.w	r0, #0
 8004e42:	f04f 0100 	mov.w	r1, #0
 8004e46:	00d9      	lsls	r1, r3, #3
 8004e48:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e4c:	00d0      	lsls	r0, r2, #3
 8004e4e:	4602      	mov	r2, r0
 8004e50:	460b      	mov	r3, r1
 8004e52:	1912      	adds	r2, r2, r4
 8004e54:	eb45 0303 	adc.w	r3, r5, r3
 8004e58:	f04f 0000 	mov.w	r0, #0
 8004e5c:	f04f 0100 	mov.w	r1, #0
 8004e60:	0299      	lsls	r1, r3, #10
 8004e62:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004e66:	0290      	lsls	r0, r2, #10
 8004e68:	4602      	mov	r2, r0
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	4610      	mov	r0, r2
 8004e6e:	4619      	mov	r1, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	461a      	mov	r2, r3
 8004e74:	f04f 0300 	mov.w	r3, #0
 8004e78:	f7fb ff0e 	bl	8000c98 <__aeabi_uldivmod>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	460b      	mov	r3, r1
 8004e80:	4613      	mov	r3, r2
 8004e82:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e84:	4b0b      	ldr	r3, [pc, #44]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	0c1b      	lsrs	r3, r3, #16
 8004e8a:	f003 0303 	and.w	r3, r3, #3
 8004e8e:	3301      	adds	r3, #1
 8004e90:	005b      	lsls	r3, r3, #1
 8004e92:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e9c:	60bb      	str	r3, [r7, #8]
      break;
 8004e9e:	e002      	b.n	8004ea6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ea0:	4b05      	ldr	r3, [pc, #20]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004ea2:	60bb      	str	r3, [r7, #8]
      break;
 8004ea4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ea6:	68bb      	ldr	r3, [r7, #8]
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3710      	adds	r7, #16
 8004eac:	46bd      	mov	sp, r7
 8004eae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004eb2:	bf00      	nop
 8004eb4:	40023800 	.word	0x40023800
 8004eb8:	00f42400 	.word	0x00f42400
 8004ebc:	007a1200 	.word	0x007a1200

08004ec0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ec4:	4b03      	ldr	r3, [pc, #12]	; (8004ed4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	20000004 	.word	0x20000004

08004ed8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004edc:	f7ff fff0 	bl	8004ec0 <HAL_RCC_GetHCLKFreq>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	4b05      	ldr	r3, [pc, #20]	; (8004ef8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	0a9b      	lsrs	r3, r3, #10
 8004ee8:	f003 0307 	and.w	r3, r3, #7
 8004eec:	4903      	ldr	r1, [pc, #12]	; (8004efc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004eee:	5ccb      	ldrb	r3, [r1, r3]
 8004ef0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	40023800 	.word	0x40023800
 8004efc:	080089f0 	.word	0x080089f0

08004f00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f04:	f7ff ffdc 	bl	8004ec0 <HAL_RCC_GetHCLKFreq>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	4b05      	ldr	r3, [pc, #20]	; (8004f20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	0b5b      	lsrs	r3, r3, #13
 8004f10:	f003 0307 	and.w	r3, r3, #7
 8004f14:	4903      	ldr	r1, [pc, #12]	; (8004f24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f16:	5ccb      	ldrb	r3, [r1, r3]
 8004f18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	40023800 	.word	0x40023800
 8004f24:	080089f0 	.word	0x080089f0

08004f28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d101      	bne.n	8004f3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e041      	b.n	8004fbe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d106      	bne.n	8004f54 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f7fd fc54 	bl	80027fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2202      	movs	r2, #2
 8004f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	3304      	adds	r3, #4
 8004f64:	4619      	mov	r1, r3
 8004f66:	4610      	mov	r0, r2
 8004f68:	f000 fad4 	bl	8005514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3708      	adds	r7, #8
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
	...

08004fc8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d109      	bne.n	8004fec <HAL_TIM_PWM_Start+0x24>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	bf14      	ite	ne
 8004fe4:	2301      	movne	r3, #1
 8004fe6:	2300      	moveq	r3, #0
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	e022      	b.n	8005032 <HAL_TIM_PWM_Start+0x6a>
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	2b04      	cmp	r3, #4
 8004ff0:	d109      	bne.n	8005006 <HAL_TIM_PWM_Start+0x3e>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	bf14      	ite	ne
 8004ffe:	2301      	movne	r3, #1
 8005000:	2300      	moveq	r3, #0
 8005002:	b2db      	uxtb	r3, r3
 8005004:	e015      	b.n	8005032 <HAL_TIM_PWM_Start+0x6a>
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	2b08      	cmp	r3, #8
 800500a:	d109      	bne.n	8005020 <HAL_TIM_PWM_Start+0x58>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005012:	b2db      	uxtb	r3, r3
 8005014:	2b01      	cmp	r3, #1
 8005016:	bf14      	ite	ne
 8005018:	2301      	movne	r3, #1
 800501a:	2300      	moveq	r3, #0
 800501c:	b2db      	uxtb	r3, r3
 800501e:	e008      	b.n	8005032 <HAL_TIM_PWM_Start+0x6a>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005026:	b2db      	uxtb	r3, r3
 8005028:	2b01      	cmp	r3, #1
 800502a:	bf14      	ite	ne
 800502c:	2301      	movne	r3, #1
 800502e:	2300      	moveq	r3, #0
 8005030:	b2db      	uxtb	r3, r3
 8005032:	2b00      	cmp	r3, #0
 8005034:	d001      	beq.n	800503a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e068      	b.n	800510c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d104      	bne.n	800504a <HAL_TIM_PWM_Start+0x82>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2202      	movs	r2, #2
 8005044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005048:	e013      	b.n	8005072 <HAL_TIM_PWM_Start+0xaa>
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	2b04      	cmp	r3, #4
 800504e:	d104      	bne.n	800505a <HAL_TIM_PWM_Start+0x92>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2202      	movs	r2, #2
 8005054:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005058:	e00b      	b.n	8005072 <HAL_TIM_PWM_Start+0xaa>
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	2b08      	cmp	r3, #8
 800505e:	d104      	bne.n	800506a <HAL_TIM_PWM_Start+0xa2>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2202      	movs	r2, #2
 8005064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005068:	e003      	b.n	8005072 <HAL_TIM_PWM_Start+0xaa>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2202      	movs	r2, #2
 800506e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2201      	movs	r2, #1
 8005078:	6839      	ldr	r1, [r7, #0]
 800507a:	4618      	mov	r0, r3
 800507c:	f000 fc56 	bl	800592c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a23      	ldr	r2, [pc, #140]	; (8005114 <HAL_TIM_PWM_Start+0x14c>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d107      	bne.n	800509a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005098:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a1d      	ldr	r2, [pc, #116]	; (8005114 <HAL_TIM_PWM_Start+0x14c>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d018      	beq.n	80050d6 <HAL_TIM_PWM_Start+0x10e>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ac:	d013      	beq.n	80050d6 <HAL_TIM_PWM_Start+0x10e>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a19      	ldr	r2, [pc, #100]	; (8005118 <HAL_TIM_PWM_Start+0x150>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d00e      	beq.n	80050d6 <HAL_TIM_PWM_Start+0x10e>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a17      	ldr	r2, [pc, #92]	; (800511c <HAL_TIM_PWM_Start+0x154>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d009      	beq.n	80050d6 <HAL_TIM_PWM_Start+0x10e>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a16      	ldr	r2, [pc, #88]	; (8005120 <HAL_TIM_PWM_Start+0x158>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d004      	beq.n	80050d6 <HAL_TIM_PWM_Start+0x10e>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a14      	ldr	r2, [pc, #80]	; (8005124 <HAL_TIM_PWM_Start+0x15c>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d111      	bne.n	80050fa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f003 0307 	and.w	r3, r3, #7
 80050e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2b06      	cmp	r3, #6
 80050e6:	d010      	beq.n	800510a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f042 0201 	orr.w	r2, r2, #1
 80050f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050f8:	e007      	b.n	800510a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f042 0201 	orr.w	r2, r2, #1
 8005108:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3710      	adds	r7, #16
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	40010000 	.word	0x40010000
 8005118:	40000400 	.word	0x40000400
 800511c:	40000800 	.word	0x40000800
 8005120:	40000c00 	.word	0x40000c00
 8005124:	40014000 	.word	0x40014000

08005128 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b086      	sub	sp, #24
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d101      	bne.n	800513c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e097      	b.n	800526c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005142:	b2db      	uxtb	r3, r3
 8005144:	2b00      	cmp	r3, #0
 8005146:	d106      	bne.n	8005156 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f7fd fb9f 	bl	8002894 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2202      	movs	r2, #2
 800515a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	6812      	ldr	r2, [r2, #0]
 8005168:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800516c:	f023 0307 	bic.w	r3, r3, #7
 8005170:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	3304      	adds	r3, #4
 800517a:	4619      	mov	r1, r3
 800517c:	4610      	mov	r0, r2
 800517e:	f000 f9c9 	bl	8005514 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	6a1b      	ldr	r3, [r3, #32]
 8005198:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051aa:	f023 0303 	bic.w	r3, r3, #3
 80051ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	689a      	ldr	r2, [r3, #8]
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	021b      	lsls	r3, r3, #8
 80051ba:	4313      	orrs	r3, r2
 80051bc:	693a      	ldr	r2, [r7, #16]
 80051be:	4313      	orrs	r3, r2
 80051c0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80051c8:	f023 030c 	bic.w	r3, r3, #12
 80051cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	68da      	ldr	r2, [r3, #12]
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	69db      	ldr	r3, [r3, #28]
 80051e2:	021b      	lsls	r3, r3, #8
 80051e4:	4313      	orrs	r3, r2
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	011a      	lsls	r2, r3, #4
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	031b      	lsls	r3, r3, #12
 80051f8:	4313      	orrs	r3, r2
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005206:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800520e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	685a      	ldr	r2, [r3, #4]
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	695b      	ldr	r3, [r3, #20]
 8005218:	011b      	lsls	r3, r3, #4
 800521a:	4313      	orrs	r3, r2
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	4313      	orrs	r3, r2
 8005220:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2201      	movs	r2, #1
 800523e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2201      	movs	r2, #1
 8005246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2201      	movs	r2, #1
 800524e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2201      	movs	r2, #1
 8005256:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2201      	movs	r2, #1
 8005266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3718      	adds	r7, #24
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005284:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800528c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005294:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800529c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d110      	bne.n	80052c6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80052a4:	7bfb      	ldrb	r3, [r7, #15]
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d102      	bne.n	80052b0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80052aa:	7b7b      	ldrb	r3, [r7, #13]
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d001      	beq.n	80052b4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e069      	b.n	8005388 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2202      	movs	r2, #2
 80052b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2202      	movs	r2, #2
 80052c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052c4:	e031      	b.n	800532a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	2b04      	cmp	r3, #4
 80052ca:	d110      	bne.n	80052ee <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80052cc:	7bbb      	ldrb	r3, [r7, #14]
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d102      	bne.n	80052d8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80052d2:	7b3b      	ldrb	r3, [r7, #12]
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d001      	beq.n	80052dc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e055      	b.n	8005388 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2202      	movs	r2, #2
 80052e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2202      	movs	r2, #2
 80052e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052ec:	e01d      	b.n	800532a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80052ee:	7bfb      	ldrb	r3, [r7, #15]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d108      	bne.n	8005306 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80052f4:	7bbb      	ldrb	r3, [r7, #14]
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d105      	bne.n	8005306 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80052fa:	7b7b      	ldrb	r3, [r7, #13]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d102      	bne.n	8005306 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005300:	7b3b      	ldrb	r3, [r7, #12]
 8005302:	2b01      	cmp	r3, #1
 8005304:	d001      	beq.n	800530a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e03e      	b.n	8005388 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2202      	movs	r2, #2
 800530e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2202      	movs	r2, #2
 8005316:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2202      	movs	r2, #2
 800531e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2202      	movs	r2, #2
 8005326:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d003      	beq.n	8005338 <HAL_TIM_Encoder_Start+0xc4>
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	2b04      	cmp	r3, #4
 8005334:	d008      	beq.n	8005348 <HAL_TIM_Encoder_Start+0xd4>
 8005336:	e00f      	b.n	8005358 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2201      	movs	r2, #1
 800533e:	2100      	movs	r1, #0
 8005340:	4618      	mov	r0, r3
 8005342:	f000 faf3 	bl	800592c <TIM_CCxChannelCmd>
      break;
 8005346:	e016      	b.n	8005376 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2201      	movs	r2, #1
 800534e:	2104      	movs	r1, #4
 8005350:	4618      	mov	r0, r3
 8005352:	f000 faeb 	bl	800592c <TIM_CCxChannelCmd>
      break;
 8005356:	e00e      	b.n	8005376 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2201      	movs	r2, #1
 800535e:	2100      	movs	r1, #0
 8005360:	4618      	mov	r0, r3
 8005362:	f000 fae3 	bl	800592c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2201      	movs	r2, #1
 800536c:	2104      	movs	r1, #4
 800536e:	4618      	mov	r0, r3
 8005370:	f000 fadc 	bl	800592c <TIM_CCxChannelCmd>
      break;
 8005374:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f042 0201 	orr.w	r2, r2, #1
 8005384:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005386:	2300      	movs	r3, #0
}
 8005388:	4618      	mov	r0, r3
 800538a:	3710      	adds	r7, #16
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800539c:	2300      	movs	r3, #0
 800539e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d101      	bne.n	80053ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80053aa:	2302      	movs	r3, #2
 80053ac:	e0ae      	b.n	800550c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2201      	movs	r2, #1
 80053b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2b0c      	cmp	r3, #12
 80053ba:	f200 809f 	bhi.w	80054fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80053be:	a201      	add	r2, pc, #4	; (adr r2, 80053c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80053c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c4:	080053f9 	.word	0x080053f9
 80053c8:	080054fd 	.word	0x080054fd
 80053cc:	080054fd 	.word	0x080054fd
 80053d0:	080054fd 	.word	0x080054fd
 80053d4:	08005439 	.word	0x08005439
 80053d8:	080054fd 	.word	0x080054fd
 80053dc:	080054fd 	.word	0x080054fd
 80053e0:	080054fd 	.word	0x080054fd
 80053e4:	0800547b 	.word	0x0800547b
 80053e8:	080054fd 	.word	0x080054fd
 80053ec:	080054fd 	.word	0x080054fd
 80053f0:	080054fd 	.word	0x080054fd
 80053f4:	080054bb 	.word	0x080054bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68b9      	ldr	r1, [r7, #8]
 80053fe:	4618      	mov	r0, r3
 8005400:	f000 f908 	bl	8005614 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	699a      	ldr	r2, [r3, #24]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f042 0208 	orr.w	r2, r2, #8
 8005412:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	699a      	ldr	r2, [r3, #24]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f022 0204 	bic.w	r2, r2, #4
 8005422:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	6999      	ldr	r1, [r3, #24]
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	691a      	ldr	r2, [r3, #16]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	430a      	orrs	r2, r1
 8005434:	619a      	str	r2, [r3, #24]
      break;
 8005436:	e064      	b.n	8005502 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68b9      	ldr	r1, [r7, #8]
 800543e:	4618      	mov	r0, r3
 8005440:	f000 f94e 	bl	80056e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	699a      	ldr	r2, [r3, #24]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005452:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	699a      	ldr	r2, [r3, #24]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005462:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	6999      	ldr	r1, [r3, #24]
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	021a      	lsls	r2, r3, #8
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	430a      	orrs	r2, r1
 8005476:	619a      	str	r2, [r3, #24]
      break;
 8005478:	e043      	b.n	8005502 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68b9      	ldr	r1, [r7, #8]
 8005480:	4618      	mov	r0, r3
 8005482:	f000 f999 	bl	80057b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	69da      	ldr	r2, [r3, #28]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f042 0208 	orr.w	r2, r2, #8
 8005494:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	69da      	ldr	r2, [r3, #28]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f022 0204 	bic.w	r2, r2, #4
 80054a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	69d9      	ldr	r1, [r3, #28]
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	691a      	ldr	r2, [r3, #16]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	430a      	orrs	r2, r1
 80054b6:	61da      	str	r2, [r3, #28]
      break;
 80054b8:	e023      	b.n	8005502 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68b9      	ldr	r1, [r7, #8]
 80054c0:	4618      	mov	r0, r3
 80054c2:	f000 f9e3 	bl	800588c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	69da      	ldr	r2, [r3, #28]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	69da      	ldr	r2, [r3, #28]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	69d9      	ldr	r1, [r3, #28]
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	021a      	lsls	r2, r3, #8
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	430a      	orrs	r2, r1
 80054f8:	61da      	str	r2, [r3, #28]
      break;
 80054fa:	e002      	b.n	8005502 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	75fb      	strb	r3, [r7, #23]
      break;
 8005500:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800550a:	7dfb      	ldrb	r3, [r7, #23]
}
 800550c:	4618      	mov	r0, r3
 800550e:	3718      	adds	r7, #24
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a34      	ldr	r2, [pc, #208]	; (80055f8 <TIM_Base_SetConfig+0xe4>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d00f      	beq.n	800554c <TIM_Base_SetConfig+0x38>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005532:	d00b      	beq.n	800554c <TIM_Base_SetConfig+0x38>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a31      	ldr	r2, [pc, #196]	; (80055fc <TIM_Base_SetConfig+0xe8>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d007      	beq.n	800554c <TIM_Base_SetConfig+0x38>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a30      	ldr	r2, [pc, #192]	; (8005600 <TIM_Base_SetConfig+0xec>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d003      	beq.n	800554c <TIM_Base_SetConfig+0x38>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a2f      	ldr	r2, [pc, #188]	; (8005604 <TIM_Base_SetConfig+0xf0>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d108      	bne.n	800555e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005552:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	4313      	orrs	r3, r2
 800555c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a25      	ldr	r2, [pc, #148]	; (80055f8 <TIM_Base_SetConfig+0xe4>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d01b      	beq.n	800559e <TIM_Base_SetConfig+0x8a>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800556c:	d017      	beq.n	800559e <TIM_Base_SetConfig+0x8a>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a22      	ldr	r2, [pc, #136]	; (80055fc <TIM_Base_SetConfig+0xe8>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d013      	beq.n	800559e <TIM_Base_SetConfig+0x8a>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a21      	ldr	r2, [pc, #132]	; (8005600 <TIM_Base_SetConfig+0xec>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d00f      	beq.n	800559e <TIM_Base_SetConfig+0x8a>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a20      	ldr	r2, [pc, #128]	; (8005604 <TIM_Base_SetConfig+0xf0>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d00b      	beq.n	800559e <TIM_Base_SetConfig+0x8a>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a1f      	ldr	r2, [pc, #124]	; (8005608 <TIM_Base_SetConfig+0xf4>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d007      	beq.n	800559e <TIM_Base_SetConfig+0x8a>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a1e      	ldr	r2, [pc, #120]	; (800560c <TIM_Base_SetConfig+0xf8>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d003      	beq.n	800559e <TIM_Base_SetConfig+0x8a>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a1d      	ldr	r2, [pc, #116]	; (8005610 <TIM_Base_SetConfig+0xfc>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d108      	bne.n	80055b0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	695b      	ldr	r3, [r3, #20]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	689a      	ldr	r2, [r3, #8]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a08      	ldr	r2, [pc, #32]	; (80055f8 <TIM_Base_SetConfig+0xe4>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d103      	bne.n	80055e4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	691a      	ldr	r2, [r3, #16]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	615a      	str	r2, [r3, #20]
}
 80055ea:	bf00      	nop
 80055ec:	3714      	adds	r7, #20
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	40010000 	.word	0x40010000
 80055fc:	40000400 	.word	0x40000400
 8005600:	40000800 	.word	0x40000800
 8005604:	40000c00 	.word	0x40000c00
 8005608:	40014000 	.word	0x40014000
 800560c:	40014400 	.word	0x40014400
 8005610:	40014800 	.word	0x40014800

08005614 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005614:	b480      	push	{r7}
 8005616:	b087      	sub	sp, #28
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a1b      	ldr	r3, [r3, #32]
 8005622:	f023 0201 	bic.w	r2, r3, #1
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f023 0303 	bic.w	r3, r3, #3
 800564a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	4313      	orrs	r3, r2
 8005654:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f023 0302 	bic.w	r3, r3, #2
 800565c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	697a      	ldr	r2, [r7, #20]
 8005664:	4313      	orrs	r3, r2
 8005666:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a1c      	ldr	r2, [pc, #112]	; (80056dc <TIM_OC1_SetConfig+0xc8>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d10c      	bne.n	800568a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	f023 0308 	bic.w	r3, r3, #8
 8005676:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	697a      	ldr	r2, [r7, #20]
 800567e:	4313      	orrs	r3, r2
 8005680:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	f023 0304 	bic.w	r3, r3, #4
 8005688:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a13      	ldr	r2, [pc, #76]	; (80056dc <TIM_OC1_SetConfig+0xc8>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d111      	bne.n	80056b6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005698:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	693a      	ldr	r2, [r7, #16]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	685a      	ldr	r2, [r3, #4]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	697a      	ldr	r2, [r7, #20]
 80056ce:	621a      	str	r2, [r3, #32]
}
 80056d0:	bf00      	nop
 80056d2:	371c      	adds	r7, #28
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr
 80056dc:	40010000 	.word	0x40010000

080056e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b087      	sub	sp, #28
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a1b      	ldr	r3, [r3, #32]
 80056ee:	f023 0210 	bic.w	r2, r3, #16
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800570e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005716:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	021b      	lsls	r3, r3, #8
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	4313      	orrs	r3, r2
 8005722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	f023 0320 	bic.w	r3, r3, #32
 800572a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	011b      	lsls	r3, r3, #4
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	4313      	orrs	r3, r2
 8005736:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4a1e      	ldr	r2, [pc, #120]	; (80057b4 <TIM_OC2_SetConfig+0xd4>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d10d      	bne.n	800575c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005746:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	011b      	lsls	r3, r3, #4
 800574e:	697a      	ldr	r2, [r7, #20]
 8005750:	4313      	orrs	r3, r2
 8005752:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800575a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a15      	ldr	r2, [pc, #84]	; (80057b4 <TIM_OC2_SetConfig+0xd4>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d113      	bne.n	800578c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800576a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005772:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	695b      	ldr	r3, [r3, #20]
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	693a      	ldr	r2, [r7, #16]
 800577c:	4313      	orrs	r3, r2
 800577e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	699b      	ldr	r3, [r3, #24]
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	4313      	orrs	r3, r2
 800578a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	693a      	ldr	r2, [r7, #16]
 8005790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	685a      	ldr	r2, [r3, #4]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	621a      	str	r2, [r3, #32]
}
 80057a6:	bf00      	nop
 80057a8:	371c      	adds	r7, #28
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop
 80057b4:	40010000 	.word	0x40010000

080057b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b087      	sub	sp, #28
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a1b      	ldr	r3, [r3, #32]
 80057c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a1b      	ldr	r3, [r3, #32]
 80057d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	69db      	ldr	r3, [r3, #28]
 80057de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f023 0303 	bic.w	r3, r3, #3
 80057ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005800:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	021b      	lsls	r3, r3, #8
 8005808:	697a      	ldr	r2, [r7, #20]
 800580a:	4313      	orrs	r3, r2
 800580c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a1d      	ldr	r2, [pc, #116]	; (8005888 <TIM_OC3_SetConfig+0xd0>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d10d      	bne.n	8005832 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800581c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	021b      	lsls	r3, r3, #8
 8005824:	697a      	ldr	r2, [r7, #20]
 8005826:	4313      	orrs	r3, r2
 8005828:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005830:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a14      	ldr	r2, [pc, #80]	; (8005888 <TIM_OC3_SetConfig+0xd0>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d113      	bne.n	8005862 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005840:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005848:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	011b      	lsls	r3, r3, #4
 8005850:	693a      	ldr	r2, [r7, #16]
 8005852:	4313      	orrs	r3, r2
 8005854:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	011b      	lsls	r3, r3, #4
 800585c:	693a      	ldr	r2, [r7, #16]
 800585e:	4313      	orrs	r3, r2
 8005860:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	685a      	ldr	r2, [r3, #4]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	697a      	ldr	r2, [r7, #20]
 800587a:	621a      	str	r2, [r3, #32]
}
 800587c:	bf00      	nop
 800587e:	371c      	adds	r7, #28
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr
 8005888:	40010000 	.word	0x40010000

0800588c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800588c:	b480      	push	{r7}
 800588e:	b087      	sub	sp, #28
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a1b      	ldr	r3, [r3, #32]
 800589a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	69db      	ldr	r3, [r3, #28]
 80058b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	021b      	lsls	r3, r3, #8
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	031b      	lsls	r3, r3, #12
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a10      	ldr	r2, [pc, #64]	; (8005928 <TIM_OC4_SetConfig+0x9c>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d109      	bne.n	8005900 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	695b      	ldr	r3, [r3, #20]
 80058f8:	019b      	lsls	r3, r3, #6
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	697a      	ldr	r2, [r7, #20]
 8005904:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	685a      	ldr	r2, [r3, #4]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	693a      	ldr	r2, [r7, #16]
 8005918:	621a      	str	r2, [r3, #32]
}
 800591a:	bf00      	nop
 800591c:	371c      	adds	r7, #28
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	40010000 	.word	0x40010000

0800592c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800592c:	b480      	push	{r7}
 800592e:	b087      	sub	sp, #28
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	f003 031f 	and.w	r3, r3, #31
 800593e:	2201      	movs	r2, #1
 8005940:	fa02 f303 	lsl.w	r3, r2, r3
 8005944:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6a1a      	ldr	r2, [r3, #32]
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	43db      	mvns	r3, r3
 800594e:	401a      	ands	r2, r3
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6a1a      	ldr	r2, [r3, #32]
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	f003 031f 	and.w	r3, r3, #31
 800595e:	6879      	ldr	r1, [r7, #4]
 8005960:	fa01 f303 	lsl.w	r3, r1, r3
 8005964:	431a      	orrs	r2, r3
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	621a      	str	r2, [r3, #32]
}
 800596a:	bf00      	nop
 800596c:	371c      	adds	r7, #28
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
	...

08005978 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005988:	2b01      	cmp	r3, #1
 800598a:	d101      	bne.n	8005990 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800598c:	2302      	movs	r3, #2
 800598e:	e050      	b.n	8005a32 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2202      	movs	r2, #2
 800599c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	4313      	orrs	r3, r2
 80059c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a1c      	ldr	r2, [pc, #112]	; (8005a40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d018      	beq.n	8005a06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059dc:	d013      	beq.n	8005a06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a18      	ldr	r2, [pc, #96]	; (8005a44 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d00e      	beq.n	8005a06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a16      	ldr	r2, [pc, #88]	; (8005a48 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d009      	beq.n	8005a06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a15      	ldr	r2, [pc, #84]	; (8005a4c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d004      	beq.n	8005a06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a13      	ldr	r2, [pc, #76]	; (8005a50 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d10c      	bne.n	8005a20 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	68ba      	ldr	r2, [r7, #8]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68ba      	ldr	r2, [r7, #8]
 8005a1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3714      	adds	r7, #20
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	40010000 	.word	0x40010000
 8005a44:	40000400 	.word	0x40000400
 8005a48:	40000800 	.word	0x40000800
 8005a4c:	40000c00 	.word	0x40000c00
 8005a50:	40014000 	.word	0x40014000

08005a54 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b085      	sub	sp, #20
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d101      	bne.n	8005a70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005a6c:	2302      	movs	r3, #2
 8005a6e:	e03d      	b.n	8005aec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	695b      	ldr	r3, [r3, #20]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	69db      	ldr	r3, [r3, #28]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3714      	adds	r7, #20
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d101      	bne.n	8005b0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e03f      	b.n	8005b8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d106      	bne.n	8005b24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f7fc ffa8 	bl	8002a74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2224      	movs	r2, #36	; 0x24
 8005b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68da      	ldr	r2, [r3, #12]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 f929 	bl	8005d94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	691a      	ldr	r2, [r3, #16]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	695a      	ldr	r2, [r3, #20]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68da      	ldr	r2, [r3, #12]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2220      	movs	r2, #32
 8005b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2220      	movs	r2, #32
 8005b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3708      	adds	r7, #8
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b08a      	sub	sp, #40	; 0x28
 8005b96:	af02      	add	r7, sp, #8
 8005b98:	60f8      	str	r0, [r7, #12]
 8005b9a:	60b9      	str	r1, [r7, #8]
 8005b9c:	603b      	str	r3, [r7, #0]
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	2b20      	cmp	r3, #32
 8005bb0:	d17c      	bne.n	8005cac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d002      	beq.n	8005bbe <HAL_UART_Transmit+0x2c>
 8005bb8:	88fb      	ldrh	r3, [r7, #6]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d101      	bne.n	8005bc2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e075      	b.n	8005cae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d101      	bne.n	8005bd0 <HAL_UART_Transmit+0x3e>
 8005bcc:	2302      	movs	r3, #2
 8005bce:	e06e      	b.n	8005cae <HAL_UART_Transmit+0x11c>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2221      	movs	r2, #33	; 0x21
 8005be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005be6:	f7fd f88f 	bl	8002d08 <HAL_GetTick>
 8005bea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	88fa      	ldrh	r2, [r7, #6]
 8005bf0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	88fa      	ldrh	r2, [r7, #6]
 8005bf6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c00:	d108      	bne.n	8005c14 <HAL_UART_Transmit+0x82>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d104      	bne.n	8005c14 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	61bb      	str	r3, [r7, #24]
 8005c12:	e003      	b.n	8005c1c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005c24:	e02a      	b.n	8005c7c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	9300      	str	r3, [sp, #0]
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	2180      	movs	r1, #128	; 0x80
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	f000 f840 	bl	8005cb6 <UART_WaitOnFlagUntilTimeout>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d001      	beq.n	8005c40 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e036      	b.n	8005cae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d10b      	bne.n	8005c5e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	881b      	ldrh	r3, [r3, #0]
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	3302      	adds	r3, #2
 8005c5a:	61bb      	str	r3, [r7, #24]
 8005c5c:	e007      	b.n	8005c6e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	781a      	ldrb	r2, [r3, #0]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	3b01      	subs	r3, #1
 8005c76:	b29a      	uxth	r2, r3
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1cf      	bne.n	8005c26 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	9300      	str	r3, [sp, #0]
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	2140      	movs	r1, #64	; 0x40
 8005c90:	68f8      	ldr	r0, [r7, #12]
 8005c92:	f000 f810 	bl	8005cb6 <UART_WaitOnFlagUntilTimeout>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d001      	beq.n	8005ca0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e006      	b.n	8005cae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2220      	movs	r2, #32
 8005ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	e000      	b.n	8005cae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005cac:	2302      	movs	r3, #2
  }
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3720      	adds	r7, #32
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b090      	sub	sp, #64	; 0x40
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	60f8      	str	r0, [r7, #12]
 8005cbe:	60b9      	str	r1, [r7, #8]
 8005cc0:	603b      	str	r3, [r7, #0]
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cc6:	e050      	b.n	8005d6a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cce:	d04c      	beq.n	8005d6a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005cd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d007      	beq.n	8005ce6 <UART_WaitOnFlagUntilTimeout+0x30>
 8005cd6:	f7fd f817 	bl	8002d08 <HAL_GetTick>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d241      	bcs.n	8005d6a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	330c      	adds	r3, #12
 8005cec:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf0:	e853 3f00 	ldrex	r3, [r3]
 8005cf4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	330c      	adds	r3, #12
 8005d04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d06:	637a      	str	r2, [r7, #52]	; 0x34
 8005d08:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d0e:	e841 2300 	strex	r3, r2, [r1]
 8005d12:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d1e5      	bne.n	8005ce6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	3314      	adds	r3, #20
 8005d20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	e853 3f00 	ldrex	r3, [r3]
 8005d28:	613b      	str	r3, [r7, #16]
   return(result);
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	f023 0301 	bic.w	r3, r3, #1
 8005d30:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	3314      	adds	r3, #20
 8005d38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d3a:	623a      	str	r2, [r7, #32]
 8005d3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3e:	69f9      	ldr	r1, [r7, #28]
 8005d40:	6a3a      	ldr	r2, [r7, #32]
 8005d42:	e841 2300 	strex	r3, r2, [r1]
 8005d46:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d1e5      	bne.n	8005d1a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2220      	movs	r2, #32
 8005d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2220      	movs	r2, #32
 8005d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e00f      	b.n	8005d8a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	4013      	ands	r3, r2
 8005d74:	68ba      	ldr	r2, [r7, #8]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	bf0c      	ite	eq
 8005d7a:	2301      	moveq	r3, #1
 8005d7c:	2300      	movne	r3, #0
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	461a      	mov	r2, r3
 8005d82:	79fb      	ldrb	r3, [r7, #7]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d09f      	beq.n	8005cc8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3740      	adds	r7, #64	; 0x40
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
	...

08005d94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d98:	b09f      	sub	sp, #124	; 0x7c
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005da8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005daa:	68d9      	ldr	r1, [r3, #12]
 8005dac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	ea40 0301 	orr.w	r3, r0, r1
 8005db4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005db6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005db8:	689a      	ldr	r2, [r3, #8]
 8005dba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	431a      	orrs	r2, r3
 8005dc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dc2:	695b      	ldr	r3, [r3, #20]
 8005dc4:	431a      	orrs	r2, r3
 8005dc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005dce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005dd8:	f021 010c 	bic.w	r1, r1, #12
 8005ddc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005de2:	430b      	orrs	r3, r1
 8005de4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005de6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	695b      	ldr	r3, [r3, #20]
 8005dec:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005df0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005df2:	6999      	ldr	r1, [r3, #24]
 8005df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	ea40 0301 	orr.w	r3, r0, r1
 8005dfc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005dfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	4bc5      	ldr	r3, [pc, #788]	; (8006118 <UART_SetConfig+0x384>)
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d004      	beq.n	8005e12 <UART_SetConfig+0x7e>
 8005e08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	4bc3      	ldr	r3, [pc, #780]	; (800611c <UART_SetConfig+0x388>)
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d103      	bne.n	8005e1a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e12:	f7ff f875 	bl	8004f00 <HAL_RCC_GetPCLK2Freq>
 8005e16:	6778      	str	r0, [r7, #116]	; 0x74
 8005e18:	e002      	b.n	8005e20 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e1a:	f7ff f85d 	bl	8004ed8 <HAL_RCC_GetPCLK1Freq>
 8005e1e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e22:	69db      	ldr	r3, [r3, #28]
 8005e24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e28:	f040 80b6 	bne.w	8005f98 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e2e:	461c      	mov	r4, r3
 8005e30:	f04f 0500 	mov.w	r5, #0
 8005e34:	4622      	mov	r2, r4
 8005e36:	462b      	mov	r3, r5
 8005e38:	1891      	adds	r1, r2, r2
 8005e3a:	6439      	str	r1, [r7, #64]	; 0x40
 8005e3c:	415b      	adcs	r3, r3
 8005e3e:	647b      	str	r3, [r7, #68]	; 0x44
 8005e40:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005e44:	1912      	adds	r2, r2, r4
 8005e46:	eb45 0303 	adc.w	r3, r5, r3
 8005e4a:	f04f 0000 	mov.w	r0, #0
 8005e4e:	f04f 0100 	mov.w	r1, #0
 8005e52:	00d9      	lsls	r1, r3, #3
 8005e54:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e58:	00d0      	lsls	r0, r2, #3
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	1911      	adds	r1, r2, r4
 8005e60:	6639      	str	r1, [r7, #96]	; 0x60
 8005e62:	416b      	adcs	r3, r5
 8005e64:	667b      	str	r3, [r7, #100]	; 0x64
 8005e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	f04f 0300 	mov.w	r3, #0
 8005e70:	1891      	adds	r1, r2, r2
 8005e72:	63b9      	str	r1, [r7, #56]	; 0x38
 8005e74:	415b      	adcs	r3, r3
 8005e76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005e7c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005e80:	f7fa ff0a 	bl	8000c98 <__aeabi_uldivmod>
 8005e84:	4602      	mov	r2, r0
 8005e86:	460b      	mov	r3, r1
 8005e88:	4ba5      	ldr	r3, [pc, #660]	; (8006120 <UART_SetConfig+0x38c>)
 8005e8a:	fba3 2302 	umull	r2, r3, r3, r2
 8005e8e:	095b      	lsrs	r3, r3, #5
 8005e90:	011e      	lsls	r6, r3, #4
 8005e92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e94:	461c      	mov	r4, r3
 8005e96:	f04f 0500 	mov.w	r5, #0
 8005e9a:	4622      	mov	r2, r4
 8005e9c:	462b      	mov	r3, r5
 8005e9e:	1891      	adds	r1, r2, r2
 8005ea0:	6339      	str	r1, [r7, #48]	; 0x30
 8005ea2:	415b      	adcs	r3, r3
 8005ea4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ea6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005eaa:	1912      	adds	r2, r2, r4
 8005eac:	eb45 0303 	adc.w	r3, r5, r3
 8005eb0:	f04f 0000 	mov.w	r0, #0
 8005eb4:	f04f 0100 	mov.w	r1, #0
 8005eb8:	00d9      	lsls	r1, r3, #3
 8005eba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ebe:	00d0      	lsls	r0, r2, #3
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	460b      	mov	r3, r1
 8005ec4:	1911      	adds	r1, r2, r4
 8005ec6:	65b9      	str	r1, [r7, #88]	; 0x58
 8005ec8:	416b      	adcs	r3, r5
 8005eca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ecc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	f04f 0300 	mov.w	r3, #0
 8005ed6:	1891      	adds	r1, r2, r2
 8005ed8:	62b9      	str	r1, [r7, #40]	; 0x28
 8005eda:	415b      	adcs	r3, r3
 8005edc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ede:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005ee2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005ee6:	f7fa fed7 	bl	8000c98 <__aeabi_uldivmod>
 8005eea:	4602      	mov	r2, r0
 8005eec:	460b      	mov	r3, r1
 8005eee:	4b8c      	ldr	r3, [pc, #560]	; (8006120 <UART_SetConfig+0x38c>)
 8005ef0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ef4:	095b      	lsrs	r3, r3, #5
 8005ef6:	2164      	movs	r1, #100	; 0x64
 8005ef8:	fb01 f303 	mul.w	r3, r1, r3
 8005efc:	1ad3      	subs	r3, r2, r3
 8005efe:	00db      	lsls	r3, r3, #3
 8005f00:	3332      	adds	r3, #50	; 0x32
 8005f02:	4a87      	ldr	r2, [pc, #540]	; (8006120 <UART_SetConfig+0x38c>)
 8005f04:	fba2 2303 	umull	r2, r3, r2, r3
 8005f08:	095b      	lsrs	r3, r3, #5
 8005f0a:	005b      	lsls	r3, r3, #1
 8005f0c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f10:	441e      	add	r6, r3
 8005f12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f14:	4618      	mov	r0, r3
 8005f16:	f04f 0100 	mov.w	r1, #0
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	1894      	adds	r4, r2, r2
 8005f20:	623c      	str	r4, [r7, #32]
 8005f22:	415b      	adcs	r3, r3
 8005f24:	627b      	str	r3, [r7, #36]	; 0x24
 8005f26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f2a:	1812      	adds	r2, r2, r0
 8005f2c:	eb41 0303 	adc.w	r3, r1, r3
 8005f30:	f04f 0400 	mov.w	r4, #0
 8005f34:	f04f 0500 	mov.w	r5, #0
 8005f38:	00dd      	lsls	r5, r3, #3
 8005f3a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005f3e:	00d4      	lsls	r4, r2, #3
 8005f40:	4622      	mov	r2, r4
 8005f42:	462b      	mov	r3, r5
 8005f44:	1814      	adds	r4, r2, r0
 8005f46:	653c      	str	r4, [r7, #80]	; 0x50
 8005f48:	414b      	adcs	r3, r1
 8005f4a:	657b      	str	r3, [r7, #84]	; 0x54
 8005f4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	461a      	mov	r2, r3
 8005f52:	f04f 0300 	mov.w	r3, #0
 8005f56:	1891      	adds	r1, r2, r2
 8005f58:	61b9      	str	r1, [r7, #24]
 8005f5a:	415b      	adcs	r3, r3
 8005f5c:	61fb      	str	r3, [r7, #28]
 8005f5e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f62:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005f66:	f7fa fe97 	bl	8000c98 <__aeabi_uldivmod>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	4b6c      	ldr	r3, [pc, #432]	; (8006120 <UART_SetConfig+0x38c>)
 8005f70:	fba3 1302 	umull	r1, r3, r3, r2
 8005f74:	095b      	lsrs	r3, r3, #5
 8005f76:	2164      	movs	r1, #100	; 0x64
 8005f78:	fb01 f303 	mul.w	r3, r1, r3
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	00db      	lsls	r3, r3, #3
 8005f80:	3332      	adds	r3, #50	; 0x32
 8005f82:	4a67      	ldr	r2, [pc, #412]	; (8006120 <UART_SetConfig+0x38c>)
 8005f84:	fba2 2303 	umull	r2, r3, r2, r3
 8005f88:	095b      	lsrs	r3, r3, #5
 8005f8a:	f003 0207 	and.w	r2, r3, #7
 8005f8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4432      	add	r2, r6
 8005f94:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f96:	e0b9      	b.n	800610c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f9a:	461c      	mov	r4, r3
 8005f9c:	f04f 0500 	mov.w	r5, #0
 8005fa0:	4622      	mov	r2, r4
 8005fa2:	462b      	mov	r3, r5
 8005fa4:	1891      	adds	r1, r2, r2
 8005fa6:	6139      	str	r1, [r7, #16]
 8005fa8:	415b      	adcs	r3, r3
 8005faa:	617b      	str	r3, [r7, #20]
 8005fac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005fb0:	1912      	adds	r2, r2, r4
 8005fb2:	eb45 0303 	adc.w	r3, r5, r3
 8005fb6:	f04f 0000 	mov.w	r0, #0
 8005fba:	f04f 0100 	mov.w	r1, #0
 8005fbe:	00d9      	lsls	r1, r3, #3
 8005fc0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005fc4:	00d0      	lsls	r0, r2, #3
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	460b      	mov	r3, r1
 8005fca:	eb12 0804 	adds.w	r8, r2, r4
 8005fce:	eb43 0905 	adc.w	r9, r3, r5
 8005fd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f04f 0100 	mov.w	r1, #0
 8005fdc:	f04f 0200 	mov.w	r2, #0
 8005fe0:	f04f 0300 	mov.w	r3, #0
 8005fe4:	008b      	lsls	r3, r1, #2
 8005fe6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005fea:	0082      	lsls	r2, r0, #2
 8005fec:	4640      	mov	r0, r8
 8005fee:	4649      	mov	r1, r9
 8005ff0:	f7fa fe52 	bl	8000c98 <__aeabi_uldivmod>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	4b49      	ldr	r3, [pc, #292]	; (8006120 <UART_SetConfig+0x38c>)
 8005ffa:	fba3 2302 	umull	r2, r3, r3, r2
 8005ffe:	095b      	lsrs	r3, r3, #5
 8006000:	011e      	lsls	r6, r3, #4
 8006002:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006004:	4618      	mov	r0, r3
 8006006:	f04f 0100 	mov.w	r1, #0
 800600a:	4602      	mov	r2, r0
 800600c:	460b      	mov	r3, r1
 800600e:	1894      	adds	r4, r2, r2
 8006010:	60bc      	str	r4, [r7, #8]
 8006012:	415b      	adcs	r3, r3
 8006014:	60fb      	str	r3, [r7, #12]
 8006016:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800601a:	1812      	adds	r2, r2, r0
 800601c:	eb41 0303 	adc.w	r3, r1, r3
 8006020:	f04f 0400 	mov.w	r4, #0
 8006024:	f04f 0500 	mov.w	r5, #0
 8006028:	00dd      	lsls	r5, r3, #3
 800602a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800602e:	00d4      	lsls	r4, r2, #3
 8006030:	4622      	mov	r2, r4
 8006032:	462b      	mov	r3, r5
 8006034:	1814      	adds	r4, r2, r0
 8006036:	64bc      	str	r4, [r7, #72]	; 0x48
 8006038:	414b      	adcs	r3, r1
 800603a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800603c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	4618      	mov	r0, r3
 8006042:	f04f 0100 	mov.w	r1, #0
 8006046:	f04f 0200 	mov.w	r2, #0
 800604a:	f04f 0300 	mov.w	r3, #0
 800604e:	008b      	lsls	r3, r1, #2
 8006050:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006054:	0082      	lsls	r2, r0, #2
 8006056:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800605a:	f7fa fe1d 	bl	8000c98 <__aeabi_uldivmod>
 800605e:	4602      	mov	r2, r0
 8006060:	460b      	mov	r3, r1
 8006062:	4b2f      	ldr	r3, [pc, #188]	; (8006120 <UART_SetConfig+0x38c>)
 8006064:	fba3 1302 	umull	r1, r3, r3, r2
 8006068:	095b      	lsrs	r3, r3, #5
 800606a:	2164      	movs	r1, #100	; 0x64
 800606c:	fb01 f303 	mul.w	r3, r1, r3
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	011b      	lsls	r3, r3, #4
 8006074:	3332      	adds	r3, #50	; 0x32
 8006076:	4a2a      	ldr	r2, [pc, #168]	; (8006120 <UART_SetConfig+0x38c>)
 8006078:	fba2 2303 	umull	r2, r3, r2, r3
 800607c:	095b      	lsrs	r3, r3, #5
 800607e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006082:	441e      	add	r6, r3
 8006084:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006086:	4618      	mov	r0, r3
 8006088:	f04f 0100 	mov.w	r1, #0
 800608c:	4602      	mov	r2, r0
 800608e:	460b      	mov	r3, r1
 8006090:	1894      	adds	r4, r2, r2
 8006092:	603c      	str	r4, [r7, #0]
 8006094:	415b      	adcs	r3, r3
 8006096:	607b      	str	r3, [r7, #4]
 8006098:	e9d7 2300 	ldrd	r2, r3, [r7]
 800609c:	1812      	adds	r2, r2, r0
 800609e:	eb41 0303 	adc.w	r3, r1, r3
 80060a2:	f04f 0400 	mov.w	r4, #0
 80060a6:	f04f 0500 	mov.w	r5, #0
 80060aa:	00dd      	lsls	r5, r3, #3
 80060ac:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80060b0:	00d4      	lsls	r4, r2, #3
 80060b2:	4622      	mov	r2, r4
 80060b4:	462b      	mov	r3, r5
 80060b6:	eb12 0a00 	adds.w	sl, r2, r0
 80060ba:	eb43 0b01 	adc.w	fp, r3, r1
 80060be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	4618      	mov	r0, r3
 80060c4:	f04f 0100 	mov.w	r1, #0
 80060c8:	f04f 0200 	mov.w	r2, #0
 80060cc:	f04f 0300 	mov.w	r3, #0
 80060d0:	008b      	lsls	r3, r1, #2
 80060d2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80060d6:	0082      	lsls	r2, r0, #2
 80060d8:	4650      	mov	r0, sl
 80060da:	4659      	mov	r1, fp
 80060dc:	f7fa fddc 	bl	8000c98 <__aeabi_uldivmod>
 80060e0:	4602      	mov	r2, r0
 80060e2:	460b      	mov	r3, r1
 80060e4:	4b0e      	ldr	r3, [pc, #56]	; (8006120 <UART_SetConfig+0x38c>)
 80060e6:	fba3 1302 	umull	r1, r3, r3, r2
 80060ea:	095b      	lsrs	r3, r3, #5
 80060ec:	2164      	movs	r1, #100	; 0x64
 80060ee:	fb01 f303 	mul.w	r3, r1, r3
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	011b      	lsls	r3, r3, #4
 80060f6:	3332      	adds	r3, #50	; 0x32
 80060f8:	4a09      	ldr	r2, [pc, #36]	; (8006120 <UART_SetConfig+0x38c>)
 80060fa:	fba2 2303 	umull	r2, r3, r2, r3
 80060fe:	095b      	lsrs	r3, r3, #5
 8006100:	f003 020f 	and.w	r2, r3, #15
 8006104:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4432      	add	r2, r6
 800610a:	609a      	str	r2, [r3, #8]
}
 800610c:	bf00      	nop
 800610e:	377c      	adds	r7, #124	; 0x7c
 8006110:	46bd      	mov	sp, r7
 8006112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006116:	bf00      	nop
 8006118:	40011000 	.word	0x40011000
 800611c:	40011400 	.word	0x40011400
 8006120:	51eb851f 	.word	0x51eb851f

08006124 <__errno>:
 8006124:	4b01      	ldr	r3, [pc, #4]	; (800612c <__errno+0x8>)
 8006126:	6818      	ldr	r0, [r3, #0]
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop
 800612c:	20000010 	.word	0x20000010

08006130 <__libc_init_array>:
 8006130:	b570      	push	{r4, r5, r6, lr}
 8006132:	4d0d      	ldr	r5, [pc, #52]	; (8006168 <__libc_init_array+0x38>)
 8006134:	4c0d      	ldr	r4, [pc, #52]	; (800616c <__libc_init_array+0x3c>)
 8006136:	1b64      	subs	r4, r4, r5
 8006138:	10a4      	asrs	r4, r4, #2
 800613a:	2600      	movs	r6, #0
 800613c:	42a6      	cmp	r6, r4
 800613e:	d109      	bne.n	8006154 <__libc_init_array+0x24>
 8006140:	4d0b      	ldr	r5, [pc, #44]	; (8006170 <__libc_init_array+0x40>)
 8006142:	4c0c      	ldr	r4, [pc, #48]	; (8006174 <__libc_init_array+0x44>)
 8006144:	f002 fc32 	bl	80089ac <_init>
 8006148:	1b64      	subs	r4, r4, r5
 800614a:	10a4      	asrs	r4, r4, #2
 800614c:	2600      	movs	r6, #0
 800614e:	42a6      	cmp	r6, r4
 8006150:	d105      	bne.n	800615e <__libc_init_array+0x2e>
 8006152:	bd70      	pop	{r4, r5, r6, pc}
 8006154:	f855 3b04 	ldr.w	r3, [r5], #4
 8006158:	4798      	blx	r3
 800615a:	3601      	adds	r6, #1
 800615c:	e7ee      	b.n	800613c <__libc_init_array+0xc>
 800615e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006162:	4798      	blx	r3
 8006164:	3601      	adds	r6, #1
 8006166:	e7f2      	b.n	800614e <__libc_init_array+0x1e>
 8006168:	08008c50 	.word	0x08008c50
 800616c:	08008c50 	.word	0x08008c50
 8006170:	08008c50 	.word	0x08008c50
 8006174:	08008c54 	.word	0x08008c54

08006178 <memset>:
 8006178:	4402      	add	r2, r0
 800617a:	4603      	mov	r3, r0
 800617c:	4293      	cmp	r3, r2
 800617e:	d100      	bne.n	8006182 <memset+0xa>
 8006180:	4770      	bx	lr
 8006182:	f803 1b01 	strb.w	r1, [r3], #1
 8006186:	e7f9      	b.n	800617c <memset+0x4>

08006188 <siprintf>:
 8006188:	b40e      	push	{r1, r2, r3}
 800618a:	b500      	push	{lr}
 800618c:	b09c      	sub	sp, #112	; 0x70
 800618e:	ab1d      	add	r3, sp, #116	; 0x74
 8006190:	9002      	str	r0, [sp, #8]
 8006192:	9006      	str	r0, [sp, #24]
 8006194:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006198:	4809      	ldr	r0, [pc, #36]	; (80061c0 <siprintf+0x38>)
 800619a:	9107      	str	r1, [sp, #28]
 800619c:	9104      	str	r1, [sp, #16]
 800619e:	4909      	ldr	r1, [pc, #36]	; (80061c4 <siprintf+0x3c>)
 80061a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80061a4:	9105      	str	r1, [sp, #20]
 80061a6:	6800      	ldr	r0, [r0, #0]
 80061a8:	9301      	str	r3, [sp, #4]
 80061aa:	a902      	add	r1, sp, #8
 80061ac:	f000 f868 	bl	8006280 <_svfiprintf_r>
 80061b0:	9b02      	ldr	r3, [sp, #8]
 80061b2:	2200      	movs	r2, #0
 80061b4:	701a      	strb	r2, [r3, #0]
 80061b6:	b01c      	add	sp, #112	; 0x70
 80061b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80061bc:	b003      	add	sp, #12
 80061be:	4770      	bx	lr
 80061c0:	20000010 	.word	0x20000010
 80061c4:	ffff0208 	.word	0xffff0208

080061c8 <__ssputs_r>:
 80061c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061cc:	688e      	ldr	r6, [r1, #8]
 80061ce:	429e      	cmp	r6, r3
 80061d0:	4682      	mov	sl, r0
 80061d2:	460c      	mov	r4, r1
 80061d4:	4690      	mov	r8, r2
 80061d6:	461f      	mov	r7, r3
 80061d8:	d838      	bhi.n	800624c <__ssputs_r+0x84>
 80061da:	898a      	ldrh	r2, [r1, #12]
 80061dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80061e0:	d032      	beq.n	8006248 <__ssputs_r+0x80>
 80061e2:	6825      	ldr	r5, [r4, #0]
 80061e4:	6909      	ldr	r1, [r1, #16]
 80061e6:	eba5 0901 	sub.w	r9, r5, r1
 80061ea:	6965      	ldr	r5, [r4, #20]
 80061ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80061f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80061f4:	3301      	adds	r3, #1
 80061f6:	444b      	add	r3, r9
 80061f8:	106d      	asrs	r5, r5, #1
 80061fa:	429d      	cmp	r5, r3
 80061fc:	bf38      	it	cc
 80061fe:	461d      	movcc	r5, r3
 8006200:	0553      	lsls	r3, r2, #21
 8006202:	d531      	bpl.n	8006268 <__ssputs_r+0xa0>
 8006204:	4629      	mov	r1, r5
 8006206:	f000 fb47 	bl	8006898 <_malloc_r>
 800620a:	4606      	mov	r6, r0
 800620c:	b950      	cbnz	r0, 8006224 <__ssputs_r+0x5c>
 800620e:	230c      	movs	r3, #12
 8006210:	f8ca 3000 	str.w	r3, [sl]
 8006214:	89a3      	ldrh	r3, [r4, #12]
 8006216:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800621a:	81a3      	strh	r3, [r4, #12]
 800621c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006224:	6921      	ldr	r1, [r4, #16]
 8006226:	464a      	mov	r2, r9
 8006228:	f000 fabe 	bl	80067a8 <memcpy>
 800622c:	89a3      	ldrh	r3, [r4, #12]
 800622e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006232:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006236:	81a3      	strh	r3, [r4, #12]
 8006238:	6126      	str	r6, [r4, #16]
 800623a:	6165      	str	r5, [r4, #20]
 800623c:	444e      	add	r6, r9
 800623e:	eba5 0509 	sub.w	r5, r5, r9
 8006242:	6026      	str	r6, [r4, #0]
 8006244:	60a5      	str	r5, [r4, #8]
 8006246:	463e      	mov	r6, r7
 8006248:	42be      	cmp	r6, r7
 800624a:	d900      	bls.n	800624e <__ssputs_r+0x86>
 800624c:	463e      	mov	r6, r7
 800624e:	4632      	mov	r2, r6
 8006250:	6820      	ldr	r0, [r4, #0]
 8006252:	4641      	mov	r1, r8
 8006254:	f000 fab6 	bl	80067c4 <memmove>
 8006258:	68a3      	ldr	r3, [r4, #8]
 800625a:	6822      	ldr	r2, [r4, #0]
 800625c:	1b9b      	subs	r3, r3, r6
 800625e:	4432      	add	r2, r6
 8006260:	60a3      	str	r3, [r4, #8]
 8006262:	6022      	str	r2, [r4, #0]
 8006264:	2000      	movs	r0, #0
 8006266:	e7db      	b.n	8006220 <__ssputs_r+0x58>
 8006268:	462a      	mov	r2, r5
 800626a:	f000 fb6f 	bl	800694c <_realloc_r>
 800626e:	4606      	mov	r6, r0
 8006270:	2800      	cmp	r0, #0
 8006272:	d1e1      	bne.n	8006238 <__ssputs_r+0x70>
 8006274:	6921      	ldr	r1, [r4, #16]
 8006276:	4650      	mov	r0, sl
 8006278:	f000 fabe 	bl	80067f8 <_free_r>
 800627c:	e7c7      	b.n	800620e <__ssputs_r+0x46>
	...

08006280 <_svfiprintf_r>:
 8006280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006284:	4698      	mov	r8, r3
 8006286:	898b      	ldrh	r3, [r1, #12]
 8006288:	061b      	lsls	r3, r3, #24
 800628a:	b09d      	sub	sp, #116	; 0x74
 800628c:	4607      	mov	r7, r0
 800628e:	460d      	mov	r5, r1
 8006290:	4614      	mov	r4, r2
 8006292:	d50e      	bpl.n	80062b2 <_svfiprintf_r+0x32>
 8006294:	690b      	ldr	r3, [r1, #16]
 8006296:	b963      	cbnz	r3, 80062b2 <_svfiprintf_r+0x32>
 8006298:	2140      	movs	r1, #64	; 0x40
 800629a:	f000 fafd 	bl	8006898 <_malloc_r>
 800629e:	6028      	str	r0, [r5, #0]
 80062a0:	6128      	str	r0, [r5, #16]
 80062a2:	b920      	cbnz	r0, 80062ae <_svfiprintf_r+0x2e>
 80062a4:	230c      	movs	r3, #12
 80062a6:	603b      	str	r3, [r7, #0]
 80062a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062ac:	e0d1      	b.n	8006452 <_svfiprintf_r+0x1d2>
 80062ae:	2340      	movs	r3, #64	; 0x40
 80062b0:	616b      	str	r3, [r5, #20]
 80062b2:	2300      	movs	r3, #0
 80062b4:	9309      	str	r3, [sp, #36]	; 0x24
 80062b6:	2320      	movs	r3, #32
 80062b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80062bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80062c0:	2330      	movs	r3, #48	; 0x30
 80062c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800646c <_svfiprintf_r+0x1ec>
 80062c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80062ca:	f04f 0901 	mov.w	r9, #1
 80062ce:	4623      	mov	r3, r4
 80062d0:	469a      	mov	sl, r3
 80062d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062d6:	b10a      	cbz	r2, 80062dc <_svfiprintf_r+0x5c>
 80062d8:	2a25      	cmp	r2, #37	; 0x25
 80062da:	d1f9      	bne.n	80062d0 <_svfiprintf_r+0x50>
 80062dc:	ebba 0b04 	subs.w	fp, sl, r4
 80062e0:	d00b      	beq.n	80062fa <_svfiprintf_r+0x7a>
 80062e2:	465b      	mov	r3, fp
 80062e4:	4622      	mov	r2, r4
 80062e6:	4629      	mov	r1, r5
 80062e8:	4638      	mov	r0, r7
 80062ea:	f7ff ff6d 	bl	80061c8 <__ssputs_r>
 80062ee:	3001      	adds	r0, #1
 80062f0:	f000 80aa 	beq.w	8006448 <_svfiprintf_r+0x1c8>
 80062f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062f6:	445a      	add	r2, fp
 80062f8:	9209      	str	r2, [sp, #36]	; 0x24
 80062fa:	f89a 3000 	ldrb.w	r3, [sl]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	f000 80a2 	beq.w	8006448 <_svfiprintf_r+0x1c8>
 8006304:	2300      	movs	r3, #0
 8006306:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800630a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800630e:	f10a 0a01 	add.w	sl, sl, #1
 8006312:	9304      	str	r3, [sp, #16]
 8006314:	9307      	str	r3, [sp, #28]
 8006316:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800631a:	931a      	str	r3, [sp, #104]	; 0x68
 800631c:	4654      	mov	r4, sl
 800631e:	2205      	movs	r2, #5
 8006320:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006324:	4851      	ldr	r0, [pc, #324]	; (800646c <_svfiprintf_r+0x1ec>)
 8006326:	f7f9 ff63 	bl	80001f0 <memchr>
 800632a:	9a04      	ldr	r2, [sp, #16]
 800632c:	b9d8      	cbnz	r0, 8006366 <_svfiprintf_r+0xe6>
 800632e:	06d0      	lsls	r0, r2, #27
 8006330:	bf44      	itt	mi
 8006332:	2320      	movmi	r3, #32
 8006334:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006338:	0711      	lsls	r1, r2, #28
 800633a:	bf44      	itt	mi
 800633c:	232b      	movmi	r3, #43	; 0x2b
 800633e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006342:	f89a 3000 	ldrb.w	r3, [sl]
 8006346:	2b2a      	cmp	r3, #42	; 0x2a
 8006348:	d015      	beq.n	8006376 <_svfiprintf_r+0xf6>
 800634a:	9a07      	ldr	r2, [sp, #28]
 800634c:	4654      	mov	r4, sl
 800634e:	2000      	movs	r0, #0
 8006350:	f04f 0c0a 	mov.w	ip, #10
 8006354:	4621      	mov	r1, r4
 8006356:	f811 3b01 	ldrb.w	r3, [r1], #1
 800635a:	3b30      	subs	r3, #48	; 0x30
 800635c:	2b09      	cmp	r3, #9
 800635e:	d94e      	bls.n	80063fe <_svfiprintf_r+0x17e>
 8006360:	b1b0      	cbz	r0, 8006390 <_svfiprintf_r+0x110>
 8006362:	9207      	str	r2, [sp, #28]
 8006364:	e014      	b.n	8006390 <_svfiprintf_r+0x110>
 8006366:	eba0 0308 	sub.w	r3, r0, r8
 800636a:	fa09 f303 	lsl.w	r3, r9, r3
 800636e:	4313      	orrs	r3, r2
 8006370:	9304      	str	r3, [sp, #16]
 8006372:	46a2      	mov	sl, r4
 8006374:	e7d2      	b.n	800631c <_svfiprintf_r+0x9c>
 8006376:	9b03      	ldr	r3, [sp, #12]
 8006378:	1d19      	adds	r1, r3, #4
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	9103      	str	r1, [sp, #12]
 800637e:	2b00      	cmp	r3, #0
 8006380:	bfbb      	ittet	lt
 8006382:	425b      	neglt	r3, r3
 8006384:	f042 0202 	orrlt.w	r2, r2, #2
 8006388:	9307      	strge	r3, [sp, #28]
 800638a:	9307      	strlt	r3, [sp, #28]
 800638c:	bfb8      	it	lt
 800638e:	9204      	strlt	r2, [sp, #16]
 8006390:	7823      	ldrb	r3, [r4, #0]
 8006392:	2b2e      	cmp	r3, #46	; 0x2e
 8006394:	d10c      	bne.n	80063b0 <_svfiprintf_r+0x130>
 8006396:	7863      	ldrb	r3, [r4, #1]
 8006398:	2b2a      	cmp	r3, #42	; 0x2a
 800639a:	d135      	bne.n	8006408 <_svfiprintf_r+0x188>
 800639c:	9b03      	ldr	r3, [sp, #12]
 800639e:	1d1a      	adds	r2, r3, #4
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	9203      	str	r2, [sp, #12]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	bfb8      	it	lt
 80063a8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80063ac:	3402      	adds	r4, #2
 80063ae:	9305      	str	r3, [sp, #20]
 80063b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800647c <_svfiprintf_r+0x1fc>
 80063b4:	7821      	ldrb	r1, [r4, #0]
 80063b6:	2203      	movs	r2, #3
 80063b8:	4650      	mov	r0, sl
 80063ba:	f7f9 ff19 	bl	80001f0 <memchr>
 80063be:	b140      	cbz	r0, 80063d2 <_svfiprintf_r+0x152>
 80063c0:	2340      	movs	r3, #64	; 0x40
 80063c2:	eba0 000a 	sub.w	r0, r0, sl
 80063c6:	fa03 f000 	lsl.w	r0, r3, r0
 80063ca:	9b04      	ldr	r3, [sp, #16]
 80063cc:	4303      	orrs	r3, r0
 80063ce:	3401      	adds	r4, #1
 80063d0:	9304      	str	r3, [sp, #16]
 80063d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063d6:	4826      	ldr	r0, [pc, #152]	; (8006470 <_svfiprintf_r+0x1f0>)
 80063d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80063dc:	2206      	movs	r2, #6
 80063de:	f7f9 ff07 	bl	80001f0 <memchr>
 80063e2:	2800      	cmp	r0, #0
 80063e4:	d038      	beq.n	8006458 <_svfiprintf_r+0x1d8>
 80063e6:	4b23      	ldr	r3, [pc, #140]	; (8006474 <_svfiprintf_r+0x1f4>)
 80063e8:	bb1b      	cbnz	r3, 8006432 <_svfiprintf_r+0x1b2>
 80063ea:	9b03      	ldr	r3, [sp, #12]
 80063ec:	3307      	adds	r3, #7
 80063ee:	f023 0307 	bic.w	r3, r3, #7
 80063f2:	3308      	adds	r3, #8
 80063f4:	9303      	str	r3, [sp, #12]
 80063f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063f8:	4433      	add	r3, r6
 80063fa:	9309      	str	r3, [sp, #36]	; 0x24
 80063fc:	e767      	b.n	80062ce <_svfiprintf_r+0x4e>
 80063fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8006402:	460c      	mov	r4, r1
 8006404:	2001      	movs	r0, #1
 8006406:	e7a5      	b.n	8006354 <_svfiprintf_r+0xd4>
 8006408:	2300      	movs	r3, #0
 800640a:	3401      	adds	r4, #1
 800640c:	9305      	str	r3, [sp, #20]
 800640e:	4619      	mov	r1, r3
 8006410:	f04f 0c0a 	mov.w	ip, #10
 8006414:	4620      	mov	r0, r4
 8006416:	f810 2b01 	ldrb.w	r2, [r0], #1
 800641a:	3a30      	subs	r2, #48	; 0x30
 800641c:	2a09      	cmp	r2, #9
 800641e:	d903      	bls.n	8006428 <_svfiprintf_r+0x1a8>
 8006420:	2b00      	cmp	r3, #0
 8006422:	d0c5      	beq.n	80063b0 <_svfiprintf_r+0x130>
 8006424:	9105      	str	r1, [sp, #20]
 8006426:	e7c3      	b.n	80063b0 <_svfiprintf_r+0x130>
 8006428:	fb0c 2101 	mla	r1, ip, r1, r2
 800642c:	4604      	mov	r4, r0
 800642e:	2301      	movs	r3, #1
 8006430:	e7f0      	b.n	8006414 <_svfiprintf_r+0x194>
 8006432:	ab03      	add	r3, sp, #12
 8006434:	9300      	str	r3, [sp, #0]
 8006436:	462a      	mov	r2, r5
 8006438:	4b0f      	ldr	r3, [pc, #60]	; (8006478 <_svfiprintf_r+0x1f8>)
 800643a:	a904      	add	r1, sp, #16
 800643c:	4638      	mov	r0, r7
 800643e:	f3af 8000 	nop.w
 8006442:	1c42      	adds	r2, r0, #1
 8006444:	4606      	mov	r6, r0
 8006446:	d1d6      	bne.n	80063f6 <_svfiprintf_r+0x176>
 8006448:	89ab      	ldrh	r3, [r5, #12]
 800644a:	065b      	lsls	r3, r3, #25
 800644c:	f53f af2c 	bmi.w	80062a8 <_svfiprintf_r+0x28>
 8006450:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006452:	b01d      	add	sp, #116	; 0x74
 8006454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006458:	ab03      	add	r3, sp, #12
 800645a:	9300      	str	r3, [sp, #0]
 800645c:	462a      	mov	r2, r5
 800645e:	4b06      	ldr	r3, [pc, #24]	; (8006478 <_svfiprintf_r+0x1f8>)
 8006460:	a904      	add	r1, sp, #16
 8006462:	4638      	mov	r0, r7
 8006464:	f000 f87a 	bl	800655c <_printf_i>
 8006468:	e7eb      	b.n	8006442 <_svfiprintf_r+0x1c2>
 800646a:	bf00      	nop
 800646c:	080089f8 	.word	0x080089f8
 8006470:	08008a02 	.word	0x08008a02
 8006474:	00000000 	.word	0x00000000
 8006478:	080061c9 	.word	0x080061c9
 800647c:	080089fe 	.word	0x080089fe

08006480 <_printf_common>:
 8006480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006484:	4616      	mov	r6, r2
 8006486:	4699      	mov	r9, r3
 8006488:	688a      	ldr	r2, [r1, #8]
 800648a:	690b      	ldr	r3, [r1, #16]
 800648c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006490:	4293      	cmp	r3, r2
 8006492:	bfb8      	it	lt
 8006494:	4613      	movlt	r3, r2
 8006496:	6033      	str	r3, [r6, #0]
 8006498:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800649c:	4607      	mov	r7, r0
 800649e:	460c      	mov	r4, r1
 80064a0:	b10a      	cbz	r2, 80064a6 <_printf_common+0x26>
 80064a2:	3301      	adds	r3, #1
 80064a4:	6033      	str	r3, [r6, #0]
 80064a6:	6823      	ldr	r3, [r4, #0]
 80064a8:	0699      	lsls	r1, r3, #26
 80064aa:	bf42      	ittt	mi
 80064ac:	6833      	ldrmi	r3, [r6, #0]
 80064ae:	3302      	addmi	r3, #2
 80064b0:	6033      	strmi	r3, [r6, #0]
 80064b2:	6825      	ldr	r5, [r4, #0]
 80064b4:	f015 0506 	ands.w	r5, r5, #6
 80064b8:	d106      	bne.n	80064c8 <_printf_common+0x48>
 80064ba:	f104 0a19 	add.w	sl, r4, #25
 80064be:	68e3      	ldr	r3, [r4, #12]
 80064c0:	6832      	ldr	r2, [r6, #0]
 80064c2:	1a9b      	subs	r3, r3, r2
 80064c4:	42ab      	cmp	r3, r5
 80064c6:	dc26      	bgt.n	8006516 <_printf_common+0x96>
 80064c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80064cc:	1e13      	subs	r3, r2, #0
 80064ce:	6822      	ldr	r2, [r4, #0]
 80064d0:	bf18      	it	ne
 80064d2:	2301      	movne	r3, #1
 80064d4:	0692      	lsls	r2, r2, #26
 80064d6:	d42b      	bmi.n	8006530 <_printf_common+0xb0>
 80064d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80064dc:	4649      	mov	r1, r9
 80064de:	4638      	mov	r0, r7
 80064e0:	47c0      	blx	r8
 80064e2:	3001      	adds	r0, #1
 80064e4:	d01e      	beq.n	8006524 <_printf_common+0xa4>
 80064e6:	6823      	ldr	r3, [r4, #0]
 80064e8:	68e5      	ldr	r5, [r4, #12]
 80064ea:	6832      	ldr	r2, [r6, #0]
 80064ec:	f003 0306 	and.w	r3, r3, #6
 80064f0:	2b04      	cmp	r3, #4
 80064f2:	bf08      	it	eq
 80064f4:	1aad      	subeq	r5, r5, r2
 80064f6:	68a3      	ldr	r3, [r4, #8]
 80064f8:	6922      	ldr	r2, [r4, #16]
 80064fa:	bf0c      	ite	eq
 80064fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006500:	2500      	movne	r5, #0
 8006502:	4293      	cmp	r3, r2
 8006504:	bfc4      	itt	gt
 8006506:	1a9b      	subgt	r3, r3, r2
 8006508:	18ed      	addgt	r5, r5, r3
 800650a:	2600      	movs	r6, #0
 800650c:	341a      	adds	r4, #26
 800650e:	42b5      	cmp	r5, r6
 8006510:	d11a      	bne.n	8006548 <_printf_common+0xc8>
 8006512:	2000      	movs	r0, #0
 8006514:	e008      	b.n	8006528 <_printf_common+0xa8>
 8006516:	2301      	movs	r3, #1
 8006518:	4652      	mov	r2, sl
 800651a:	4649      	mov	r1, r9
 800651c:	4638      	mov	r0, r7
 800651e:	47c0      	blx	r8
 8006520:	3001      	adds	r0, #1
 8006522:	d103      	bne.n	800652c <_printf_common+0xac>
 8006524:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800652c:	3501      	adds	r5, #1
 800652e:	e7c6      	b.n	80064be <_printf_common+0x3e>
 8006530:	18e1      	adds	r1, r4, r3
 8006532:	1c5a      	adds	r2, r3, #1
 8006534:	2030      	movs	r0, #48	; 0x30
 8006536:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800653a:	4422      	add	r2, r4
 800653c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006540:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006544:	3302      	adds	r3, #2
 8006546:	e7c7      	b.n	80064d8 <_printf_common+0x58>
 8006548:	2301      	movs	r3, #1
 800654a:	4622      	mov	r2, r4
 800654c:	4649      	mov	r1, r9
 800654e:	4638      	mov	r0, r7
 8006550:	47c0      	blx	r8
 8006552:	3001      	adds	r0, #1
 8006554:	d0e6      	beq.n	8006524 <_printf_common+0xa4>
 8006556:	3601      	adds	r6, #1
 8006558:	e7d9      	b.n	800650e <_printf_common+0x8e>
	...

0800655c <_printf_i>:
 800655c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006560:	460c      	mov	r4, r1
 8006562:	4691      	mov	r9, r2
 8006564:	7e27      	ldrb	r7, [r4, #24]
 8006566:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006568:	2f78      	cmp	r7, #120	; 0x78
 800656a:	4680      	mov	r8, r0
 800656c:	469a      	mov	sl, r3
 800656e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006572:	d807      	bhi.n	8006584 <_printf_i+0x28>
 8006574:	2f62      	cmp	r7, #98	; 0x62
 8006576:	d80a      	bhi.n	800658e <_printf_i+0x32>
 8006578:	2f00      	cmp	r7, #0
 800657a:	f000 80d8 	beq.w	800672e <_printf_i+0x1d2>
 800657e:	2f58      	cmp	r7, #88	; 0x58
 8006580:	f000 80a3 	beq.w	80066ca <_printf_i+0x16e>
 8006584:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006588:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800658c:	e03a      	b.n	8006604 <_printf_i+0xa8>
 800658e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006592:	2b15      	cmp	r3, #21
 8006594:	d8f6      	bhi.n	8006584 <_printf_i+0x28>
 8006596:	a001      	add	r0, pc, #4	; (adr r0, 800659c <_printf_i+0x40>)
 8006598:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800659c:	080065f5 	.word	0x080065f5
 80065a0:	08006609 	.word	0x08006609
 80065a4:	08006585 	.word	0x08006585
 80065a8:	08006585 	.word	0x08006585
 80065ac:	08006585 	.word	0x08006585
 80065b0:	08006585 	.word	0x08006585
 80065b4:	08006609 	.word	0x08006609
 80065b8:	08006585 	.word	0x08006585
 80065bc:	08006585 	.word	0x08006585
 80065c0:	08006585 	.word	0x08006585
 80065c4:	08006585 	.word	0x08006585
 80065c8:	08006715 	.word	0x08006715
 80065cc:	08006639 	.word	0x08006639
 80065d0:	080066f7 	.word	0x080066f7
 80065d4:	08006585 	.word	0x08006585
 80065d8:	08006585 	.word	0x08006585
 80065dc:	08006737 	.word	0x08006737
 80065e0:	08006585 	.word	0x08006585
 80065e4:	08006639 	.word	0x08006639
 80065e8:	08006585 	.word	0x08006585
 80065ec:	08006585 	.word	0x08006585
 80065f0:	080066ff 	.word	0x080066ff
 80065f4:	680b      	ldr	r3, [r1, #0]
 80065f6:	1d1a      	adds	r2, r3, #4
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	600a      	str	r2, [r1, #0]
 80065fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006600:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006604:	2301      	movs	r3, #1
 8006606:	e0a3      	b.n	8006750 <_printf_i+0x1f4>
 8006608:	6825      	ldr	r5, [r4, #0]
 800660a:	6808      	ldr	r0, [r1, #0]
 800660c:	062e      	lsls	r6, r5, #24
 800660e:	f100 0304 	add.w	r3, r0, #4
 8006612:	d50a      	bpl.n	800662a <_printf_i+0xce>
 8006614:	6805      	ldr	r5, [r0, #0]
 8006616:	600b      	str	r3, [r1, #0]
 8006618:	2d00      	cmp	r5, #0
 800661a:	da03      	bge.n	8006624 <_printf_i+0xc8>
 800661c:	232d      	movs	r3, #45	; 0x2d
 800661e:	426d      	negs	r5, r5
 8006620:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006624:	485e      	ldr	r0, [pc, #376]	; (80067a0 <_printf_i+0x244>)
 8006626:	230a      	movs	r3, #10
 8006628:	e019      	b.n	800665e <_printf_i+0x102>
 800662a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800662e:	6805      	ldr	r5, [r0, #0]
 8006630:	600b      	str	r3, [r1, #0]
 8006632:	bf18      	it	ne
 8006634:	b22d      	sxthne	r5, r5
 8006636:	e7ef      	b.n	8006618 <_printf_i+0xbc>
 8006638:	680b      	ldr	r3, [r1, #0]
 800663a:	6825      	ldr	r5, [r4, #0]
 800663c:	1d18      	adds	r0, r3, #4
 800663e:	6008      	str	r0, [r1, #0]
 8006640:	0628      	lsls	r0, r5, #24
 8006642:	d501      	bpl.n	8006648 <_printf_i+0xec>
 8006644:	681d      	ldr	r5, [r3, #0]
 8006646:	e002      	b.n	800664e <_printf_i+0xf2>
 8006648:	0669      	lsls	r1, r5, #25
 800664a:	d5fb      	bpl.n	8006644 <_printf_i+0xe8>
 800664c:	881d      	ldrh	r5, [r3, #0]
 800664e:	4854      	ldr	r0, [pc, #336]	; (80067a0 <_printf_i+0x244>)
 8006650:	2f6f      	cmp	r7, #111	; 0x6f
 8006652:	bf0c      	ite	eq
 8006654:	2308      	moveq	r3, #8
 8006656:	230a      	movne	r3, #10
 8006658:	2100      	movs	r1, #0
 800665a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800665e:	6866      	ldr	r6, [r4, #4]
 8006660:	60a6      	str	r6, [r4, #8]
 8006662:	2e00      	cmp	r6, #0
 8006664:	bfa2      	ittt	ge
 8006666:	6821      	ldrge	r1, [r4, #0]
 8006668:	f021 0104 	bicge.w	r1, r1, #4
 800666c:	6021      	strge	r1, [r4, #0]
 800666e:	b90d      	cbnz	r5, 8006674 <_printf_i+0x118>
 8006670:	2e00      	cmp	r6, #0
 8006672:	d04d      	beq.n	8006710 <_printf_i+0x1b4>
 8006674:	4616      	mov	r6, r2
 8006676:	fbb5 f1f3 	udiv	r1, r5, r3
 800667a:	fb03 5711 	mls	r7, r3, r1, r5
 800667e:	5dc7      	ldrb	r7, [r0, r7]
 8006680:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006684:	462f      	mov	r7, r5
 8006686:	42bb      	cmp	r3, r7
 8006688:	460d      	mov	r5, r1
 800668a:	d9f4      	bls.n	8006676 <_printf_i+0x11a>
 800668c:	2b08      	cmp	r3, #8
 800668e:	d10b      	bne.n	80066a8 <_printf_i+0x14c>
 8006690:	6823      	ldr	r3, [r4, #0]
 8006692:	07df      	lsls	r7, r3, #31
 8006694:	d508      	bpl.n	80066a8 <_printf_i+0x14c>
 8006696:	6923      	ldr	r3, [r4, #16]
 8006698:	6861      	ldr	r1, [r4, #4]
 800669a:	4299      	cmp	r1, r3
 800669c:	bfde      	ittt	le
 800669e:	2330      	movle	r3, #48	; 0x30
 80066a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80066a4:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80066a8:	1b92      	subs	r2, r2, r6
 80066aa:	6122      	str	r2, [r4, #16]
 80066ac:	f8cd a000 	str.w	sl, [sp]
 80066b0:	464b      	mov	r3, r9
 80066b2:	aa03      	add	r2, sp, #12
 80066b4:	4621      	mov	r1, r4
 80066b6:	4640      	mov	r0, r8
 80066b8:	f7ff fee2 	bl	8006480 <_printf_common>
 80066bc:	3001      	adds	r0, #1
 80066be:	d14c      	bne.n	800675a <_printf_i+0x1fe>
 80066c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066c4:	b004      	add	sp, #16
 80066c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066ca:	4835      	ldr	r0, [pc, #212]	; (80067a0 <_printf_i+0x244>)
 80066cc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80066d0:	6823      	ldr	r3, [r4, #0]
 80066d2:	680e      	ldr	r6, [r1, #0]
 80066d4:	061f      	lsls	r7, r3, #24
 80066d6:	f856 5b04 	ldr.w	r5, [r6], #4
 80066da:	600e      	str	r6, [r1, #0]
 80066dc:	d514      	bpl.n	8006708 <_printf_i+0x1ac>
 80066de:	07d9      	lsls	r1, r3, #31
 80066e0:	bf44      	itt	mi
 80066e2:	f043 0320 	orrmi.w	r3, r3, #32
 80066e6:	6023      	strmi	r3, [r4, #0]
 80066e8:	b91d      	cbnz	r5, 80066f2 <_printf_i+0x196>
 80066ea:	6823      	ldr	r3, [r4, #0]
 80066ec:	f023 0320 	bic.w	r3, r3, #32
 80066f0:	6023      	str	r3, [r4, #0]
 80066f2:	2310      	movs	r3, #16
 80066f4:	e7b0      	b.n	8006658 <_printf_i+0xfc>
 80066f6:	6823      	ldr	r3, [r4, #0]
 80066f8:	f043 0320 	orr.w	r3, r3, #32
 80066fc:	6023      	str	r3, [r4, #0]
 80066fe:	2378      	movs	r3, #120	; 0x78
 8006700:	4828      	ldr	r0, [pc, #160]	; (80067a4 <_printf_i+0x248>)
 8006702:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006706:	e7e3      	b.n	80066d0 <_printf_i+0x174>
 8006708:	065e      	lsls	r6, r3, #25
 800670a:	bf48      	it	mi
 800670c:	b2ad      	uxthmi	r5, r5
 800670e:	e7e6      	b.n	80066de <_printf_i+0x182>
 8006710:	4616      	mov	r6, r2
 8006712:	e7bb      	b.n	800668c <_printf_i+0x130>
 8006714:	680b      	ldr	r3, [r1, #0]
 8006716:	6826      	ldr	r6, [r4, #0]
 8006718:	6960      	ldr	r0, [r4, #20]
 800671a:	1d1d      	adds	r5, r3, #4
 800671c:	600d      	str	r5, [r1, #0]
 800671e:	0635      	lsls	r5, r6, #24
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	d501      	bpl.n	8006728 <_printf_i+0x1cc>
 8006724:	6018      	str	r0, [r3, #0]
 8006726:	e002      	b.n	800672e <_printf_i+0x1d2>
 8006728:	0671      	lsls	r1, r6, #25
 800672a:	d5fb      	bpl.n	8006724 <_printf_i+0x1c8>
 800672c:	8018      	strh	r0, [r3, #0]
 800672e:	2300      	movs	r3, #0
 8006730:	6123      	str	r3, [r4, #16]
 8006732:	4616      	mov	r6, r2
 8006734:	e7ba      	b.n	80066ac <_printf_i+0x150>
 8006736:	680b      	ldr	r3, [r1, #0]
 8006738:	1d1a      	adds	r2, r3, #4
 800673a:	600a      	str	r2, [r1, #0]
 800673c:	681e      	ldr	r6, [r3, #0]
 800673e:	6862      	ldr	r2, [r4, #4]
 8006740:	2100      	movs	r1, #0
 8006742:	4630      	mov	r0, r6
 8006744:	f7f9 fd54 	bl	80001f0 <memchr>
 8006748:	b108      	cbz	r0, 800674e <_printf_i+0x1f2>
 800674a:	1b80      	subs	r0, r0, r6
 800674c:	6060      	str	r0, [r4, #4]
 800674e:	6863      	ldr	r3, [r4, #4]
 8006750:	6123      	str	r3, [r4, #16]
 8006752:	2300      	movs	r3, #0
 8006754:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006758:	e7a8      	b.n	80066ac <_printf_i+0x150>
 800675a:	6923      	ldr	r3, [r4, #16]
 800675c:	4632      	mov	r2, r6
 800675e:	4649      	mov	r1, r9
 8006760:	4640      	mov	r0, r8
 8006762:	47d0      	blx	sl
 8006764:	3001      	adds	r0, #1
 8006766:	d0ab      	beq.n	80066c0 <_printf_i+0x164>
 8006768:	6823      	ldr	r3, [r4, #0]
 800676a:	079b      	lsls	r3, r3, #30
 800676c:	d413      	bmi.n	8006796 <_printf_i+0x23a>
 800676e:	68e0      	ldr	r0, [r4, #12]
 8006770:	9b03      	ldr	r3, [sp, #12]
 8006772:	4298      	cmp	r0, r3
 8006774:	bfb8      	it	lt
 8006776:	4618      	movlt	r0, r3
 8006778:	e7a4      	b.n	80066c4 <_printf_i+0x168>
 800677a:	2301      	movs	r3, #1
 800677c:	4632      	mov	r2, r6
 800677e:	4649      	mov	r1, r9
 8006780:	4640      	mov	r0, r8
 8006782:	47d0      	blx	sl
 8006784:	3001      	adds	r0, #1
 8006786:	d09b      	beq.n	80066c0 <_printf_i+0x164>
 8006788:	3501      	adds	r5, #1
 800678a:	68e3      	ldr	r3, [r4, #12]
 800678c:	9903      	ldr	r1, [sp, #12]
 800678e:	1a5b      	subs	r3, r3, r1
 8006790:	42ab      	cmp	r3, r5
 8006792:	dcf2      	bgt.n	800677a <_printf_i+0x21e>
 8006794:	e7eb      	b.n	800676e <_printf_i+0x212>
 8006796:	2500      	movs	r5, #0
 8006798:	f104 0619 	add.w	r6, r4, #25
 800679c:	e7f5      	b.n	800678a <_printf_i+0x22e>
 800679e:	bf00      	nop
 80067a0:	08008a09 	.word	0x08008a09
 80067a4:	08008a1a 	.word	0x08008a1a

080067a8 <memcpy>:
 80067a8:	440a      	add	r2, r1
 80067aa:	4291      	cmp	r1, r2
 80067ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80067b0:	d100      	bne.n	80067b4 <memcpy+0xc>
 80067b2:	4770      	bx	lr
 80067b4:	b510      	push	{r4, lr}
 80067b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067be:	4291      	cmp	r1, r2
 80067c0:	d1f9      	bne.n	80067b6 <memcpy+0xe>
 80067c2:	bd10      	pop	{r4, pc}

080067c4 <memmove>:
 80067c4:	4288      	cmp	r0, r1
 80067c6:	b510      	push	{r4, lr}
 80067c8:	eb01 0402 	add.w	r4, r1, r2
 80067cc:	d902      	bls.n	80067d4 <memmove+0x10>
 80067ce:	4284      	cmp	r4, r0
 80067d0:	4623      	mov	r3, r4
 80067d2:	d807      	bhi.n	80067e4 <memmove+0x20>
 80067d4:	1e43      	subs	r3, r0, #1
 80067d6:	42a1      	cmp	r1, r4
 80067d8:	d008      	beq.n	80067ec <memmove+0x28>
 80067da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80067de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80067e2:	e7f8      	b.n	80067d6 <memmove+0x12>
 80067e4:	4402      	add	r2, r0
 80067e6:	4601      	mov	r1, r0
 80067e8:	428a      	cmp	r2, r1
 80067ea:	d100      	bne.n	80067ee <memmove+0x2a>
 80067ec:	bd10      	pop	{r4, pc}
 80067ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80067f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80067f6:	e7f7      	b.n	80067e8 <memmove+0x24>

080067f8 <_free_r>:
 80067f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80067fa:	2900      	cmp	r1, #0
 80067fc:	d048      	beq.n	8006890 <_free_r+0x98>
 80067fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006802:	9001      	str	r0, [sp, #4]
 8006804:	2b00      	cmp	r3, #0
 8006806:	f1a1 0404 	sub.w	r4, r1, #4
 800680a:	bfb8      	it	lt
 800680c:	18e4      	addlt	r4, r4, r3
 800680e:	f000 f8d3 	bl	80069b8 <__malloc_lock>
 8006812:	4a20      	ldr	r2, [pc, #128]	; (8006894 <_free_r+0x9c>)
 8006814:	9801      	ldr	r0, [sp, #4]
 8006816:	6813      	ldr	r3, [r2, #0]
 8006818:	4615      	mov	r5, r2
 800681a:	b933      	cbnz	r3, 800682a <_free_r+0x32>
 800681c:	6063      	str	r3, [r4, #4]
 800681e:	6014      	str	r4, [r2, #0]
 8006820:	b003      	add	sp, #12
 8006822:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006826:	f000 b8cd 	b.w	80069c4 <__malloc_unlock>
 800682a:	42a3      	cmp	r3, r4
 800682c:	d90b      	bls.n	8006846 <_free_r+0x4e>
 800682e:	6821      	ldr	r1, [r4, #0]
 8006830:	1862      	adds	r2, r4, r1
 8006832:	4293      	cmp	r3, r2
 8006834:	bf04      	itt	eq
 8006836:	681a      	ldreq	r2, [r3, #0]
 8006838:	685b      	ldreq	r3, [r3, #4]
 800683a:	6063      	str	r3, [r4, #4]
 800683c:	bf04      	itt	eq
 800683e:	1852      	addeq	r2, r2, r1
 8006840:	6022      	streq	r2, [r4, #0]
 8006842:	602c      	str	r4, [r5, #0]
 8006844:	e7ec      	b.n	8006820 <_free_r+0x28>
 8006846:	461a      	mov	r2, r3
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	b10b      	cbz	r3, 8006850 <_free_r+0x58>
 800684c:	42a3      	cmp	r3, r4
 800684e:	d9fa      	bls.n	8006846 <_free_r+0x4e>
 8006850:	6811      	ldr	r1, [r2, #0]
 8006852:	1855      	adds	r5, r2, r1
 8006854:	42a5      	cmp	r5, r4
 8006856:	d10b      	bne.n	8006870 <_free_r+0x78>
 8006858:	6824      	ldr	r4, [r4, #0]
 800685a:	4421      	add	r1, r4
 800685c:	1854      	adds	r4, r2, r1
 800685e:	42a3      	cmp	r3, r4
 8006860:	6011      	str	r1, [r2, #0]
 8006862:	d1dd      	bne.n	8006820 <_free_r+0x28>
 8006864:	681c      	ldr	r4, [r3, #0]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	6053      	str	r3, [r2, #4]
 800686a:	4421      	add	r1, r4
 800686c:	6011      	str	r1, [r2, #0]
 800686e:	e7d7      	b.n	8006820 <_free_r+0x28>
 8006870:	d902      	bls.n	8006878 <_free_r+0x80>
 8006872:	230c      	movs	r3, #12
 8006874:	6003      	str	r3, [r0, #0]
 8006876:	e7d3      	b.n	8006820 <_free_r+0x28>
 8006878:	6825      	ldr	r5, [r4, #0]
 800687a:	1961      	adds	r1, r4, r5
 800687c:	428b      	cmp	r3, r1
 800687e:	bf04      	itt	eq
 8006880:	6819      	ldreq	r1, [r3, #0]
 8006882:	685b      	ldreq	r3, [r3, #4]
 8006884:	6063      	str	r3, [r4, #4]
 8006886:	bf04      	itt	eq
 8006888:	1949      	addeq	r1, r1, r5
 800688a:	6021      	streq	r1, [r4, #0]
 800688c:	6054      	str	r4, [r2, #4]
 800688e:	e7c7      	b.n	8006820 <_free_r+0x28>
 8006890:	b003      	add	sp, #12
 8006892:	bd30      	pop	{r4, r5, pc}
 8006894:	200000b4 	.word	0x200000b4

08006898 <_malloc_r>:
 8006898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800689a:	1ccd      	adds	r5, r1, #3
 800689c:	f025 0503 	bic.w	r5, r5, #3
 80068a0:	3508      	adds	r5, #8
 80068a2:	2d0c      	cmp	r5, #12
 80068a4:	bf38      	it	cc
 80068a6:	250c      	movcc	r5, #12
 80068a8:	2d00      	cmp	r5, #0
 80068aa:	4606      	mov	r6, r0
 80068ac:	db01      	blt.n	80068b2 <_malloc_r+0x1a>
 80068ae:	42a9      	cmp	r1, r5
 80068b0:	d903      	bls.n	80068ba <_malloc_r+0x22>
 80068b2:	230c      	movs	r3, #12
 80068b4:	6033      	str	r3, [r6, #0]
 80068b6:	2000      	movs	r0, #0
 80068b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068ba:	f000 f87d 	bl	80069b8 <__malloc_lock>
 80068be:	4921      	ldr	r1, [pc, #132]	; (8006944 <_malloc_r+0xac>)
 80068c0:	680a      	ldr	r2, [r1, #0]
 80068c2:	4614      	mov	r4, r2
 80068c4:	b99c      	cbnz	r4, 80068ee <_malloc_r+0x56>
 80068c6:	4f20      	ldr	r7, [pc, #128]	; (8006948 <_malloc_r+0xb0>)
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	b923      	cbnz	r3, 80068d6 <_malloc_r+0x3e>
 80068cc:	4621      	mov	r1, r4
 80068ce:	4630      	mov	r0, r6
 80068d0:	f000 f862 	bl	8006998 <_sbrk_r>
 80068d4:	6038      	str	r0, [r7, #0]
 80068d6:	4629      	mov	r1, r5
 80068d8:	4630      	mov	r0, r6
 80068da:	f000 f85d 	bl	8006998 <_sbrk_r>
 80068de:	1c43      	adds	r3, r0, #1
 80068e0:	d123      	bne.n	800692a <_malloc_r+0x92>
 80068e2:	230c      	movs	r3, #12
 80068e4:	6033      	str	r3, [r6, #0]
 80068e6:	4630      	mov	r0, r6
 80068e8:	f000 f86c 	bl	80069c4 <__malloc_unlock>
 80068ec:	e7e3      	b.n	80068b6 <_malloc_r+0x1e>
 80068ee:	6823      	ldr	r3, [r4, #0]
 80068f0:	1b5b      	subs	r3, r3, r5
 80068f2:	d417      	bmi.n	8006924 <_malloc_r+0x8c>
 80068f4:	2b0b      	cmp	r3, #11
 80068f6:	d903      	bls.n	8006900 <_malloc_r+0x68>
 80068f8:	6023      	str	r3, [r4, #0]
 80068fa:	441c      	add	r4, r3
 80068fc:	6025      	str	r5, [r4, #0]
 80068fe:	e004      	b.n	800690a <_malloc_r+0x72>
 8006900:	6863      	ldr	r3, [r4, #4]
 8006902:	42a2      	cmp	r2, r4
 8006904:	bf0c      	ite	eq
 8006906:	600b      	streq	r3, [r1, #0]
 8006908:	6053      	strne	r3, [r2, #4]
 800690a:	4630      	mov	r0, r6
 800690c:	f000 f85a 	bl	80069c4 <__malloc_unlock>
 8006910:	f104 000b 	add.w	r0, r4, #11
 8006914:	1d23      	adds	r3, r4, #4
 8006916:	f020 0007 	bic.w	r0, r0, #7
 800691a:	1ac2      	subs	r2, r0, r3
 800691c:	d0cc      	beq.n	80068b8 <_malloc_r+0x20>
 800691e:	1a1b      	subs	r3, r3, r0
 8006920:	50a3      	str	r3, [r4, r2]
 8006922:	e7c9      	b.n	80068b8 <_malloc_r+0x20>
 8006924:	4622      	mov	r2, r4
 8006926:	6864      	ldr	r4, [r4, #4]
 8006928:	e7cc      	b.n	80068c4 <_malloc_r+0x2c>
 800692a:	1cc4      	adds	r4, r0, #3
 800692c:	f024 0403 	bic.w	r4, r4, #3
 8006930:	42a0      	cmp	r0, r4
 8006932:	d0e3      	beq.n	80068fc <_malloc_r+0x64>
 8006934:	1a21      	subs	r1, r4, r0
 8006936:	4630      	mov	r0, r6
 8006938:	f000 f82e 	bl	8006998 <_sbrk_r>
 800693c:	3001      	adds	r0, #1
 800693e:	d1dd      	bne.n	80068fc <_malloc_r+0x64>
 8006940:	e7cf      	b.n	80068e2 <_malloc_r+0x4a>
 8006942:	bf00      	nop
 8006944:	200000b4 	.word	0x200000b4
 8006948:	200000b8 	.word	0x200000b8

0800694c <_realloc_r>:
 800694c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800694e:	4607      	mov	r7, r0
 8006950:	4614      	mov	r4, r2
 8006952:	460e      	mov	r6, r1
 8006954:	b921      	cbnz	r1, 8006960 <_realloc_r+0x14>
 8006956:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800695a:	4611      	mov	r1, r2
 800695c:	f7ff bf9c 	b.w	8006898 <_malloc_r>
 8006960:	b922      	cbnz	r2, 800696c <_realloc_r+0x20>
 8006962:	f7ff ff49 	bl	80067f8 <_free_r>
 8006966:	4625      	mov	r5, r4
 8006968:	4628      	mov	r0, r5
 800696a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800696c:	f000 f830 	bl	80069d0 <_malloc_usable_size_r>
 8006970:	42a0      	cmp	r0, r4
 8006972:	d20f      	bcs.n	8006994 <_realloc_r+0x48>
 8006974:	4621      	mov	r1, r4
 8006976:	4638      	mov	r0, r7
 8006978:	f7ff ff8e 	bl	8006898 <_malloc_r>
 800697c:	4605      	mov	r5, r0
 800697e:	2800      	cmp	r0, #0
 8006980:	d0f2      	beq.n	8006968 <_realloc_r+0x1c>
 8006982:	4631      	mov	r1, r6
 8006984:	4622      	mov	r2, r4
 8006986:	f7ff ff0f 	bl	80067a8 <memcpy>
 800698a:	4631      	mov	r1, r6
 800698c:	4638      	mov	r0, r7
 800698e:	f7ff ff33 	bl	80067f8 <_free_r>
 8006992:	e7e9      	b.n	8006968 <_realloc_r+0x1c>
 8006994:	4635      	mov	r5, r6
 8006996:	e7e7      	b.n	8006968 <_realloc_r+0x1c>

08006998 <_sbrk_r>:
 8006998:	b538      	push	{r3, r4, r5, lr}
 800699a:	4d06      	ldr	r5, [pc, #24]	; (80069b4 <_sbrk_r+0x1c>)
 800699c:	2300      	movs	r3, #0
 800699e:	4604      	mov	r4, r0
 80069a0:	4608      	mov	r0, r1
 80069a2:	602b      	str	r3, [r5, #0]
 80069a4:	f7fc f8d8 	bl	8002b58 <_sbrk>
 80069a8:	1c43      	adds	r3, r0, #1
 80069aa:	d102      	bne.n	80069b2 <_sbrk_r+0x1a>
 80069ac:	682b      	ldr	r3, [r5, #0]
 80069ae:	b103      	cbz	r3, 80069b2 <_sbrk_r+0x1a>
 80069b0:	6023      	str	r3, [r4, #0]
 80069b2:	bd38      	pop	{r3, r4, r5, pc}
 80069b4:	20000314 	.word	0x20000314

080069b8 <__malloc_lock>:
 80069b8:	4801      	ldr	r0, [pc, #4]	; (80069c0 <__malloc_lock+0x8>)
 80069ba:	f000 b811 	b.w	80069e0 <__retarget_lock_acquire_recursive>
 80069be:	bf00      	nop
 80069c0:	2000031c 	.word	0x2000031c

080069c4 <__malloc_unlock>:
 80069c4:	4801      	ldr	r0, [pc, #4]	; (80069cc <__malloc_unlock+0x8>)
 80069c6:	f000 b80c 	b.w	80069e2 <__retarget_lock_release_recursive>
 80069ca:	bf00      	nop
 80069cc:	2000031c 	.word	0x2000031c

080069d0 <_malloc_usable_size_r>:
 80069d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069d4:	1f18      	subs	r0, r3, #4
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	bfbc      	itt	lt
 80069da:	580b      	ldrlt	r3, [r1, r0]
 80069dc:	18c0      	addlt	r0, r0, r3
 80069de:	4770      	bx	lr

080069e0 <__retarget_lock_acquire_recursive>:
 80069e0:	4770      	bx	lr

080069e2 <__retarget_lock_release_recursive>:
 80069e2:	4770      	bx	lr
 80069e4:	0000      	movs	r0, r0
	...

080069e8 <cos>:
 80069e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80069ea:	ec53 2b10 	vmov	r2, r3, d0
 80069ee:	4824      	ldr	r0, [pc, #144]	; (8006a80 <cos+0x98>)
 80069f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80069f4:	4281      	cmp	r1, r0
 80069f6:	dc06      	bgt.n	8006a06 <cos+0x1e>
 80069f8:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8006a78 <cos+0x90>
 80069fc:	f001 f960 	bl	8007cc0 <__kernel_cos>
 8006a00:	ec51 0b10 	vmov	r0, r1, d0
 8006a04:	e007      	b.n	8006a16 <cos+0x2e>
 8006a06:	481f      	ldr	r0, [pc, #124]	; (8006a84 <cos+0x9c>)
 8006a08:	4281      	cmp	r1, r0
 8006a0a:	dd09      	ble.n	8006a20 <cos+0x38>
 8006a0c:	ee10 0a10 	vmov	r0, s0
 8006a10:	4619      	mov	r1, r3
 8006a12:	f7f9 fc41 	bl	8000298 <__aeabi_dsub>
 8006a16:	ec41 0b10 	vmov	d0, r0, r1
 8006a1a:	b005      	add	sp, #20
 8006a1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006a20:	4668      	mov	r0, sp
 8006a22:	f000 fe8d 	bl	8007740 <__ieee754_rem_pio2>
 8006a26:	f000 0003 	and.w	r0, r0, #3
 8006a2a:	2801      	cmp	r0, #1
 8006a2c:	d007      	beq.n	8006a3e <cos+0x56>
 8006a2e:	2802      	cmp	r0, #2
 8006a30:	d012      	beq.n	8006a58 <cos+0x70>
 8006a32:	b9c0      	cbnz	r0, 8006a66 <cos+0x7e>
 8006a34:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006a38:	ed9d 0b00 	vldr	d0, [sp]
 8006a3c:	e7de      	b.n	80069fc <cos+0x14>
 8006a3e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006a42:	ed9d 0b00 	vldr	d0, [sp]
 8006a46:	f001 fd43 	bl	80084d0 <__kernel_sin>
 8006a4a:	ec53 2b10 	vmov	r2, r3, d0
 8006a4e:	ee10 0a10 	vmov	r0, s0
 8006a52:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006a56:	e7de      	b.n	8006a16 <cos+0x2e>
 8006a58:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006a5c:	ed9d 0b00 	vldr	d0, [sp]
 8006a60:	f001 f92e 	bl	8007cc0 <__kernel_cos>
 8006a64:	e7f1      	b.n	8006a4a <cos+0x62>
 8006a66:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006a6a:	ed9d 0b00 	vldr	d0, [sp]
 8006a6e:	2001      	movs	r0, #1
 8006a70:	f001 fd2e 	bl	80084d0 <__kernel_sin>
 8006a74:	e7c4      	b.n	8006a00 <cos+0x18>
 8006a76:	bf00      	nop
	...
 8006a80:	3fe921fb 	.word	0x3fe921fb
 8006a84:	7fefffff 	.word	0x7fefffff

08006a88 <sin>:
 8006a88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006a8a:	ec53 2b10 	vmov	r2, r3, d0
 8006a8e:	4826      	ldr	r0, [pc, #152]	; (8006b28 <sin+0xa0>)
 8006a90:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006a94:	4281      	cmp	r1, r0
 8006a96:	dc07      	bgt.n	8006aa8 <sin+0x20>
 8006a98:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8006b20 <sin+0x98>
 8006a9c:	2000      	movs	r0, #0
 8006a9e:	f001 fd17 	bl	80084d0 <__kernel_sin>
 8006aa2:	ec51 0b10 	vmov	r0, r1, d0
 8006aa6:	e007      	b.n	8006ab8 <sin+0x30>
 8006aa8:	4820      	ldr	r0, [pc, #128]	; (8006b2c <sin+0xa4>)
 8006aaa:	4281      	cmp	r1, r0
 8006aac:	dd09      	ble.n	8006ac2 <sin+0x3a>
 8006aae:	ee10 0a10 	vmov	r0, s0
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	f7f9 fbf0 	bl	8000298 <__aeabi_dsub>
 8006ab8:	ec41 0b10 	vmov	d0, r0, r1
 8006abc:	b005      	add	sp, #20
 8006abe:	f85d fb04 	ldr.w	pc, [sp], #4
 8006ac2:	4668      	mov	r0, sp
 8006ac4:	f000 fe3c 	bl	8007740 <__ieee754_rem_pio2>
 8006ac8:	f000 0003 	and.w	r0, r0, #3
 8006acc:	2801      	cmp	r0, #1
 8006ace:	d008      	beq.n	8006ae2 <sin+0x5a>
 8006ad0:	2802      	cmp	r0, #2
 8006ad2:	d00d      	beq.n	8006af0 <sin+0x68>
 8006ad4:	b9d0      	cbnz	r0, 8006b0c <sin+0x84>
 8006ad6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006ada:	ed9d 0b00 	vldr	d0, [sp]
 8006ade:	2001      	movs	r0, #1
 8006ae0:	e7dd      	b.n	8006a9e <sin+0x16>
 8006ae2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006ae6:	ed9d 0b00 	vldr	d0, [sp]
 8006aea:	f001 f8e9 	bl	8007cc0 <__kernel_cos>
 8006aee:	e7d8      	b.n	8006aa2 <sin+0x1a>
 8006af0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006af4:	ed9d 0b00 	vldr	d0, [sp]
 8006af8:	2001      	movs	r0, #1
 8006afa:	f001 fce9 	bl	80084d0 <__kernel_sin>
 8006afe:	ec53 2b10 	vmov	r2, r3, d0
 8006b02:	ee10 0a10 	vmov	r0, s0
 8006b06:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006b0a:	e7d5      	b.n	8006ab8 <sin+0x30>
 8006b0c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006b10:	ed9d 0b00 	vldr	d0, [sp]
 8006b14:	f001 f8d4 	bl	8007cc0 <__kernel_cos>
 8006b18:	e7f1      	b.n	8006afe <sin+0x76>
 8006b1a:	bf00      	nop
 8006b1c:	f3af 8000 	nop.w
	...
 8006b28:	3fe921fb 	.word	0x3fe921fb
 8006b2c:	7fefffff 	.word	0x7fefffff

08006b30 <pow>:
 8006b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b34:	ec59 8b10 	vmov	r8, r9, d0
 8006b38:	ec57 6b11 	vmov	r6, r7, d1
 8006b3c:	f000 f8dc 	bl	8006cf8 <__ieee754_pow>
 8006b40:	4b4e      	ldr	r3, [pc, #312]	; (8006c7c <pow+0x14c>)
 8006b42:	f993 3000 	ldrsb.w	r3, [r3]
 8006b46:	3301      	adds	r3, #1
 8006b48:	ec55 4b10 	vmov	r4, r5, d0
 8006b4c:	d015      	beq.n	8006b7a <pow+0x4a>
 8006b4e:	4632      	mov	r2, r6
 8006b50:	463b      	mov	r3, r7
 8006b52:	4630      	mov	r0, r6
 8006b54:	4639      	mov	r1, r7
 8006b56:	f7f9 fff1 	bl	8000b3c <__aeabi_dcmpun>
 8006b5a:	b970      	cbnz	r0, 8006b7a <pow+0x4a>
 8006b5c:	4642      	mov	r2, r8
 8006b5e:	464b      	mov	r3, r9
 8006b60:	4640      	mov	r0, r8
 8006b62:	4649      	mov	r1, r9
 8006b64:	f7f9 ffea 	bl	8000b3c <__aeabi_dcmpun>
 8006b68:	2200      	movs	r2, #0
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	b148      	cbz	r0, 8006b82 <pow+0x52>
 8006b6e:	4630      	mov	r0, r6
 8006b70:	4639      	mov	r1, r7
 8006b72:	f7f9 ffb1 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b76:	2800      	cmp	r0, #0
 8006b78:	d17d      	bne.n	8006c76 <pow+0x146>
 8006b7a:	ec45 4b10 	vmov	d0, r4, r5
 8006b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b82:	4640      	mov	r0, r8
 8006b84:	4649      	mov	r1, r9
 8006b86:	f7f9 ffa7 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b8a:	b1e0      	cbz	r0, 8006bc6 <pow+0x96>
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	2300      	movs	r3, #0
 8006b90:	4630      	mov	r0, r6
 8006b92:	4639      	mov	r1, r7
 8006b94:	f7f9 ffa0 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b98:	2800      	cmp	r0, #0
 8006b9a:	d16c      	bne.n	8006c76 <pow+0x146>
 8006b9c:	ec47 6b10 	vmov	d0, r6, r7
 8006ba0:	f001 fd5d 	bl	800865e <finite>
 8006ba4:	2800      	cmp	r0, #0
 8006ba6:	d0e8      	beq.n	8006b7a <pow+0x4a>
 8006ba8:	2200      	movs	r2, #0
 8006baa:	2300      	movs	r3, #0
 8006bac:	4630      	mov	r0, r6
 8006bae:	4639      	mov	r1, r7
 8006bb0:	f7f9 ff9c 	bl	8000aec <__aeabi_dcmplt>
 8006bb4:	2800      	cmp	r0, #0
 8006bb6:	d0e0      	beq.n	8006b7a <pow+0x4a>
 8006bb8:	f7ff fab4 	bl	8006124 <__errno>
 8006bbc:	2321      	movs	r3, #33	; 0x21
 8006bbe:	6003      	str	r3, [r0, #0]
 8006bc0:	2400      	movs	r4, #0
 8006bc2:	4d2f      	ldr	r5, [pc, #188]	; (8006c80 <pow+0x150>)
 8006bc4:	e7d9      	b.n	8006b7a <pow+0x4a>
 8006bc6:	ec45 4b10 	vmov	d0, r4, r5
 8006bca:	f001 fd48 	bl	800865e <finite>
 8006bce:	bbb8      	cbnz	r0, 8006c40 <pow+0x110>
 8006bd0:	ec49 8b10 	vmov	d0, r8, r9
 8006bd4:	f001 fd43 	bl	800865e <finite>
 8006bd8:	b390      	cbz	r0, 8006c40 <pow+0x110>
 8006bda:	ec47 6b10 	vmov	d0, r6, r7
 8006bde:	f001 fd3e 	bl	800865e <finite>
 8006be2:	b368      	cbz	r0, 8006c40 <pow+0x110>
 8006be4:	4622      	mov	r2, r4
 8006be6:	462b      	mov	r3, r5
 8006be8:	4620      	mov	r0, r4
 8006bea:	4629      	mov	r1, r5
 8006bec:	f7f9 ffa6 	bl	8000b3c <__aeabi_dcmpun>
 8006bf0:	b160      	cbz	r0, 8006c0c <pow+0xdc>
 8006bf2:	f7ff fa97 	bl	8006124 <__errno>
 8006bf6:	2321      	movs	r3, #33	; 0x21
 8006bf8:	6003      	str	r3, [r0, #0]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	4610      	mov	r0, r2
 8006c00:	4619      	mov	r1, r3
 8006c02:	f7f9 fe2b 	bl	800085c <__aeabi_ddiv>
 8006c06:	4604      	mov	r4, r0
 8006c08:	460d      	mov	r5, r1
 8006c0a:	e7b6      	b.n	8006b7a <pow+0x4a>
 8006c0c:	f7ff fa8a 	bl	8006124 <__errno>
 8006c10:	2322      	movs	r3, #34	; 0x22
 8006c12:	6003      	str	r3, [r0, #0]
 8006c14:	2200      	movs	r2, #0
 8006c16:	2300      	movs	r3, #0
 8006c18:	4640      	mov	r0, r8
 8006c1a:	4649      	mov	r1, r9
 8006c1c:	f7f9 ff66 	bl	8000aec <__aeabi_dcmplt>
 8006c20:	2400      	movs	r4, #0
 8006c22:	b158      	cbz	r0, 8006c3c <pow+0x10c>
 8006c24:	ec47 6b10 	vmov	d0, r6, r7
 8006c28:	f001 fdae 	bl	8008788 <rint>
 8006c2c:	4632      	mov	r2, r6
 8006c2e:	ec51 0b10 	vmov	r0, r1, d0
 8006c32:	463b      	mov	r3, r7
 8006c34:	f7f9 ff50 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c38:	2800      	cmp	r0, #0
 8006c3a:	d0c2      	beq.n	8006bc2 <pow+0x92>
 8006c3c:	4d11      	ldr	r5, [pc, #68]	; (8006c84 <pow+0x154>)
 8006c3e:	e79c      	b.n	8006b7a <pow+0x4a>
 8006c40:	2200      	movs	r2, #0
 8006c42:	2300      	movs	r3, #0
 8006c44:	4620      	mov	r0, r4
 8006c46:	4629      	mov	r1, r5
 8006c48:	f7f9 ff46 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c4c:	2800      	cmp	r0, #0
 8006c4e:	d094      	beq.n	8006b7a <pow+0x4a>
 8006c50:	ec49 8b10 	vmov	d0, r8, r9
 8006c54:	f001 fd03 	bl	800865e <finite>
 8006c58:	2800      	cmp	r0, #0
 8006c5a:	d08e      	beq.n	8006b7a <pow+0x4a>
 8006c5c:	ec47 6b10 	vmov	d0, r6, r7
 8006c60:	f001 fcfd 	bl	800865e <finite>
 8006c64:	2800      	cmp	r0, #0
 8006c66:	d088      	beq.n	8006b7a <pow+0x4a>
 8006c68:	f7ff fa5c 	bl	8006124 <__errno>
 8006c6c:	2322      	movs	r3, #34	; 0x22
 8006c6e:	6003      	str	r3, [r0, #0]
 8006c70:	2400      	movs	r4, #0
 8006c72:	2500      	movs	r5, #0
 8006c74:	e781      	b.n	8006b7a <pow+0x4a>
 8006c76:	4d04      	ldr	r5, [pc, #16]	; (8006c88 <pow+0x158>)
 8006c78:	2400      	movs	r4, #0
 8006c7a:	e77e      	b.n	8006b7a <pow+0x4a>
 8006c7c:	20000074 	.word	0x20000074
 8006c80:	fff00000 	.word	0xfff00000
 8006c84:	7ff00000 	.word	0x7ff00000
 8006c88:	3ff00000 	.word	0x3ff00000

08006c8c <sqrt>:
 8006c8c:	b538      	push	{r3, r4, r5, lr}
 8006c8e:	ed2d 8b02 	vpush	{d8}
 8006c92:	ec55 4b10 	vmov	r4, r5, d0
 8006c96:	f000 ff5d 	bl	8007b54 <__ieee754_sqrt>
 8006c9a:	4b15      	ldr	r3, [pc, #84]	; (8006cf0 <sqrt+0x64>)
 8006c9c:	eeb0 8a40 	vmov.f32	s16, s0
 8006ca0:	eef0 8a60 	vmov.f32	s17, s1
 8006ca4:	f993 3000 	ldrsb.w	r3, [r3]
 8006ca8:	3301      	adds	r3, #1
 8006caa:	d019      	beq.n	8006ce0 <sqrt+0x54>
 8006cac:	4622      	mov	r2, r4
 8006cae:	462b      	mov	r3, r5
 8006cb0:	4620      	mov	r0, r4
 8006cb2:	4629      	mov	r1, r5
 8006cb4:	f7f9 ff42 	bl	8000b3c <__aeabi_dcmpun>
 8006cb8:	b990      	cbnz	r0, 8006ce0 <sqrt+0x54>
 8006cba:	2200      	movs	r2, #0
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	4620      	mov	r0, r4
 8006cc0:	4629      	mov	r1, r5
 8006cc2:	f7f9 ff13 	bl	8000aec <__aeabi_dcmplt>
 8006cc6:	b158      	cbz	r0, 8006ce0 <sqrt+0x54>
 8006cc8:	f7ff fa2c 	bl	8006124 <__errno>
 8006ccc:	2321      	movs	r3, #33	; 0x21
 8006cce:	6003      	str	r3, [r0, #0]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	4610      	mov	r0, r2
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	f7f9 fdc0 	bl	800085c <__aeabi_ddiv>
 8006cdc:	ec41 0b18 	vmov	d8, r0, r1
 8006ce0:	eeb0 0a48 	vmov.f32	s0, s16
 8006ce4:	eef0 0a68 	vmov.f32	s1, s17
 8006ce8:	ecbd 8b02 	vpop	{d8}
 8006cec:	bd38      	pop	{r3, r4, r5, pc}
 8006cee:	bf00      	nop
 8006cf0:	20000074 	.word	0x20000074
 8006cf4:	00000000 	.word	0x00000000

08006cf8 <__ieee754_pow>:
 8006cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cfc:	ed2d 8b06 	vpush	{d8-d10}
 8006d00:	b08d      	sub	sp, #52	; 0x34
 8006d02:	ed8d 1b02 	vstr	d1, [sp, #8]
 8006d06:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8006d0a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8006d0e:	ea56 0100 	orrs.w	r1, r6, r0
 8006d12:	ec53 2b10 	vmov	r2, r3, d0
 8006d16:	f000 84d1 	beq.w	80076bc <__ieee754_pow+0x9c4>
 8006d1a:	497f      	ldr	r1, [pc, #508]	; (8006f18 <__ieee754_pow+0x220>)
 8006d1c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8006d20:	428c      	cmp	r4, r1
 8006d22:	ee10 8a10 	vmov	r8, s0
 8006d26:	4699      	mov	r9, r3
 8006d28:	dc09      	bgt.n	8006d3e <__ieee754_pow+0x46>
 8006d2a:	d103      	bne.n	8006d34 <__ieee754_pow+0x3c>
 8006d2c:	b97a      	cbnz	r2, 8006d4e <__ieee754_pow+0x56>
 8006d2e:	42a6      	cmp	r6, r4
 8006d30:	dd02      	ble.n	8006d38 <__ieee754_pow+0x40>
 8006d32:	e00c      	b.n	8006d4e <__ieee754_pow+0x56>
 8006d34:	428e      	cmp	r6, r1
 8006d36:	dc02      	bgt.n	8006d3e <__ieee754_pow+0x46>
 8006d38:	428e      	cmp	r6, r1
 8006d3a:	d110      	bne.n	8006d5e <__ieee754_pow+0x66>
 8006d3c:	b178      	cbz	r0, 8006d5e <__ieee754_pow+0x66>
 8006d3e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006d42:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006d46:	ea54 0308 	orrs.w	r3, r4, r8
 8006d4a:	f000 84b7 	beq.w	80076bc <__ieee754_pow+0x9c4>
 8006d4e:	4873      	ldr	r0, [pc, #460]	; (8006f1c <__ieee754_pow+0x224>)
 8006d50:	b00d      	add	sp, #52	; 0x34
 8006d52:	ecbd 8b06 	vpop	{d8-d10}
 8006d56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d5a:	f001 bd0d 	b.w	8008778 <nan>
 8006d5e:	f1b9 0f00 	cmp.w	r9, #0
 8006d62:	da36      	bge.n	8006dd2 <__ieee754_pow+0xda>
 8006d64:	496e      	ldr	r1, [pc, #440]	; (8006f20 <__ieee754_pow+0x228>)
 8006d66:	428e      	cmp	r6, r1
 8006d68:	dc51      	bgt.n	8006e0e <__ieee754_pow+0x116>
 8006d6a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8006d6e:	428e      	cmp	r6, r1
 8006d70:	f340 84af 	ble.w	80076d2 <__ieee754_pow+0x9da>
 8006d74:	1531      	asrs	r1, r6, #20
 8006d76:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8006d7a:	2914      	cmp	r1, #20
 8006d7c:	dd0f      	ble.n	8006d9e <__ieee754_pow+0xa6>
 8006d7e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8006d82:	fa20 fc01 	lsr.w	ip, r0, r1
 8006d86:	fa0c f101 	lsl.w	r1, ip, r1
 8006d8a:	4281      	cmp	r1, r0
 8006d8c:	f040 84a1 	bne.w	80076d2 <__ieee754_pow+0x9da>
 8006d90:	f00c 0c01 	and.w	ip, ip, #1
 8006d94:	f1cc 0102 	rsb	r1, ip, #2
 8006d98:	9100      	str	r1, [sp, #0]
 8006d9a:	b180      	cbz	r0, 8006dbe <__ieee754_pow+0xc6>
 8006d9c:	e059      	b.n	8006e52 <__ieee754_pow+0x15a>
 8006d9e:	2800      	cmp	r0, #0
 8006da0:	d155      	bne.n	8006e4e <__ieee754_pow+0x156>
 8006da2:	f1c1 0114 	rsb	r1, r1, #20
 8006da6:	fa46 fc01 	asr.w	ip, r6, r1
 8006daa:	fa0c f101 	lsl.w	r1, ip, r1
 8006dae:	42b1      	cmp	r1, r6
 8006db0:	f040 848c 	bne.w	80076cc <__ieee754_pow+0x9d4>
 8006db4:	f00c 0c01 	and.w	ip, ip, #1
 8006db8:	f1cc 0102 	rsb	r1, ip, #2
 8006dbc:	9100      	str	r1, [sp, #0]
 8006dbe:	4959      	ldr	r1, [pc, #356]	; (8006f24 <__ieee754_pow+0x22c>)
 8006dc0:	428e      	cmp	r6, r1
 8006dc2:	d12d      	bne.n	8006e20 <__ieee754_pow+0x128>
 8006dc4:	2f00      	cmp	r7, #0
 8006dc6:	da79      	bge.n	8006ebc <__ieee754_pow+0x1c4>
 8006dc8:	4956      	ldr	r1, [pc, #344]	; (8006f24 <__ieee754_pow+0x22c>)
 8006dca:	2000      	movs	r0, #0
 8006dcc:	f7f9 fd46 	bl	800085c <__aeabi_ddiv>
 8006dd0:	e016      	b.n	8006e00 <__ieee754_pow+0x108>
 8006dd2:	2100      	movs	r1, #0
 8006dd4:	9100      	str	r1, [sp, #0]
 8006dd6:	2800      	cmp	r0, #0
 8006dd8:	d13b      	bne.n	8006e52 <__ieee754_pow+0x15a>
 8006dda:	494f      	ldr	r1, [pc, #316]	; (8006f18 <__ieee754_pow+0x220>)
 8006ddc:	428e      	cmp	r6, r1
 8006dde:	d1ee      	bne.n	8006dbe <__ieee754_pow+0xc6>
 8006de0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006de4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006de8:	ea53 0308 	orrs.w	r3, r3, r8
 8006dec:	f000 8466 	beq.w	80076bc <__ieee754_pow+0x9c4>
 8006df0:	4b4d      	ldr	r3, [pc, #308]	; (8006f28 <__ieee754_pow+0x230>)
 8006df2:	429c      	cmp	r4, r3
 8006df4:	dd0d      	ble.n	8006e12 <__ieee754_pow+0x11a>
 8006df6:	2f00      	cmp	r7, #0
 8006df8:	f280 8464 	bge.w	80076c4 <__ieee754_pow+0x9cc>
 8006dfc:	2000      	movs	r0, #0
 8006dfe:	2100      	movs	r1, #0
 8006e00:	ec41 0b10 	vmov	d0, r0, r1
 8006e04:	b00d      	add	sp, #52	; 0x34
 8006e06:	ecbd 8b06 	vpop	{d8-d10}
 8006e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e0e:	2102      	movs	r1, #2
 8006e10:	e7e0      	b.n	8006dd4 <__ieee754_pow+0xdc>
 8006e12:	2f00      	cmp	r7, #0
 8006e14:	daf2      	bge.n	8006dfc <__ieee754_pow+0x104>
 8006e16:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8006e1a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006e1e:	e7ef      	b.n	8006e00 <__ieee754_pow+0x108>
 8006e20:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8006e24:	d104      	bne.n	8006e30 <__ieee754_pow+0x138>
 8006e26:	4610      	mov	r0, r2
 8006e28:	4619      	mov	r1, r3
 8006e2a:	f7f9 fbed 	bl	8000608 <__aeabi_dmul>
 8006e2e:	e7e7      	b.n	8006e00 <__ieee754_pow+0x108>
 8006e30:	493e      	ldr	r1, [pc, #248]	; (8006f2c <__ieee754_pow+0x234>)
 8006e32:	428f      	cmp	r7, r1
 8006e34:	d10d      	bne.n	8006e52 <__ieee754_pow+0x15a>
 8006e36:	f1b9 0f00 	cmp.w	r9, #0
 8006e3a:	db0a      	blt.n	8006e52 <__ieee754_pow+0x15a>
 8006e3c:	ec43 2b10 	vmov	d0, r2, r3
 8006e40:	b00d      	add	sp, #52	; 0x34
 8006e42:	ecbd 8b06 	vpop	{d8-d10}
 8006e46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e4a:	f000 be83 	b.w	8007b54 <__ieee754_sqrt>
 8006e4e:	2100      	movs	r1, #0
 8006e50:	9100      	str	r1, [sp, #0]
 8006e52:	ec43 2b10 	vmov	d0, r2, r3
 8006e56:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006e5a:	f001 fbf7 	bl	800864c <fabs>
 8006e5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e62:	ec51 0b10 	vmov	r0, r1, d0
 8006e66:	f1b8 0f00 	cmp.w	r8, #0
 8006e6a:	d12a      	bne.n	8006ec2 <__ieee754_pow+0x1ca>
 8006e6c:	b12c      	cbz	r4, 8006e7a <__ieee754_pow+0x182>
 8006e6e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8006f24 <__ieee754_pow+0x22c>
 8006e72:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8006e76:	45e6      	cmp	lr, ip
 8006e78:	d123      	bne.n	8006ec2 <__ieee754_pow+0x1ca>
 8006e7a:	2f00      	cmp	r7, #0
 8006e7c:	da05      	bge.n	8006e8a <__ieee754_pow+0x192>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	460b      	mov	r3, r1
 8006e82:	2000      	movs	r0, #0
 8006e84:	4927      	ldr	r1, [pc, #156]	; (8006f24 <__ieee754_pow+0x22c>)
 8006e86:	f7f9 fce9 	bl	800085c <__aeabi_ddiv>
 8006e8a:	f1b9 0f00 	cmp.w	r9, #0
 8006e8e:	dab7      	bge.n	8006e00 <__ieee754_pow+0x108>
 8006e90:	9b00      	ldr	r3, [sp, #0]
 8006e92:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006e96:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006e9a:	4323      	orrs	r3, r4
 8006e9c:	d108      	bne.n	8006eb0 <__ieee754_pow+0x1b8>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	4610      	mov	r0, r2
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	f7f9 f9f7 	bl	8000298 <__aeabi_dsub>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	460b      	mov	r3, r1
 8006eae:	e78d      	b.n	8006dcc <__ieee754_pow+0xd4>
 8006eb0:	9b00      	ldr	r3, [sp, #0]
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d1a4      	bne.n	8006e00 <__ieee754_pow+0x108>
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ebc:	4610      	mov	r0, r2
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	e79e      	b.n	8006e00 <__ieee754_pow+0x108>
 8006ec2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8006ec6:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 8006eca:	950a      	str	r5, [sp, #40]	; 0x28
 8006ecc:	9d00      	ldr	r5, [sp, #0]
 8006ece:	46ac      	mov	ip, r5
 8006ed0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006ed2:	ea5c 0505 	orrs.w	r5, ip, r5
 8006ed6:	d0e4      	beq.n	8006ea2 <__ieee754_pow+0x1aa>
 8006ed8:	4b15      	ldr	r3, [pc, #84]	; (8006f30 <__ieee754_pow+0x238>)
 8006eda:	429e      	cmp	r6, r3
 8006edc:	f340 80fc 	ble.w	80070d8 <__ieee754_pow+0x3e0>
 8006ee0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006ee4:	429e      	cmp	r6, r3
 8006ee6:	4b10      	ldr	r3, [pc, #64]	; (8006f28 <__ieee754_pow+0x230>)
 8006ee8:	dd07      	ble.n	8006efa <__ieee754_pow+0x202>
 8006eea:	429c      	cmp	r4, r3
 8006eec:	dc0a      	bgt.n	8006f04 <__ieee754_pow+0x20c>
 8006eee:	2f00      	cmp	r7, #0
 8006ef0:	da84      	bge.n	8006dfc <__ieee754_pow+0x104>
 8006ef2:	a307      	add	r3, pc, #28	; (adr r3, 8006f10 <__ieee754_pow+0x218>)
 8006ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef8:	e795      	b.n	8006e26 <__ieee754_pow+0x12e>
 8006efa:	429c      	cmp	r4, r3
 8006efc:	dbf7      	blt.n	8006eee <__ieee754_pow+0x1f6>
 8006efe:	4b09      	ldr	r3, [pc, #36]	; (8006f24 <__ieee754_pow+0x22c>)
 8006f00:	429c      	cmp	r4, r3
 8006f02:	dd17      	ble.n	8006f34 <__ieee754_pow+0x23c>
 8006f04:	2f00      	cmp	r7, #0
 8006f06:	dcf4      	bgt.n	8006ef2 <__ieee754_pow+0x1fa>
 8006f08:	e778      	b.n	8006dfc <__ieee754_pow+0x104>
 8006f0a:	bf00      	nop
 8006f0c:	f3af 8000 	nop.w
 8006f10:	8800759c 	.word	0x8800759c
 8006f14:	7e37e43c 	.word	0x7e37e43c
 8006f18:	7ff00000 	.word	0x7ff00000
 8006f1c:	080089fd 	.word	0x080089fd
 8006f20:	433fffff 	.word	0x433fffff
 8006f24:	3ff00000 	.word	0x3ff00000
 8006f28:	3fefffff 	.word	0x3fefffff
 8006f2c:	3fe00000 	.word	0x3fe00000
 8006f30:	41e00000 	.word	0x41e00000
 8006f34:	4b64      	ldr	r3, [pc, #400]	; (80070c8 <__ieee754_pow+0x3d0>)
 8006f36:	2200      	movs	r2, #0
 8006f38:	f7f9 f9ae 	bl	8000298 <__aeabi_dsub>
 8006f3c:	a356      	add	r3, pc, #344	; (adr r3, 8007098 <__ieee754_pow+0x3a0>)
 8006f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f42:	4604      	mov	r4, r0
 8006f44:	460d      	mov	r5, r1
 8006f46:	f7f9 fb5f 	bl	8000608 <__aeabi_dmul>
 8006f4a:	a355      	add	r3, pc, #340	; (adr r3, 80070a0 <__ieee754_pow+0x3a8>)
 8006f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f50:	4606      	mov	r6, r0
 8006f52:	460f      	mov	r7, r1
 8006f54:	4620      	mov	r0, r4
 8006f56:	4629      	mov	r1, r5
 8006f58:	f7f9 fb56 	bl	8000608 <__aeabi_dmul>
 8006f5c:	4b5b      	ldr	r3, [pc, #364]	; (80070cc <__ieee754_pow+0x3d4>)
 8006f5e:	4682      	mov	sl, r0
 8006f60:	468b      	mov	fp, r1
 8006f62:	2200      	movs	r2, #0
 8006f64:	4620      	mov	r0, r4
 8006f66:	4629      	mov	r1, r5
 8006f68:	f7f9 fb4e 	bl	8000608 <__aeabi_dmul>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	460b      	mov	r3, r1
 8006f70:	a14d      	add	r1, pc, #308	; (adr r1, 80070a8 <__ieee754_pow+0x3b0>)
 8006f72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f76:	f7f9 f98f 	bl	8000298 <__aeabi_dsub>
 8006f7a:	4622      	mov	r2, r4
 8006f7c:	462b      	mov	r3, r5
 8006f7e:	f7f9 fb43 	bl	8000608 <__aeabi_dmul>
 8006f82:	4602      	mov	r2, r0
 8006f84:	460b      	mov	r3, r1
 8006f86:	2000      	movs	r0, #0
 8006f88:	4951      	ldr	r1, [pc, #324]	; (80070d0 <__ieee754_pow+0x3d8>)
 8006f8a:	f7f9 f985 	bl	8000298 <__aeabi_dsub>
 8006f8e:	4622      	mov	r2, r4
 8006f90:	4680      	mov	r8, r0
 8006f92:	4689      	mov	r9, r1
 8006f94:	462b      	mov	r3, r5
 8006f96:	4620      	mov	r0, r4
 8006f98:	4629      	mov	r1, r5
 8006f9a:	f7f9 fb35 	bl	8000608 <__aeabi_dmul>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	460b      	mov	r3, r1
 8006fa2:	4640      	mov	r0, r8
 8006fa4:	4649      	mov	r1, r9
 8006fa6:	f7f9 fb2f 	bl	8000608 <__aeabi_dmul>
 8006faa:	a341      	add	r3, pc, #260	; (adr r3, 80070b0 <__ieee754_pow+0x3b8>)
 8006fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb0:	f7f9 fb2a 	bl	8000608 <__aeabi_dmul>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	4650      	mov	r0, sl
 8006fba:	4659      	mov	r1, fp
 8006fbc:	f7f9 f96c 	bl	8000298 <__aeabi_dsub>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	460b      	mov	r3, r1
 8006fc4:	4680      	mov	r8, r0
 8006fc6:	4689      	mov	r9, r1
 8006fc8:	4630      	mov	r0, r6
 8006fca:	4639      	mov	r1, r7
 8006fcc:	f7f9 f966 	bl	800029c <__adddf3>
 8006fd0:	2400      	movs	r4, #0
 8006fd2:	4632      	mov	r2, r6
 8006fd4:	463b      	mov	r3, r7
 8006fd6:	4620      	mov	r0, r4
 8006fd8:	460d      	mov	r5, r1
 8006fda:	f7f9 f95d 	bl	8000298 <__aeabi_dsub>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	4640      	mov	r0, r8
 8006fe4:	4649      	mov	r1, r9
 8006fe6:	f7f9 f957 	bl	8000298 <__aeabi_dsub>
 8006fea:	9b00      	ldr	r3, [sp, #0]
 8006fec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	4682      	mov	sl, r0
 8006ff4:	468b      	mov	fp, r1
 8006ff6:	f040 81f1 	bne.w	80073dc <__ieee754_pow+0x6e4>
 8006ffa:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80070b8 <__ieee754_pow+0x3c0>
 8006ffe:	eeb0 8a47 	vmov.f32	s16, s14
 8007002:	eef0 8a67 	vmov.f32	s17, s15
 8007006:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800700a:	2600      	movs	r6, #0
 800700c:	4632      	mov	r2, r6
 800700e:	463b      	mov	r3, r7
 8007010:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007014:	f7f9 f940 	bl	8000298 <__aeabi_dsub>
 8007018:	4622      	mov	r2, r4
 800701a:	462b      	mov	r3, r5
 800701c:	f7f9 faf4 	bl	8000608 <__aeabi_dmul>
 8007020:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007024:	4680      	mov	r8, r0
 8007026:	4689      	mov	r9, r1
 8007028:	4650      	mov	r0, sl
 800702a:	4659      	mov	r1, fp
 800702c:	f7f9 faec 	bl	8000608 <__aeabi_dmul>
 8007030:	4602      	mov	r2, r0
 8007032:	460b      	mov	r3, r1
 8007034:	4640      	mov	r0, r8
 8007036:	4649      	mov	r1, r9
 8007038:	f7f9 f930 	bl	800029c <__adddf3>
 800703c:	4632      	mov	r2, r6
 800703e:	463b      	mov	r3, r7
 8007040:	4680      	mov	r8, r0
 8007042:	4689      	mov	r9, r1
 8007044:	4620      	mov	r0, r4
 8007046:	4629      	mov	r1, r5
 8007048:	f7f9 fade 	bl	8000608 <__aeabi_dmul>
 800704c:	460b      	mov	r3, r1
 800704e:	4604      	mov	r4, r0
 8007050:	460d      	mov	r5, r1
 8007052:	4602      	mov	r2, r0
 8007054:	4649      	mov	r1, r9
 8007056:	4640      	mov	r0, r8
 8007058:	f7f9 f920 	bl	800029c <__adddf3>
 800705c:	4b1d      	ldr	r3, [pc, #116]	; (80070d4 <__ieee754_pow+0x3dc>)
 800705e:	4299      	cmp	r1, r3
 8007060:	ec45 4b19 	vmov	d9, r4, r5
 8007064:	4606      	mov	r6, r0
 8007066:	460f      	mov	r7, r1
 8007068:	468b      	mov	fp, r1
 800706a:	f340 82fe 	ble.w	800766a <__ieee754_pow+0x972>
 800706e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007072:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007076:	4303      	orrs	r3, r0
 8007078:	f000 81f0 	beq.w	800745c <__ieee754_pow+0x764>
 800707c:	a310      	add	r3, pc, #64	; (adr r3, 80070c0 <__ieee754_pow+0x3c8>)
 800707e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007082:	ec51 0b18 	vmov	r0, r1, d8
 8007086:	f7f9 fabf 	bl	8000608 <__aeabi_dmul>
 800708a:	a30d      	add	r3, pc, #52	; (adr r3, 80070c0 <__ieee754_pow+0x3c8>)
 800708c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007090:	e6cb      	b.n	8006e2a <__ieee754_pow+0x132>
 8007092:	bf00      	nop
 8007094:	f3af 8000 	nop.w
 8007098:	60000000 	.word	0x60000000
 800709c:	3ff71547 	.word	0x3ff71547
 80070a0:	f85ddf44 	.word	0xf85ddf44
 80070a4:	3e54ae0b 	.word	0x3e54ae0b
 80070a8:	55555555 	.word	0x55555555
 80070ac:	3fd55555 	.word	0x3fd55555
 80070b0:	652b82fe 	.word	0x652b82fe
 80070b4:	3ff71547 	.word	0x3ff71547
 80070b8:	00000000 	.word	0x00000000
 80070bc:	bff00000 	.word	0xbff00000
 80070c0:	8800759c 	.word	0x8800759c
 80070c4:	7e37e43c 	.word	0x7e37e43c
 80070c8:	3ff00000 	.word	0x3ff00000
 80070cc:	3fd00000 	.word	0x3fd00000
 80070d0:	3fe00000 	.word	0x3fe00000
 80070d4:	408fffff 	.word	0x408fffff
 80070d8:	4bd7      	ldr	r3, [pc, #860]	; (8007438 <__ieee754_pow+0x740>)
 80070da:	ea03 0309 	and.w	r3, r3, r9
 80070de:	2200      	movs	r2, #0
 80070e0:	b92b      	cbnz	r3, 80070ee <__ieee754_pow+0x3f6>
 80070e2:	4bd6      	ldr	r3, [pc, #856]	; (800743c <__ieee754_pow+0x744>)
 80070e4:	f7f9 fa90 	bl	8000608 <__aeabi_dmul>
 80070e8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80070ec:	460c      	mov	r4, r1
 80070ee:	1523      	asrs	r3, r4, #20
 80070f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80070f4:	4413      	add	r3, r2
 80070f6:	9309      	str	r3, [sp, #36]	; 0x24
 80070f8:	4bd1      	ldr	r3, [pc, #836]	; (8007440 <__ieee754_pow+0x748>)
 80070fa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80070fe:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007102:	429c      	cmp	r4, r3
 8007104:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007108:	dd08      	ble.n	800711c <__ieee754_pow+0x424>
 800710a:	4bce      	ldr	r3, [pc, #824]	; (8007444 <__ieee754_pow+0x74c>)
 800710c:	429c      	cmp	r4, r3
 800710e:	f340 8163 	ble.w	80073d8 <__ieee754_pow+0x6e0>
 8007112:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007114:	3301      	adds	r3, #1
 8007116:	9309      	str	r3, [sp, #36]	; 0x24
 8007118:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800711c:	2400      	movs	r4, #0
 800711e:	00e3      	lsls	r3, r4, #3
 8007120:	930b      	str	r3, [sp, #44]	; 0x2c
 8007122:	4bc9      	ldr	r3, [pc, #804]	; (8007448 <__ieee754_pow+0x750>)
 8007124:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007128:	ed93 7b00 	vldr	d7, [r3]
 800712c:	4629      	mov	r1, r5
 800712e:	ec53 2b17 	vmov	r2, r3, d7
 8007132:	eeb0 8a47 	vmov.f32	s16, s14
 8007136:	eef0 8a67 	vmov.f32	s17, s15
 800713a:	4682      	mov	sl, r0
 800713c:	f7f9 f8ac 	bl	8000298 <__aeabi_dsub>
 8007140:	4652      	mov	r2, sl
 8007142:	4606      	mov	r6, r0
 8007144:	460f      	mov	r7, r1
 8007146:	462b      	mov	r3, r5
 8007148:	ec51 0b18 	vmov	r0, r1, d8
 800714c:	f7f9 f8a6 	bl	800029c <__adddf3>
 8007150:	4602      	mov	r2, r0
 8007152:	460b      	mov	r3, r1
 8007154:	2000      	movs	r0, #0
 8007156:	49bd      	ldr	r1, [pc, #756]	; (800744c <__ieee754_pow+0x754>)
 8007158:	f7f9 fb80 	bl	800085c <__aeabi_ddiv>
 800715c:	ec41 0b19 	vmov	d9, r0, r1
 8007160:	4602      	mov	r2, r0
 8007162:	460b      	mov	r3, r1
 8007164:	4630      	mov	r0, r6
 8007166:	4639      	mov	r1, r7
 8007168:	f7f9 fa4e 	bl	8000608 <__aeabi_dmul>
 800716c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007170:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007174:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007178:	2300      	movs	r3, #0
 800717a:	9304      	str	r3, [sp, #16]
 800717c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007180:	46ab      	mov	fp, r5
 8007182:	106d      	asrs	r5, r5, #1
 8007184:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007188:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800718c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8007190:	2200      	movs	r2, #0
 8007192:	4640      	mov	r0, r8
 8007194:	4649      	mov	r1, r9
 8007196:	4614      	mov	r4, r2
 8007198:	461d      	mov	r5, r3
 800719a:	f7f9 fa35 	bl	8000608 <__aeabi_dmul>
 800719e:	4602      	mov	r2, r0
 80071a0:	460b      	mov	r3, r1
 80071a2:	4630      	mov	r0, r6
 80071a4:	4639      	mov	r1, r7
 80071a6:	f7f9 f877 	bl	8000298 <__aeabi_dsub>
 80071aa:	ec53 2b18 	vmov	r2, r3, d8
 80071ae:	4606      	mov	r6, r0
 80071b0:	460f      	mov	r7, r1
 80071b2:	4620      	mov	r0, r4
 80071b4:	4629      	mov	r1, r5
 80071b6:	f7f9 f86f 	bl	8000298 <__aeabi_dsub>
 80071ba:	4602      	mov	r2, r0
 80071bc:	460b      	mov	r3, r1
 80071be:	4650      	mov	r0, sl
 80071c0:	4659      	mov	r1, fp
 80071c2:	f7f9 f869 	bl	8000298 <__aeabi_dsub>
 80071c6:	4642      	mov	r2, r8
 80071c8:	464b      	mov	r3, r9
 80071ca:	f7f9 fa1d 	bl	8000608 <__aeabi_dmul>
 80071ce:	4602      	mov	r2, r0
 80071d0:	460b      	mov	r3, r1
 80071d2:	4630      	mov	r0, r6
 80071d4:	4639      	mov	r1, r7
 80071d6:	f7f9 f85f 	bl	8000298 <__aeabi_dsub>
 80071da:	ec53 2b19 	vmov	r2, r3, d9
 80071de:	f7f9 fa13 	bl	8000608 <__aeabi_dmul>
 80071e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80071e6:	ec41 0b18 	vmov	d8, r0, r1
 80071ea:	4610      	mov	r0, r2
 80071ec:	4619      	mov	r1, r3
 80071ee:	f7f9 fa0b 	bl	8000608 <__aeabi_dmul>
 80071f2:	a37d      	add	r3, pc, #500	; (adr r3, 80073e8 <__ieee754_pow+0x6f0>)
 80071f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f8:	4604      	mov	r4, r0
 80071fa:	460d      	mov	r5, r1
 80071fc:	f7f9 fa04 	bl	8000608 <__aeabi_dmul>
 8007200:	a37b      	add	r3, pc, #492	; (adr r3, 80073f0 <__ieee754_pow+0x6f8>)
 8007202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007206:	f7f9 f849 	bl	800029c <__adddf3>
 800720a:	4622      	mov	r2, r4
 800720c:	462b      	mov	r3, r5
 800720e:	f7f9 f9fb 	bl	8000608 <__aeabi_dmul>
 8007212:	a379      	add	r3, pc, #484	; (adr r3, 80073f8 <__ieee754_pow+0x700>)
 8007214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007218:	f7f9 f840 	bl	800029c <__adddf3>
 800721c:	4622      	mov	r2, r4
 800721e:	462b      	mov	r3, r5
 8007220:	f7f9 f9f2 	bl	8000608 <__aeabi_dmul>
 8007224:	a376      	add	r3, pc, #472	; (adr r3, 8007400 <__ieee754_pow+0x708>)
 8007226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722a:	f7f9 f837 	bl	800029c <__adddf3>
 800722e:	4622      	mov	r2, r4
 8007230:	462b      	mov	r3, r5
 8007232:	f7f9 f9e9 	bl	8000608 <__aeabi_dmul>
 8007236:	a374      	add	r3, pc, #464	; (adr r3, 8007408 <__ieee754_pow+0x710>)
 8007238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723c:	f7f9 f82e 	bl	800029c <__adddf3>
 8007240:	4622      	mov	r2, r4
 8007242:	462b      	mov	r3, r5
 8007244:	f7f9 f9e0 	bl	8000608 <__aeabi_dmul>
 8007248:	a371      	add	r3, pc, #452	; (adr r3, 8007410 <__ieee754_pow+0x718>)
 800724a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800724e:	f7f9 f825 	bl	800029c <__adddf3>
 8007252:	4622      	mov	r2, r4
 8007254:	4606      	mov	r6, r0
 8007256:	460f      	mov	r7, r1
 8007258:	462b      	mov	r3, r5
 800725a:	4620      	mov	r0, r4
 800725c:	4629      	mov	r1, r5
 800725e:	f7f9 f9d3 	bl	8000608 <__aeabi_dmul>
 8007262:	4602      	mov	r2, r0
 8007264:	460b      	mov	r3, r1
 8007266:	4630      	mov	r0, r6
 8007268:	4639      	mov	r1, r7
 800726a:	f7f9 f9cd 	bl	8000608 <__aeabi_dmul>
 800726e:	4642      	mov	r2, r8
 8007270:	4604      	mov	r4, r0
 8007272:	460d      	mov	r5, r1
 8007274:	464b      	mov	r3, r9
 8007276:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800727a:	f7f9 f80f 	bl	800029c <__adddf3>
 800727e:	ec53 2b18 	vmov	r2, r3, d8
 8007282:	f7f9 f9c1 	bl	8000608 <__aeabi_dmul>
 8007286:	4622      	mov	r2, r4
 8007288:	462b      	mov	r3, r5
 800728a:	f7f9 f807 	bl	800029c <__adddf3>
 800728e:	4642      	mov	r2, r8
 8007290:	4682      	mov	sl, r0
 8007292:	468b      	mov	fp, r1
 8007294:	464b      	mov	r3, r9
 8007296:	4640      	mov	r0, r8
 8007298:	4649      	mov	r1, r9
 800729a:	f7f9 f9b5 	bl	8000608 <__aeabi_dmul>
 800729e:	4b6c      	ldr	r3, [pc, #432]	; (8007450 <__ieee754_pow+0x758>)
 80072a0:	2200      	movs	r2, #0
 80072a2:	4606      	mov	r6, r0
 80072a4:	460f      	mov	r7, r1
 80072a6:	f7f8 fff9 	bl	800029c <__adddf3>
 80072aa:	4652      	mov	r2, sl
 80072ac:	465b      	mov	r3, fp
 80072ae:	f7f8 fff5 	bl	800029c <__adddf3>
 80072b2:	9c04      	ldr	r4, [sp, #16]
 80072b4:	460d      	mov	r5, r1
 80072b6:	4622      	mov	r2, r4
 80072b8:	460b      	mov	r3, r1
 80072ba:	4640      	mov	r0, r8
 80072bc:	4649      	mov	r1, r9
 80072be:	f7f9 f9a3 	bl	8000608 <__aeabi_dmul>
 80072c2:	4b63      	ldr	r3, [pc, #396]	; (8007450 <__ieee754_pow+0x758>)
 80072c4:	4680      	mov	r8, r0
 80072c6:	4689      	mov	r9, r1
 80072c8:	2200      	movs	r2, #0
 80072ca:	4620      	mov	r0, r4
 80072cc:	4629      	mov	r1, r5
 80072ce:	f7f8 ffe3 	bl	8000298 <__aeabi_dsub>
 80072d2:	4632      	mov	r2, r6
 80072d4:	463b      	mov	r3, r7
 80072d6:	f7f8 ffdf 	bl	8000298 <__aeabi_dsub>
 80072da:	4602      	mov	r2, r0
 80072dc:	460b      	mov	r3, r1
 80072de:	4650      	mov	r0, sl
 80072e0:	4659      	mov	r1, fp
 80072e2:	f7f8 ffd9 	bl	8000298 <__aeabi_dsub>
 80072e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80072ea:	f7f9 f98d 	bl	8000608 <__aeabi_dmul>
 80072ee:	4622      	mov	r2, r4
 80072f0:	4606      	mov	r6, r0
 80072f2:	460f      	mov	r7, r1
 80072f4:	462b      	mov	r3, r5
 80072f6:	ec51 0b18 	vmov	r0, r1, d8
 80072fa:	f7f9 f985 	bl	8000608 <__aeabi_dmul>
 80072fe:	4602      	mov	r2, r0
 8007300:	460b      	mov	r3, r1
 8007302:	4630      	mov	r0, r6
 8007304:	4639      	mov	r1, r7
 8007306:	f7f8 ffc9 	bl	800029c <__adddf3>
 800730a:	4606      	mov	r6, r0
 800730c:	460f      	mov	r7, r1
 800730e:	4602      	mov	r2, r0
 8007310:	460b      	mov	r3, r1
 8007312:	4640      	mov	r0, r8
 8007314:	4649      	mov	r1, r9
 8007316:	f7f8 ffc1 	bl	800029c <__adddf3>
 800731a:	9c04      	ldr	r4, [sp, #16]
 800731c:	a33e      	add	r3, pc, #248	; (adr r3, 8007418 <__ieee754_pow+0x720>)
 800731e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007322:	4620      	mov	r0, r4
 8007324:	460d      	mov	r5, r1
 8007326:	f7f9 f96f 	bl	8000608 <__aeabi_dmul>
 800732a:	4642      	mov	r2, r8
 800732c:	ec41 0b18 	vmov	d8, r0, r1
 8007330:	464b      	mov	r3, r9
 8007332:	4620      	mov	r0, r4
 8007334:	4629      	mov	r1, r5
 8007336:	f7f8 ffaf 	bl	8000298 <__aeabi_dsub>
 800733a:	4602      	mov	r2, r0
 800733c:	460b      	mov	r3, r1
 800733e:	4630      	mov	r0, r6
 8007340:	4639      	mov	r1, r7
 8007342:	f7f8 ffa9 	bl	8000298 <__aeabi_dsub>
 8007346:	a336      	add	r3, pc, #216	; (adr r3, 8007420 <__ieee754_pow+0x728>)
 8007348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800734c:	f7f9 f95c 	bl	8000608 <__aeabi_dmul>
 8007350:	a335      	add	r3, pc, #212	; (adr r3, 8007428 <__ieee754_pow+0x730>)
 8007352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007356:	4606      	mov	r6, r0
 8007358:	460f      	mov	r7, r1
 800735a:	4620      	mov	r0, r4
 800735c:	4629      	mov	r1, r5
 800735e:	f7f9 f953 	bl	8000608 <__aeabi_dmul>
 8007362:	4602      	mov	r2, r0
 8007364:	460b      	mov	r3, r1
 8007366:	4630      	mov	r0, r6
 8007368:	4639      	mov	r1, r7
 800736a:	f7f8 ff97 	bl	800029c <__adddf3>
 800736e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007370:	4b38      	ldr	r3, [pc, #224]	; (8007454 <__ieee754_pow+0x75c>)
 8007372:	4413      	add	r3, r2
 8007374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007378:	f7f8 ff90 	bl	800029c <__adddf3>
 800737c:	4682      	mov	sl, r0
 800737e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007380:	468b      	mov	fp, r1
 8007382:	f7f9 f8d7 	bl	8000534 <__aeabi_i2d>
 8007386:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007388:	4b33      	ldr	r3, [pc, #204]	; (8007458 <__ieee754_pow+0x760>)
 800738a:	4413      	add	r3, r2
 800738c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007390:	4606      	mov	r6, r0
 8007392:	460f      	mov	r7, r1
 8007394:	4652      	mov	r2, sl
 8007396:	465b      	mov	r3, fp
 8007398:	ec51 0b18 	vmov	r0, r1, d8
 800739c:	f7f8 ff7e 	bl	800029c <__adddf3>
 80073a0:	4642      	mov	r2, r8
 80073a2:	464b      	mov	r3, r9
 80073a4:	f7f8 ff7a 	bl	800029c <__adddf3>
 80073a8:	4632      	mov	r2, r6
 80073aa:	463b      	mov	r3, r7
 80073ac:	f7f8 ff76 	bl	800029c <__adddf3>
 80073b0:	9c04      	ldr	r4, [sp, #16]
 80073b2:	4632      	mov	r2, r6
 80073b4:	463b      	mov	r3, r7
 80073b6:	4620      	mov	r0, r4
 80073b8:	460d      	mov	r5, r1
 80073ba:	f7f8 ff6d 	bl	8000298 <__aeabi_dsub>
 80073be:	4642      	mov	r2, r8
 80073c0:	464b      	mov	r3, r9
 80073c2:	f7f8 ff69 	bl	8000298 <__aeabi_dsub>
 80073c6:	ec53 2b18 	vmov	r2, r3, d8
 80073ca:	f7f8 ff65 	bl	8000298 <__aeabi_dsub>
 80073ce:	4602      	mov	r2, r0
 80073d0:	460b      	mov	r3, r1
 80073d2:	4650      	mov	r0, sl
 80073d4:	4659      	mov	r1, fp
 80073d6:	e606      	b.n	8006fe6 <__ieee754_pow+0x2ee>
 80073d8:	2401      	movs	r4, #1
 80073da:	e6a0      	b.n	800711e <__ieee754_pow+0x426>
 80073dc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8007430 <__ieee754_pow+0x738>
 80073e0:	e60d      	b.n	8006ffe <__ieee754_pow+0x306>
 80073e2:	bf00      	nop
 80073e4:	f3af 8000 	nop.w
 80073e8:	4a454eef 	.word	0x4a454eef
 80073ec:	3fca7e28 	.word	0x3fca7e28
 80073f0:	93c9db65 	.word	0x93c9db65
 80073f4:	3fcd864a 	.word	0x3fcd864a
 80073f8:	a91d4101 	.word	0xa91d4101
 80073fc:	3fd17460 	.word	0x3fd17460
 8007400:	518f264d 	.word	0x518f264d
 8007404:	3fd55555 	.word	0x3fd55555
 8007408:	db6fabff 	.word	0xdb6fabff
 800740c:	3fdb6db6 	.word	0x3fdb6db6
 8007410:	33333303 	.word	0x33333303
 8007414:	3fe33333 	.word	0x3fe33333
 8007418:	e0000000 	.word	0xe0000000
 800741c:	3feec709 	.word	0x3feec709
 8007420:	dc3a03fd 	.word	0xdc3a03fd
 8007424:	3feec709 	.word	0x3feec709
 8007428:	145b01f5 	.word	0x145b01f5
 800742c:	be3e2fe0 	.word	0xbe3e2fe0
 8007430:	00000000 	.word	0x00000000
 8007434:	3ff00000 	.word	0x3ff00000
 8007438:	7ff00000 	.word	0x7ff00000
 800743c:	43400000 	.word	0x43400000
 8007440:	0003988e 	.word	0x0003988e
 8007444:	000bb679 	.word	0x000bb679
 8007448:	08008a30 	.word	0x08008a30
 800744c:	3ff00000 	.word	0x3ff00000
 8007450:	40080000 	.word	0x40080000
 8007454:	08008a50 	.word	0x08008a50
 8007458:	08008a40 	.word	0x08008a40
 800745c:	a3b5      	add	r3, pc, #724	; (adr r3, 8007734 <__ieee754_pow+0xa3c>)
 800745e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007462:	4640      	mov	r0, r8
 8007464:	4649      	mov	r1, r9
 8007466:	f7f8 ff19 	bl	800029c <__adddf3>
 800746a:	4622      	mov	r2, r4
 800746c:	ec41 0b1a 	vmov	d10, r0, r1
 8007470:	462b      	mov	r3, r5
 8007472:	4630      	mov	r0, r6
 8007474:	4639      	mov	r1, r7
 8007476:	f7f8 ff0f 	bl	8000298 <__aeabi_dsub>
 800747a:	4602      	mov	r2, r0
 800747c:	460b      	mov	r3, r1
 800747e:	ec51 0b1a 	vmov	r0, r1, d10
 8007482:	f7f9 fb51 	bl	8000b28 <__aeabi_dcmpgt>
 8007486:	2800      	cmp	r0, #0
 8007488:	f47f adf8 	bne.w	800707c <__ieee754_pow+0x384>
 800748c:	4aa4      	ldr	r2, [pc, #656]	; (8007720 <__ieee754_pow+0xa28>)
 800748e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007492:	4293      	cmp	r3, r2
 8007494:	f340 810b 	ble.w	80076ae <__ieee754_pow+0x9b6>
 8007498:	151b      	asrs	r3, r3, #20
 800749a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800749e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80074a2:	fa4a f303 	asr.w	r3, sl, r3
 80074a6:	445b      	add	r3, fp
 80074a8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80074ac:	4e9d      	ldr	r6, [pc, #628]	; (8007724 <__ieee754_pow+0xa2c>)
 80074ae:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80074b2:	4116      	asrs	r6, r2
 80074b4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80074b8:	2000      	movs	r0, #0
 80074ba:	ea23 0106 	bic.w	r1, r3, r6
 80074be:	f1c2 0214 	rsb	r2, r2, #20
 80074c2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80074c6:	fa4a fa02 	asr.w	sl, sl, r2
 80074ca:	f1bb 0f00 	cmp.w	fp, #0
 80074ce:	4602      	mov	r2, r0
 80074d0:	460b      	mov	r3, r1
 80074d2:	4620      	mov	r0, r4
 80074d4:	4629      	mov	r1, r5
 80074d6:	bfb8      	it	lt
 80074d8:	f1ca 0a00 	rsblt	sl, sl, #0
 80074dc:	f7f8 fedc 	bl	8000298 <__aeabi_dsub>
 80074e0:	ec41 0b19 	vmov	d9, r0, r1
 80074e4:	4642      	mov	r2, r8
 80074e6:	464b      	mov	r3, r9
 80074e8:	ec51 0b19 	vmov	r0, r1, d9
 80074ec:	f7f8 fed6 	bl	800029c <__adddf3>
 80074f0:	2400      	movs	r4, #0
 80074f2:	a379      	add	r3, pc, #484	; (adr r3, 80076d8 <__ieee754_pow+0x9e0>)
 80074f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f8:	4620      	mov	r0, r4
 80074fa:	460d      	mov	r5, r1
 80074fc:	f7f9 f884 	bl	8000608 <__aeabi_dmul>
 8007500:	ec53 2b19 	vmov	r2, r3, d9
 8007504:	4606      	mov	r6, r0
 8007506:	460f      	mov	r7, r1
 8007508:	4620      	mov	r0, r4
 800750a:	4629      	mov	r1, r5
 800750c:	f7f8 fec4 	bl	8000298 <__aeabi_dsub>
 8007510:	4602      	mov	r2, r0
 8007512:	460b      	mov	r3, r1
 8007514:	4640      	mov	r0, r8
 8007516:	4649      	mov	r1, r9
 8007518:	f7f8 febe 	bl	8000298 <__aeabi_dsub>
 800751c:	a370      	add	r3, pc, #448	; (adr r3, 80076e0 <__ieee754_pow+0x9e8>)
 800751e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007522:	f7f9 f871 	bl	8000608 <__aeabi_dmul>
 8007526:	a370      	add	r3, pc, #448	; (adr r3, 80076e8 <__ieee754_pow+0x9f0>)
 8007528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800752c:	4680      	mov	r8, r0
 800752e:	4689      	mov	r9, r1
 8007530:	4620      	mov	r0, r4
 8007532:	4629      	mov	r1, r5
 8007534:	f7f9 f868 	bl	8000608 <__aeabi_dmul>
 8007538:	4602      	mov	r2, r0
 800753a:	460b      	mov	r3, r1
 800753c:	4640      	mov	r0, r8
 800753e:	4649      	mov	r1, r9
 8007540:	f7f8 feac 	bl	800029c <__adddf3>
 8007544:	4604      	mov	r4, r0
 8007546:	460d      	mov	r5, r1
 8007548:	4602      	mov	r2, r0
 800754a:	460b      	mov	r3, r1
 800754c:	4630      	mov	r0, r6
 800754e:	4639      	mov	r1, r7
 8007550:	f7f8 fea4 	bl	800029c <__adddf3>
 8007554:	4632      	mov	r2, r6
 8007556:	463b      	mov	r3, r7
 8007558:	4680      	mov	r8, r0
 800755a:	4689      	mov	r9, r1
 800755c:	f7f8 fe9c 	bl	8000298 <__aeabi_dsub>
 8007560:	4602      	mov	r2, r0
 8007562:	460b      	mov	r3, r1
 8007564:	4620      	mov	r0, r4
 8007566:	4629      	mov	r1, r5
 8007568:	f7f8 fe96 	bl	8000298 <__aeabi_dsub>
 800756c:	4642      	mov	r2, r8
 800756e:	4606      	mov	r6, r0
 8007570:	460f      	mov	r7, r1
 8007572:	464b      	mov	r3, r9
 8007574:	4640      	mov	r0, r8
 8007576:	4649      	mov	r1, r9
 8007578:	f7f9 f846 	bl	8000608 <__aeabi_dmul>
 800757c:	a35c      	add	r3, pc, #368	; (adr r3, 80076f0 <__ieee754_pow+0x9f8>)
 800757e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007582:	4604      	mov	r4, r0
 8007584:	460d      	mov	r5, r1
 8007586:	f7f9 f83f 	bl	8000608 <__aeabi_dmul>
 800758a:	a35b      	add	r3, pc, #364	; (adr r3, 80076f8 <__ieee754_pow+0xa00>)
 800758c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007590:	f7f8 fe82 	bl	8000298 <__aeabi_dsub>
 8007594:	4622      	mov	r2, r4
 8007596:	462b      	mov	r3, r5
 8007598:	f7f9 f836 	bl	8000608 <__aeabi_dmul>
 800759c:	a358      	add	r3, pc, #352	; (adr r3, 8007700 <__ieee754_pow+0xa08>)
 800759e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a2:	f7f8 fe7b 	bl	800029c <__adddf3>
 80075a6:	4622      	mov	r2, r4
 80075a8:	462b      	mov	r3, r5
 80075aa:	f7f9 f82d 	bl	8000608 <__aeabi_dmul>
 80075ae:	a356      	add	r3, pc, #344	; (adr r3, 8007708 <__ieee754_pow+0xa10>)
 80075b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b4:	f7f8 fe70 	bl	8000298 <__aeabi_dsub>
 80075b8:	4622      	mov	r2, r4
 80075ba:	462b      	mov	r3, r5
 80075bc:	f7f9 f824 	bl	8000608 <__aeabi_dmul>
 80075c0:	a353      	add	r3, pc, #332	; (adr r3, 8007710 <__ieee754_pow+0xa18>)
 80075c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c6:	f7f8 fe69 	bl	800029c <__adddf3>
 80075ca:	4622      	mov	r2, r4
 80075cc:	462b      	mov	r3, r5
 80075ce:	f7f9 f81b 	bl	8000608 <__aeabi_dmul>
 80075d2:	4602      	mov	r2, r0
 80075d4:	460b      	mov	r3, r1
 80075d6:	4640      	mov	r0, r8
 80075d8:	4649      	mov	r1, r9
 80075da:	f7f8 fe5d 	bl	8000298 <__aeabi_dsub>
 80075de:	4604      	mov	r4, r0
 80075e0:	460d      	mov	r5, r1
 80075e2:	4602      	mov	r2, r0
 80075e4:	460b      	mov	r3, r1
 80075e6:	4640      	mov	r0, r8
 80075e8:	4649      	mov	r1, r9
 80075ea:	f7f9 f80d 	bl	8000608 <__aeabi_dmul>
 80075ee:	2200      	movs	r2, #0
 80075f0:	ec41 0b19 	vmov	d9, r0, r1
 80075f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80075f8:	4620      	mov	r0, r4
 80075fa:	4629      	mov	r1, r5
 80075fc:	f7f8 fe4c 	bl	8000298 <__aeabi_dsub>
 8007600:	4602      	mov	r2, r0
 8007602:	460b      	mov	r3, r1
 8007604:	ec51 0b19 	vmov	r0, r1, d9
 8007608:	f7f9 f928 	bl	800085c <__aeabi_ddiv>
 800760c:	4632      	mov	r2, r6
 800760e:	4604      	mov	r4, r0
 8007610:	460d      	mov	r5, r1
 8007612:	463b      	mov	r3, r7
 8007614:	4640      	mov	r0, r8
 8007616:	4649      	mov	r1, r9
 8007618:	f7f8 fff6 	bl	8000608 <__aeabi_dmul>
 800761c:	4632      	mov	r2, r6
 800761e:	463b      	mov	r3, r7
 8007620:	f7f8 fe3c 	bl	800029c <__adddf3>
 8007624:	4602      	mov	r2, r0
 8007626:	460b      	mov	r3, r1
 8007628:	4620      	mov	r0, r4
 800762a:	4629      	mov	r1, r5
 800762c:	f7f8 fe34 	bl	8000298 <__aeabi_dsub>
 8007630:	4642      	mov	r2, r8
 8007632:	464b      	mov	r3, r9
 8007634:	f7f8 fe30 	bl	8000298 <__aeabi_dsub>
 8007638:	460b      	mov	r3, r1
 800763a:	4602      	mov	r2, r0
 800763c:	493a      	ldr	r1, [pc, #232]	; (8007728 <__ieee754_pow+0xa30>)
 800763e:	2000      	movs	r0, #0
 8007640:	f7f8 fe2a 	bl	8000298 <__aeabi_dsub>
 8007644:	e9cd 0100 	strd	r0, r1, [sp]
 8007648:	9b01      	ldr	r3, [sp, #4]
 800764a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800764e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007652:	da2f      	bge.n	80076b4 <__ieee754_pow+0x9bc>
 8007654:	4650      	mov	r0, sl
 8007656:	ed9d 0b00 	vldr	d0, [sp]
 800765a:	f001 f921 	bl	80088a0 <scalbn>
 800765e:	ec51 0b10 	vmov	r0, r1, d0
 8007662:	ec53 2b18 	vmov	r2, r3, d8
 8007666:	f7ff bbe0 	b.w	8006e2a <__ieee754_pow+0x132>
 800766a:	4b30      	ldr	r3, [pc, #192]	; (800772c <__ieee754_pow+0xa34>)
 800766c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007670:	429e      	cmp	r6, r3
 8007672:	f77f af0b 	ble.w	800748c <__ieee754_pow+0x794>
 8007676:	4b2e      	ldr	r3, [pc, #184]	; (8007730 <__ieee754_pow+0xa38>)
 8007678:	440b      	add	r3, r1
 800767a:	4303      	orrs	r3, r0
 800767c:	d00b      	beq.n	8007696 <__ieee754_pow+0x99e>
 800767e:	a326      	add	r3, pc, #152	; (adr r3, 8007718 <__ieee754_pow+0xa20>)
 8007680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007684:	ec51 0b18 	vmov	r0, r1, d8
 8007688:	f7f8 ffbe 	bl	8000608 <__aeabi_dmul>
 800768c:	a322      	add	r3, pc, #136	; (adr r3, 8007718 <__ieee754_pow+0xa20>)
 800768e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007692:	f7ff bbca 	b.w	8006e2a <__ieee754_pow+0x132>
 8007696:	4622      	mov	r2, r4
 8007698:	462b      	mov	r3, r5
 800769a:	f7f8 fdfd 	bl	8000298 <__aeabi_dsub>
 800769e:	4642      	mov	r2, r8
 80076a0:	464b      	mov	r3, r9
 80076a2:	f7f9 fa37 	bl	8000b14 <__aeabi_dcmpge>
 80076a6:	2800      	cmp	r0, #0
 80076a8:	f43f aef0 	beq.w	800748c <__ieee754_pow+0x794>
 80076ac:	e7e7      	b.n	800767e <__ieee754_pow+0x986>
 80076ae:	f04f 0a00 	mov.w	sl, #0
 80076b2:	e717      	b.n	80074e4 <__ieee754_pow+0x7ec>
 80076b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80076b8:	4619      	mov	r1, r3
 80076ba:	e7d2      	b.n	8007662 <__ieee754_pow+0x96a>
 80076bc:	491a      	ldr	r1, [pc, #104]	; (8007728 <__ieee754_pow+0xa30>)
 80076be:	2000      	movs	r0, #0
 80076c0:	f7ff bb9e 	b.w	8006e00 <__ieee754_pow+0x108>
 80076c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076c8:	f7ff bb9a 	b.w	8006e00 <__ieee754_pow+0x108>
 80076cc:	9000      	str	r0, [sp, #0]
 80076ce:	f7ff bb76 	b.w	8006dbe <__ieee754_pow+0xc6>
 80076d2:	2100      	movs	r1, #0
 80076d4:	f7ff bb60 	b.w	8006d98 <__ieee754_pow+0xa0>
 80076d8:	00000000 	.word	0x00000000
 80076dc:	3fe62e43 	.word	0x3fe62e43
 80076e0:	fefa39ef 	.word	0xfefa39ef
 80076e4:	3fe62e42 	.word	0x3fe62e42
 80076e8:	0ca86c39 	.word	0x0ca86c39
 80076ec:	be205c61 	.word	0xbe205c61
 80076f0:	72bea4d0 	.word	0x72bea4d0
 80076f4:	3e663769 	.word	0x3e663769
 80076f8:	c5d26bf1 	.word	0xc5d26bf1
 80076fc:	3ebbbd41 	.word	0x3ebbbd41
 8007700:	af25de2c 	.word	0xaf25de2c
 8007704:	3f11566a 	.word	0x3f11566a
 8007708:	16bebd93 	.word	0x16bebd93
 800770c:	3f66c16c 	.word	0x3f66c16c
 8007710:	5555553e 	.word	0x5555553e
 8007714:	3fc55555 	.word	0x3fc55555
 8007718:	c2f8f359 	.word	0xc2f8f359
 800771c:	01a56e1f 	.word	0x01a56e1f
 8007720:	3fe00000 	.word	0x3fe00000
 8007724:	000fffff 	.word	0x000fffff
 8007728:	3ff00000 	.word	0x3ff00000
 800772c:	4090cbff 	.word	0x4090cbff
 8007730:	3f6f3400 	.word	0x3f6f3400
 8007734:	652b82fe 	.word	0x652b82fe
 8007738:	3c971547 	.word	0x3c971547
 800773c:	00000000 	.word	0x00000000

08007740 <__ieee754_rem_pio2>:
 8007740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007744:	ed2d 8b02 	vpush	{d8}
 8007748:	ec55 4b10 	vmov	r4, r5, d0
 800774c:	4bca      	ldr	r3, [pc, #808]	; (8007a78 <__ieee754_rem_pio2+0x338>)
 800774e:	b08b      	sub	sp, #44	; 0x2c
 8007750:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8007754:	4598      	cmp	r8, r3
 8007756:	4682      	mov	sl, r0
 8007758:	9502      	str	r5, [sp, #8]
 800775a:	dc08      	bgt.n	800776e <__ieee754_rem_pio2+0x2e>
 800775c:	2200      	movs	r2, #0
 800775e:	2300      	movs	r3, #0
 8007760:	ed80 0b00 	vstr	d0, [r0]
 8007764:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007768:	f04f 0b00 	mov.w	fp, #0
 800776c:	e028      	b.n	80077c0 <__ieee754_rem_pio2+0x80>
 800776e:	4bc3      	ldr	r3, [pc, #780]	; (8007a7c <__ieee754_rem_pio2+0x33c>)
 8007770:	4598      	cmp	r8, r3
 8007772:	dc78      	bgt.n	8007866 <__ieee754_rem_pio2+0x126>
 8007774:	9b02      	ldr	r3, [sp, #8]
 8007776:	4ec2      	ldr	r6, [pc, #776]	; (8007a80 <__ieee754_rem_pio2+0x340>)
 8007778:	2b00      	cmp	r3, #0
 800777a:	ee10 0a10 	vmov	r0, s0
 800777e:	a3b0      	add	r3, pc, #704	; (adr r3, 8007a40 <__ieee754_rem_pio2+0x300>)
 8007780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007784:	4629      	mov	r1, r5
 8007786:	dd39      	ble.n	80077fc <__ieee754_rem_pio2+0xbc>
 8007788:	f7f8 fd86 	bl	8000298 <__aeabi_dsub>
 800778c:	45b0      	cmp	r8, r6
 800778e:	4604      	mov	r4, r0
 8007790:	460d      	mov	r5, r1
 8007792:	d01b      	beq.n	80077cc <__ieee754_rem_pio2+0x8c>
 8007794:	a3ac      	add	r3, pc, #688	; (adr r3, 8007a48 <__ieee754_rem_pio2+0x308>)
 8007796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779a:	f7f8 fd7d 	bl	8000298 <__aeabi_dsub>
 800779e:	4602      	mov	r2, r0
 80077a0:	460b      	mov	r3, r1
 80077a2:	e9ca 2300 	strd	r2, r3, [sl]
 80077a6:	4620      	mov	r0, r4
 80077a8:	4629      	mov	r1, r5
 80077aa:	f7f8 fd75 	bl	8000298 <__aeabi_dsub>
 80077ae:	a3a6      	add	r3, pc, #664	; (adr r3, 8007a48 <__ieee754_rem_pio2+0x308>)
 80077b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b4:	f7f8 fd70 	bl	8000298 <__aeabi_dsub>
 80077b8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80077bc:	f04f 0b01 	mov.w	fp, #1
 80077c0:	4658      	mov	r0, fp
 80077c2:	b00b      	add	sp, #44	; 0x2c
 80077c4:	ecbd 8b02 	vpop	{d8}
 80077c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077cc:	a3a0      	add	r3, pc, #640	; (adr r3, 8007a50 <__ieee754_rem_pio2+0x310>)
 80077ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d2:	f7f8 fd61 	bl	8000298 <__aeabi_dsub>
 80077d6:	a3a0      	add	r3, pc, #640	; (adr r3, 8007a58 <__ieee754_rem_pio2+0x318>)
 80077d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077dc:	4604      	mov	r4, r0
 80077de:	460d      	mov	r5, r1
 80077e0:	f7f8 fd5a 	bl	8000298 <__aeabi_dsub>
 80077e4:	4602      	mov	r2, r0
 80077e6:	460b      	mov	r3, r1
 80077e8:	e9ca 2300 	strd	r2, r3, [sl]
 80077ec:	4620      	mov	r0, r4
 80077ee:	4629      	mov	r1, r5
 80077f0:	f7f8 fd52 	bl	8000298 <__aeabi_dsub>
 80077f4:	a398      	add	r3, pc, #608	; (adr r3, 8007a58 <__ieee754_rem_pio2+0x318>)
 80077f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077fa:	e7db      	b.n	80077b4 <__ieee754_rem_pio2+0x74>
 80077fc:	f7f8 fd4e 	bl	800029c <__adddf3>
 8007800:	45b0      	cmp	r8, r6
 8007802:	4604      	mov	r4, r0
 8007804:	460d      	mov	r5, r1
 8007806:	d016      	beq.n	8007836 <__ieee754_rem_pio2+0xf6>
 8007808:	a38f      	add	r3, pc, #572	; (adr r3, 8007a48 <__ieee754_rem_pio2+0x308>)
 800780a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800780e:	f7f8 fd45 	bl	800029c <__adddf3>
 8007812:	4602      	mov	r2, r0
 8007814:	460b      	mov	r3, r1
 8007816:	e9ca 2300 	strd	r2, r3, [sl]
 800781a:	4620      	mov	r0, r4
 800781c:	4629      	mov	r1, r5
 800781e:	f7f8 fd3b 	bl	8000298 <__aeabi_dsub>
 8007822:	a389      	add	r3, pc, #548	; (adr r3, 8007a48 <__ieee754_rem_pio2+0x308>)
 8007824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007828:	f7f8 fd38 	bl	800029c <__adddf3>
 800782c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8007830:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007834:	e7c4      	b.n	80077c0 <__ieee754_rem_pio2+0x80>
 8007836:	a386      	add	r3, pc, #536	; (adr r3, 8007a50 <__ieee754_rem_pio2+0x310>)
 8007838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783c:	f7f8 fd2e 	bl	800029c <__adddf3>
 8007840:	a385      	add	r3, pc, #532	; (adr r3, 8007a58 <__ieee754_rem_pio2+0x318>)
 8007842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007846:	4604      	mov	r4, r0
 8007848:	460d      	mov	r5, r1
 800784a:	f7f8 fd27 	bl	800029c <__adddf3>
 800784e:	4602      	mov	r2, r0
 8007850:	460b      	mov	r3, r1
 8007852:	e9ca 2300 	strd	r2, r3, [sl]
 8007856:	4620      	mov	r0, r4
 8007858:	4629      	mov	r1, r5
 800785a:	f7f8 fd1d 	bl	8000298 <__aeabi_dsub>
 800785e:	a37e      	add	r3, pc, #504	; (adr r3, 8007a58 <__ieee754_rem_pio2+0x318>)
 8007860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007864:	e7e0      	b.n	8007828 <__ieee754_rem_pio2+0xe8>
 8007866:	4b87      	ldr	r3, [pc, #540]	; (8007a84 <__ieee754_rem_pio2+0x344>)
 8007868:	4598      	cmp	r8, r3
 800786a:	f300 80d9 	bgt.w	8007a20 <__ieee754_rem_pio2+0x2e0>
 800786e:	f000 feed 	bl	800864c <fabs>
 8007872:	ec55 4b10 	vmov	r4, r5, d0
 8007876:	ee10 0a10 	vmov	r0, s0
 800787a:	a379      	add	r3, pc, #484	; (adr r3, 8007a60 <__ieee754_rem_pio2+0x320>)
 800787c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007880:	4629      	mov	r1, r5
 8007882:	f7f8 fec1 	bl	8000608 <__aeabi_dmul>
 8007886:	4b80      	ldr	r3, [pc, #512]	; (8007a88 <__ieee754_rem_pio2+0x348>)
 8007888:	2200      	movs	r2, #0
 800788a:	f7f8 fd07 	bl	800029c <__adddf3>
 800788e:	f7f9 f96b 	bl	8000b68 <__aeabi_d2iz>
 8007892:	4683      	mov	fp, r0
 8007894:	f7f8 fe4e 	bl	8000534 <__aeabi_i2d>
 8007898:	4602      	mov	r2, r0
 800789a:	460b      	mov	r3, r1
 800789c:	ec43 2b18 	vmov	d8, r2, r3
 80078a0:	a367      	add	r3, pc, #412	; (adr r3, 8007a40 <__ieee754_rem_pio2+0x300>)
 80078a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a6:	f7f8 feaf 	bl	8000608 <__aeabi_dmul>
 80078aa:	4602      	mov	r2, r0
 80078ac:	460b      	mov	r3, r1
 80078ae:	4620      	mov	r0, r4
 80078b0:	4629      	mov	r1, r5
 80078b2:	f7f8 fcf1 	bl	8000298 <__aeabi_dsub>
 80078b6:	a364      	add	r3, pc, #400	; (adr r3, 8007a48 <__ieee754_rem_pio2+0x308>)
 80078b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078bc:	4606      	mov	r6, r0
 80078be:	460f      	mov	r7, r1
 80078c0:	ec51 0b18 	vmov	r0, r1, d8
 80078c4:	f7f8 fea0 	bl	8000608 <__aeabi_dmul>
 80078c8:	f1bb 0f1f 	cmp.w	fp, #31
 80078cc:	4604      	mov	r4, r0
 80078ce:	460d      	mov	r5, r1
 80078d0:	dc0d      	bgt.n	80078ee <__ieee754_rem_pio2+0x1ae>
 80078d2:	4b6e      	ldr	r3, [pc, #440]	; (8007a8c <__ieee754_rem_pio2+0x34c>)
 80078d4:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 80078d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078dc:	4543      	cmp	r3, r8
 80078de:	d006      	beq.n	80078ee <__ieee754_rem_pio2+0x1ae>
 80078e0:	4622      	mov	r2, r4
 80078e2:	462b      	mov	r3, r5
 80078e4:	4630      	mov	r0, r6
 80078e6:	4639      	mov	r1, r7
 80078e8:	f7f8 fcd6 	bl	8000298 <__aeabi_dsub>
 80078ec:	e00f      	b.n	800790e <__ieee754_rem_pio2+0x1ce>
 80078ee:	462b      	mov	r3, r5
 80078f0:	4622      	mov	r2, r4
 80078f2:	4630      	mov	r0, r6
 80078f4:	4639      	mov	r1, r7
 80078f6:	f7f8 fccf 	bl	8000298 <__aeabi_dsub>
 80078fa:	ea4f 5328 	mov.w	r3, r8, asr #20
 80078fe:	9303      	str	r3, [sp, #12]
 8007900:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007904:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8007908:	f1b8 0f10 	cmp.w	r8, #16
 800790c:	dc02      	bgt.n	8007914 <__ieee754_rem_pio2+0x1d4>
 800790e:	e9ca 0100 	strd	r0, r1, [sl]
 8007912:	e039      	b.n	8007988 <__ieee754_rem_pio2+0x248>
 8007914:	a34e      	add	r3, pc, #312	; (adr r3, 8007a50 <__ieee754_rem_pio2+0x310>)
 8007916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791a:	ec51 0b18 	vmov	r0, r1, d8
 800791e:	f7f8 fe73 	bl	8000608 <__aeabi_dmul>
 8007922:	4604      	mov	r4, r0
 8007924:	460d      	mov	r5, r1
 8007926:	4602      	mov	r2, r0
 8007928:	460b      	mov	r3, r1
 800792a:	4630      	mov	r0, r6
 800792c:	4639      	mov	r1, r7
 800792e:	f7f8 fcb3 	bl	8000298 <__aeabi_dsub>
 8007932:	4602      	mov	r2, r0
 8007934:	460b      	mov	r3, r1
 8007936:	4680      	mov	r8, r0
 8007938:	4689      	mov	r9, r1
 800793a:	4630      	mov	r0, r6
 800793c:	4639      	mov	r1, r7
 800793e:	f7f8 fcab 	bl	8000298 <__aeabi_dsub>
 8007942:	4622      	mov	r2, r4
 8007944:	462b      	mov	r3, r5
 8007946:	f7f8 fca7 	bl	8000298 <__aeabi_dsub>
 800794a:	a343      	add	r3, pc, #268	; (adr r3, 8007a58 <__ieee754_rem_pio2+0x318>)
 800794c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007950:	4604      	mov	r4, r0
 8007952:	460d      	mov	r5, r1
 8007954:	ec51 0b18 	vmov	r0, r1, d8
 8007958:	f7f8 fe56 	bl	8000608 <__aeabi_dmul>
 800795c:	4622      	mov	r2, r4
 800795e:	462b      	mov	r3, r5
 8007960:	f7f8 fc9a 	bl	8000298 <__aeabi_dsub>
 8007964:	4602      	mov	r2, r0
 8007966:	460b      	mov	r3, r1
 8007968:	4604      	mov	r4, r0
 800796a:	460d      	mov	r5, r1
 800796c:	4640      	mov	r0, r8
 800796e:	4649      	mov	r1, r9
 8007970:	f7f8 fc92 	bl	8000298 <__aeabi_dsub>
 8007974:	9a03      	ldr	r2, [sp, #12]
 8007976:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800797a:	1ad3      	subs	r3, r2, r3
 800797c:	2b31      	cmp	r3, #49	; 0x31
 800797e:	dc24      	bgt.n	80079ca <__ieee754_rem_pio2+0x28a>
 8007980:	e9ca 0100 	strd	r0, r1, [sl]
 8007984:	4646      	mov	r6, r8
 8007986:	464f      	mov	r7, r9
 8007988:	e9da 8900 	ldrd	r8, r9, [sl]
 800798c:	4630      	mov	r0, r6
 800798e:	4642      	mov	r2, r8
 8007990:	464b      	mov	r3, r9
 8007992:	4639      	mov	r1, r7
 8007994:	f7f8 fc80 	bl	8000298 <__aeabi_dsub>
 8007998:	462b      	mov	r3, r5
 800799a:	4622      	mov	r2, r4
 800799c:	f7f8 fc7c 	bl	8000298 <__aeabi_dsub>
 80079a0:	9b02      	ldr	r3, [sp, #8]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80079a8:	f6bf af0a 	bge.w	80077c0 <__ieee754_rem_pio2+0x80>
 80079ac:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80079b0:	f8ca 3004 	str.w	r3, [sl, #4]
 80079b4:	f8ca 8000 	str.w	r8, [sl]
 80079b8:	f8ca 0008 	str.w	r0, [sl, #8]
 80079bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80079c0:	f8ca 300c 	str.w	r3, [sl, #12]
 80079c4:	f1cb 0b00 	rsb	fp, fp, #0
 80079c8:	e6fa      	b.n	80077c0 <__ieee754_rem_pio2+0x80>
 80079ca:	a327      	add	r3, pc, #156	; (adr r3, 8007a68 <__ieee754_rem_pio2+0x328>)
 80079cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d0:	ec51 0b18 	vmov	r0, r1, d8
 80079d4:	f7f8 fe18 	bl	8000608 <__aeabi_dmul>
 80079d8:	4604      	mov	r4, r0
 80079da:	460d      	mov	r5, r1
 80079dc:	4602      	mov	r2, r0
 80079de:	460b      	mov	r3, r1
 80079e0:	4640      	mov	r0, r8
 80079e2:	4649      	mov	r1, r9
 80079e4:	f7f8 fc58 	bl	8000298 <__aeabi_dsub>
 80079e8:	4602      	mov	r2, r0
 80079ea:	460b      	mov	r3, r1
 80079ec:	4606      	mov	r6, r0
 80079ee:	460f      	mov	r7, r1
 80079f0:	4640      	mov	r0, r8
 80079f2:	4649      	mov	r1, r9
 80079f4:	f7f8 fc50 	bl	8000298 <__aeabi_dsub>
 80079f8:	4622      	mov	r2, r4
 80079fa:	462b      	mov	r3, r5
 80079fc:	f7f8 fc4c 	bl	8000298 <__aeabi_dsub>
 8007a00:	a31b      	add	r3, pc, #108	; (adr r3, 8007a70 <__ieee754_rem_pio2+0x330>)
 8007a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a06:	4604      	mov	r4, r0
 8007a08:	460d      	mov	r5, r1
 8007a0a:	ec51 0b18 	vmov	r0, r1, d8
 8007a0e:	f7f8 fdfb 	bl	8000608 <__aeabi_dmul>
 8007a12:	4622      	mov	r2, r4
 8007a14:	462b      	mov	r3, r5
 8007a16:	f7f8 fc3f 	bl	8000298 <__aeabi_dsub>
 8007a1a:	4604      	mov	r4, r0
 8007a1c:	460d      	mov	r5, r1
 8007a1e:	e75f      	b.n	80078e0 <__ieee754_rem_pio2+0x1a0>
 8007a20:	4b1b      	ldr	r3, [pc, #108]	; (8007a90 <__ieee754_rem_pio2+0x350>)
 8007a22:	4598      	cmp	r8, r3
 8007a24:	dd36      	ble.n	8007a94 <__ieee754_rem_pio2+0x354>
 8007a26:	ee10 2a10 	vmov	r2, s0
 8007a2a:	462b      	mov	r3, r5
 8007a2c:	4620      	mov	r0, r4
 8007a2e:	4629      	mov	r1, r5
 8007a30:	f7f8 fc32 	bl	8000298 <__aeabi_dsub>
 8007a34:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007a38:	e9ca 0100 	strd	r0, r1, [sl]
 8007a3c:	e694      	b.n	8007768 <__ieee754_rem_pio2+0x28>
 8007a3e:	bf00      	nop
 8007a40:	54400000 	.word	0x54400000
 8007a44:	3ff921fb 	.word	0x3ff921fb
 8007a48:	1a626331 	.word	0x1a626331
 8007a4c:	3dd0b461 	.word	0x3dd0b461
 8007a50:	1a600000 	.word	0x1a600000
 8007a54:	3dd0b461 	.word	0x3dd0b461
 8007a58:	2e037073 	.word	0x2e037073
 8007a5c:	3ba3198a 	.word	0x3ba3198a
 8007a60:	6dc9c883 	.word	0x6dc9c883
 8007a64:	3fe45f30 	.word	0x3fe45f30
 8007a68:	2e000000 	.word	0x2e000000
 8007a6c:	3ba3198a 	.word	0x3ba3198a
 8007a70:	252049c1 	.word	0x252049c1
 8007a74:	397b839a 	.word	0x397b839a
 8007a78:	3fe921fb 	.word	0x3fe921fb
 8007a7c:	4002d97b 	.word	0x4002d97b
 8007a80:	3ff921fb 	.word	0x3ff921fb
 8007a84:	413921fb 	.word	0x413921fb
 8007a88:	3fe00000 	.word	0x3fe00000
 8007a8c:	08008a60 	.word	0x08008a60
 8007a90:	7fefffff 	.word	0x7fefffff
 8007a94:	ea4f 5428 	mov.w	r4, r8, asr #20
 8007a98:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8007a9c:	ee10 0a10 	vmov	r0, s0
 8007aa0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8007aa4:	ee10 6a10 	vmov	r6, s0
 8007aa8:	460f      	mov	r7, r1
 8007aaa:	f7f9 f85d 	bl	8000b68 <__aeabi_d2iz>
 8007aae:	f7f8 fd41 	bl	8000534 <__aeabi_i2d>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	4630      	mov	r0, r6
 8007ab8:	4639      	mov	r1, r7
 8007aba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007abe:	f7f8 fbeb 	bl	8000298 <__aeabi_dsub>
 8007ac2:	4b22      	ldr	r3, [pc, #136]	; (8007b4c <__ieee754_rem_pio2+0x40c>)
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f7f8 fd9f 	bl	8000608 <__aeabi_dmul>
 8007aca:	460f      	mov	r7, r1
 8007acc:	4606      	mov	r6, r0
 8007ace:	f7f9 f84b 	bl	8000b68 <__aeabi_d2iz>
 8007ad2:	f7f8 fd2f 	bl	8000534 <__aeabi_i2d>
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	460b      	mov	r3, r1
 8007ada:	4630      	mov	r0, r6
 8007adc:	4639      	mov	r1, r7
 8007ade:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007ae2:	f7f8 fbd9 	bl	8000298 <__aeabi_dsub>
 8007ae6:	4b19      	ldr	r3, [pc, #100]	; (8007b4c <__ieee754_rem_pio2+0x40c>)
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f7f8 fd8d 	bl	8000608 <__aeabi_dmul>
 8007aee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007af2:	ad04      	add	r5, sp, #16
 8007af4:	f04f 0803 	mov.w	r8, #3
 8007af8:	46a9      	mov	r9, r5
 8007afa:	2600      	movs	r6, #0
 8007afc:	2700      	movs	r7, #0
 8007afe:	4632      	mov	r2, r6
 8007b00:	463b      	mov	r3, r7
 8007b02:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8007b06:	46c3      	mov	fp, r8
 8007b08:	3d08      	subs	r5, #8
 8007b0a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8007b0e:	f7f8 ffe3 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b12:	2800      	cmp	r0, #0
 8007b14:	d1f3      	bne.n	8007afe <__ieee754_rem_pio2+0x3be>
 8007b16:	4b0e      	ldr	r3, [pc, #56]	; (8007b50 <__ieee754_rem_pio2+0x410>)
 8007b18:	9301      	str	r3, [sp, #4]
 8007b1a:	2302      	movs	r3, #2
 8007b1c:	9300      	str	r3, [sp, #0]
 8007b1e:	4622      	mov	r2, r4
 8007b20:	465b      	mov	r3, fp
 8007b22:	4651      	mov	r1, sl
 8007b24:	4648      	mov	r0, r9
 8007b26:	f000 f993 	bl	8007e50 <__kernel_rem_pio2>
 8007b2a:	9b02      	ldr	r3, [sp, #8]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	4683      	mov	fp, r0
 8007b30:	f6bf ae46 	bge.w	80077c0 <__ieee754_rem_pio2+0x80>
 8007b34:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007b38:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007b3c:	f8ca 3004 	str.w	r3, [sl, #4]
 8007b40:	f8da 300c 	ldr.w	r3, [sl, #12]
 8007b44:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007b48:	e73a      	b.n	80079c0 <__ieee754_rem_pio2+0x280>
 8007b4a:	bf00      	nop
 8007b4c:	41700000 	.word	0x41700000
 8007b50:	08008ae0 	.word	0x08008ae0

08007b54 <__ieee754_sqrt>:
 8007b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b58:	ec55 4b10 	vmov	r4, r5, d0
 8007b5c:	4e56      	ldr	r6, [pc, #344]	; (8007cb8 <__ieee754_sqrt+0x164>)
 8007b5e:	43ae      	bics	r6, r5
 8007b60:	ee10 0a10 	vmov	r0, s0
 8007b64:	ee10 3a10 	vmov	r3, s0
 8007b68:	4629      	mov	r1, r5
 8007b6a:	462a      	mov	r2, r5
 8007b6c:	d110      	bne.n	8007b90 <__ieee754_sqrt+0x3c>
 8007b6e:	ee10 2a10 	vmov	r2, s0
 8007b72:	462b      	mov	r3, r5
 8007b74:	f7f8 fd48 	bl	8000608 <__aeabi_dmul>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	460b      	mov	r3, r1
 8007b7c:	4620      	mov	r0, r4
 8007b7e:	4629      	mov	r1, r5
 8007b80:	f7f8 fb8c 	bl	800029c <__adddf3>
 8007b84:	4604      	mov	r4, r0
 8007b86:	460d      	mov	r5, r1
 8007b88:	ec45 4b10 	vmov	d0, r4, r5
 8007b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b90:	2d00      	cmp	r5, #0
 8007b92:	dc10      	bgt.n	8007bb6 <__ieee754_sqrt+0x62>
 8007b94:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007b98:	4330      	orrs	r0, r6
 8007b9a:	d0f5      	beq.n	8007b88 <__ieee754_sqrt+0x34>
 8007b9c:	b15d      	cbz	r5, 8007bb6 <__ieee754_sqrt+0x62>
 8007b9e:	ee10 2a10 	vmov	r2, s0
 8007ba2:	462b      	mov	r3, r5
 8007ba4:	ee10 0a10 	vmov	r0, s0
 8007ba8:	f7f8 fb76 	bl	8000298 <__aeabi_dsub>
 8007bac:	4602      	mov	r2, r0
 8007bae:	460b      	mov	r3, r1
 8007bb0:	f7f8 fe54 	bl	800085c <__aeabi_ddiv>
 8007bb4:	e7e6      	b.n	8007b84 <__ieee754_sqrt+0x30>
 8007bb6:	1509      	asrs	r1, r1, #20
 8007bb8:	d076      	beq.n	8007ca8 <__ieee754_sqrt+0x154>
 8007bba:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007bbe:	07ce      	lsls	r6, r1, #31
 8007bc0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8007bc4:	bf5e      	ittt	pl
 8007bc6:	0fda      	lsrpl	r2, r3, #31
 8007bc8:	005b      	lslpl	r3, r3, #1
 8007bca:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8007bce:	0fda      	lsrs	r2, r3, #31
 8007bd0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8007bd4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8007bd8:	2000      	movs	r0, #0
 8007bda:	106d      	asrs	r5, r5, #1
 8007bdc:	005b      	lsls	r3, r3, #1
 8007bde:	f04f 0e16 	mov.w	lr, #22
 8007be2:	4684      	mov	ip, r0
 8007be4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007be8:	eb0c 0401 	add.w	r4, ip, r1
 8007bec:	4294      	cmp	r4, r2
 8007bee:	bfde      	ittt	le
 8007bf0:	1b12      	suble	r2, r2, r4
 8007bf2:	eb04 0c01 	addle.w	ip, r4, r1
 8007bf6:	1840      	addle	r0, r0, r1
 8007bf8:	0052      	lsls	r2, r2, #1
 8007bfa:	f1be 0e01 	subs.w	lr, lr, #1
 8007bfe:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007c02:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007c06:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007c0a:	d1ed      	bne.n	8007be8 <__ieee754_sqrt+0x94>
 8007c0c:	4671      	mov	r1, lr
 8007c0e:	2720      	movs	r7, #32
 8007c10:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007c14:	4562      	cmp	r2, ip
 8007c16:	eb04 060e 	add.w	r6, r4, lr
 8007c1a:	dc02      	bgt.n	8007c22 <__ieee754_sqrt+0xce>
 8007c1c:	d113      	bne.n	8007c46 <__ieee754_sqrt+0xf2>
 8007c1e:	429e      	cmp	r6, r3
 8007c20:	d811      	bhi.n	8007c46 <__ieee754_sqrt+0xf2>
 8007c22:	2e00      	cmp	r6, #0
 8007c24:	eb06 0e04 	add.w	lr, r6, r4
 8007c28:	da43      	bge.n	8007cb2 <__ieee754_sqrt+0x15e>
 8007c2a:	f1be 0f00 	cmp.w	lr, #0
 8007c2e:	db40      	blt.n	8007cb2 <__ieee754_sqrt+0x15e>
 8007c30:	f10c 0801 	add.w	r8, ip, #1
 8007c34:	eba2 020c 	sub.w	r2, r2, ip
 8007c38:	429e      	cmp	r6, r3
 8007c3a:	bf88      	it	hi
 8007c3c:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8007c40:	1b9b      	subs	r3, r3, r6
 8007c42:	4421      	add	r1, r4
 8007c44:	46c4      	mov	ip, r8
 8007c46:	0052      	lsls	r2, r2, #1
 8007c48:	3f01      	subs	r7, #1
 8007c4a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007c4e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007c52:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007c56:	d1dd      	bne.n	8007c14 <__ieee754_sqrt+0xc0>
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	d006      	beq.n	8007c6a <__ieee754_sqrt+0x116>
 8007c5c:	1c4c      	adds	r4, r1, #1
 8007c5e:	bf13      	iteet	ne
 8007c60:	3101      	addne	r1, #1
 8007c62:	3001      	addeq	r0, #1
 8007c64:	4639      	moveq	r1, r7
 8007c66:	f021 0101 	bicne.w	r1, r1, #1
 8007c6a:	1043      	asrs	r3, r0, #1
 8007c6c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007c70:	0849      	lsrs	r1, r1, #1
 8007c72:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007c76:	07c2      	lsls	r2, r0, #31
 8007c78:	bf48      	it	mi
 8007c7a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8007c7e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8007c82:	460c      	mov	r4, r1
 8007c84:	463d      	mov	r5, r7
 8007c86:	e77f      	b.n	8007b88 <__ieee754_sqrt+0x34>
 8007c88:	0ada      	lsrs	r2, r3, #11
 8007c8a:	3815      	subs	r0, #21
 8007c8c:	055b      	lsls	r3, r3, #21
 8007c8e:	2a00      	cmp	r2, #0
 8007c90:	d0fa      	beq.n	8007c88 <__ieee754_sqrt+0x134>
 8007c92:	02d7      	lsls	r7, r2, #11
 8007c94:	d50a      	bpl.n	8007cac <__ieee754_sqrt+0x158>
 8007c96:	f1c1 0420 	rsb	r4, r1, #32
 8007c9a:	fa23 f404 	lsr.w	r4, r3, r4
 8007c9e:	1e4d      	subs	r5, r1, #1
 8007ca0:	408b      	lsls	r3, r1
 8007ca2:	4322      	orrs	r2, r4
 8007ca4:	1b41      	subs	r1, r0, r5
 8007ca6:	e788      	b.n	8007bba <__ieee754_sqrt+0x66>
 8007ca8:	4608      	mov	r0, r1
 8007caa:	e7f0      	b.n	8007c8e <__ieee754_sqrt+0x13a>
 8007cac:	0052      	lsls	r2, r2, #1
 8007cae:	3101      	adds	r1, #1
 8007cb0:	e7ef      	b.n	8007c92 <__ieee754_sqrt+0x13e>
 8007cb2:	46e0      	mov	r8, ip
 8007cb4:	e7be      	b.n	8007c34 <__ieee754_sqrt+0xe0>
 8007cb6:	bf00      	nop
 8007cb8:	7ff00000 	.word	0x7ff00000
 8007cbc:	00000000 	.word	0x00000000

08007cc0 <__kernel_cos>:
 8007cc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cc4:	ec57 6b10 	vmov	r6, r7, d0
 8007cc8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8007ccc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007cd0:	ed8d 1b00 	vstr	d1, [sp]
 8007cd4:	da07      	bge.n	8007ce6 <__kernel_cos+0x26>
 8007cd6:	ee10 0a10 	vmov	r0, s0
 8007cda:	4639      	mov	r1, r7
 8007cdc:	f7f8 ff44 	bl	8000b68 <__aeabi_d2iz>
 8007ce0:	2800      	cmp	r0, #0
 8007ce2:	f000 8088 	beq.w	8007df6 <__kernel_cos+0x136>
 8007ce6:	4632      	mov	r2, r6
 8007ce8:	463b      	mov	r3, r7
 8007cea:	4630      	mov	r0, r6
 8007cec:	4639      	mov	r1, r7
 8007cee:	f7f8 fc8b 	bl	8000608 <__aeabi_dmul>
 8007cf2:	4b51      	ldr	r3, [pc, #324]	; (8007e38 <__kernel_cos+0x178>)
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	4604      	mov	r4, r0
 8007cf8:	460d      	mov	r5, r1
 8007cfa:	f7f8 fc85 	bl	8000608 <__aeabi_dmul>
 8007cfe:	a340      	add	r3, pc, #256	; (adr r3, 8007e00 <__kernel_cos+0x140>)
 8007d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d04:	4682      	mov	sl, r0
 8007d06:	468b      	mov	fp, r1
 8007d08:	4620      	mov	r0, r4
 8007d0a:	4629      	mov	r1, r5
 8007d0c:	f7f8 fc7c 	bl	8000608 <__aeabi_dmul>
 8007d10:	a33d      	add	r3, pc, #244	; (adr r3, 8007e08 <__kernel_cos+0x148>)
 8007d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d16:	f7f8 fac1 	bl	800029c <__adddf3>
 8007d1a:	4622      	mov	r2, r4
 8007d1c:	462b      	mov	r3, r5
 8007d1e:	f7f8 fc73 	bl	8000608 <__aeabi_dmul>
 8007d22:	a33b      	add	r3, pc, #236	; (adr r3, 8007e10 <__kernel_cos+0x150>)
 8007d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d28:	f7f8 fab6 	bl	8000298 <__aeabi_dsub>
 8007d2c:	4622      	mov	r2, r4
 8007d2e:	462b      	mov	r3, r5
 8007d30:	f7f8 fc6a 	bl	8000608 <__aeabi_dmul>
 8007d34:	a338      	add	r3, pc, #224	; (adr r3, 8007e18 <__kernel_cos+0x158>)
 8007d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3a:	f7f8 faaf 	bl	800029c <__adddf3>
 8007d3e:	4622      	mov	r2, r4
 8007d40:	462b      	mov	r3, r5
 8007d42:	f7f8 fc61 	bl	8000608 <__aeabi_dmul>
 8007d46:	a336      	add	r3, pc, #216	; (adr r3, 8007e20 <__kernel_cos+0x160>)
 8007d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d4c:	f7f8 faa4 	bl	8000298 <__aeabi_dsub>
 8007d50:	4622      	mov	r2, r4
 8007d52:	462b      	mov	r3, r5
 8007d54:	f7f8 fc58 	bl	8000608 <__aeabi_dmul>
 8007d58:	a333      	add	r3, pc, #204	; (adr r3, 8007e28 <__kernel_cos+0x168>)
 8007d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5e:	f7f8 fa9d 	bl	800029c <__adddf3>
 8007d62:	4622      	mov	r2, r4
 8007d64:	462b      	mov	r3, r5
 8007d66:	f7f8 fc4f 	bl	8000608 <__aeabi_dmul>
 8007d6a:	4622      	mov	r2, r4
 8007d6c:	462b      	mov	r3, r5
 8007d6e:	f7f8 fc4b 	bl	8000608 <__aeabi_dmul>
 8007d72:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d76:	4604      	mov	r4, r0
 8007d78:	460d      	mov	r5, r1
 8007d7a:	4630      	mov	r0, r6
 8007d7c:	4639      	mov	r1, r7
 8007d7e:	f7f8 fc43 	bl	8000608 <__aeabi_dmul>
 8007d82:	460b      	mov	r3, r1
 8007d84:	4602      	mov	r2, r0
 8007d86:	4629      	mov	r1, r5
 8007d88:	4620      	mov	r0, r4
 8007d8a:	f7f8 fa85 	bl	8000298 <__aeabi_dsub>
 8007d8e:	4b2b      	ldr	r3, [pc, #172]	; (8007e3c <__kernel_cos+0x17c>)
 8007d90:	4598      	cmp	r8, r3
 8007d92:	4606      	mov	r6, r0
 8007d94:	460f      	mov	r7, r1
 8007d96:	dc10      	bgt.n	8007dba <__kernel_cos+0xfa>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	460b      	mov	r3, r1
 8007d9c:	4650      	mov	r0, sl
 8007d9e:	4659      	mov	r1, fp
 8007da0:	f7f8 fa7a 	bl	8000298 <__aeabi_dsub>
 8007da4:	460b      	mov	r3, r1
 8007da6:	4926      	ldr	r1, [pc, #152]	; (8007e40 <__kernel_cos+0x180>)
 8007da8:	4602      	mov	r2, r0
 8007daa:	2000      	movs	r0, #0
 8007dac:	f7f8 fa74 	bl	8000298 <__aeabi_dsub>
 8007db0:	ec41 0b10 	vmov	d0, r0, r1
 8007db4:	b003      	add	sp, #12
 8007db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dba:	4b22      	ldr	r3, [pc, #136]	; (8007e44 <__kernel_cos+0x184>)
 8007dbc:	4920      	ldr	r1, [pc, #128]	; (8007e40 <__kernel_cos+0x180>)
 8007dbe:	4598      	cmp	r8, r3
 8007dc0:	bfcc      	ite	gt
 8007dc2:	4d21      	ldrgt	r5, [pc, #132]	; (8007e48 <__kernel_cos+0x188>)
 8007dc4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8007dc8:	2400      	movs	r4, #0
 8007dca:	4622      	mov	r2, r4
 8007dcc:	462b      	mov	r3, r5
 8007dce:	2000      	movs	r0, #0
 8007dd0:	f7f8 fa62 	bl	8000298 <__aeabi_dsub>
 8007dd4:	4622      	mov	r2, r4
 8007dd6:	4680      	mov	r8, r0
 8007dd8:	4689      	mov	r9, r1
 8007dda:	462b      	mov	r3, r5
 8007ddc:	4650      	mov	r0, sl
 8007dde:	4659      	mov	r1, fp
 8007de0:	f7f8 fa5a 	bl	8000298 <__aeabi_dsub>
 8007de4:	4632      	mov	r2, r6
 8007de6:	463b      	mov	r3, r7
 8007de8:	f7f8 fa56 	bl	8000298 <__aeabi_dsub>
 8007dec:	4602      	mov	r2, r0
 8007dee:	460b      	mov	r3, r1
 8007df0:	4640      	mov	r0, r8
 8007df2:	4649      	mov	r1, r9
 8007df4:	e7da      	b.n	8007dac <__kernel_cos+0xec>
 8007df6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8007e30 <__kernel_cos+0x170>
 8007dfa:	e7db      	b.n	8007db4 <__kernel_cos+0xf4>
 8007dfc:	f3af 8000 	nop.w
 8007e00:	be8838d4 	.word	0xbe8838d4
 8007e04:	bda8fae9 	.word	0xbda8fae9
 8007e08:	bdb4b1c4 	.word	0xbdb4b1c4
 8007e0c:	3e21ee9e 	.word	0x3e21ee9e
 8007e10:	809c52ad 	.word	0x809c52ad
 8007e14:	3e927e4f 	.word	0x3e927e4f
 8007e18:	19cb1590 	.word	0x19cb1590
 8007e1c:	3efa01a0 	.word	0x3efa01a0
 8007e20:	16c15177 	.word	0x16c15177
 8007e24:	3f56c16c 	.word	0x3f56c16c
 8007e28:	5555554c 	.word	0x5555554c
 8007e2c:	3fa55555 	.word	0x3fa55555
 8007e30:	00000000 	.word	0x00000000
 8007e34:	3ff00000 	.word	0x3ff00000
 8007e38:	3fe00000 	.word	0x3fe00000
 8007e3c:	3fd33332 	.word	0x3fd33332
 8007e40:	3ff00000 	.word	0x3ff00000
 8007e44:	3fe90000 	.word	0x3fe90000
 8007e48:	3fd20000 	.word	0x3fd20000
 8007e4c:	00000000 	.word	0x00000000

08007e50 <__kernel_rem_pio2>:
 8007e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e54:	ed2d 8b02 	vpush	{d8}
 8007e58:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8007e5c:	f112 0f14 	cmn.w	r2, #20
 8007e60:	9308      	str	r3, [sp, #32]
 8007e62:	9101      	str	r1, [sp, #4]
 8007e64:	4bc6      	ldr	r3, [pc, #792]	; (8008180 <__kernel_rem_pio2+0x330>)
 8007e66:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8007e68:	9009      	str	r0, [sp, #36]	; 0x24
 8007e6a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007e6e:	9304      	str	r3, [sp, #16]
 8007e70:	9b08      	ldr	r3, [sp, #32]
 8007e72:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8007e76:	bfa8      	it	ge
 8007e78:	1ed4      	subge	r4, r2, #3
 8007e7a:	9306      	str	r3, [sp, #24]
 8007e7c:	bfb2      	itee	lt
 8007e7e:	2400      	movlt	r4, #0
 8007e80:	2318      	movge	r3, #24
 8007e82:	fb94 f4f3 	sdivge	r4, r4, r3
 8007e86:	f06f 0317 	mvn.w	r3, #23
 8007e8a:	fb04 3303 	mla	r3, r4, r3, r3
 8007e8e:	eb03 0a02 	add.w	sl, r3, r2
 8007e92:	9b04      	ldr	r3, [sp, #16]
 8007e94:	9a06      	ldr	r2, [sp, #24]
 8007e96:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8008170 <__kernel_rem_pio2+0x320>
 8007e9a:	eb03 0802 	add.w	r8, r3, r2
 8007e9e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8007ea0:	1aa7      	subs	r7, r4, r2
 8007ea2:	ae20      	add	r6, sp, #128	; 0x80
 8007ea4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007ea8:	2500      	movs	r5, #0
 8007eaa:	4545      	cmp	r5, r8
 8007eac:	dd18      	ble.n	8007ee0 <__kernel_rem_pio2+0x90>
 8007eae:	9b08      	ldr	r3, [sp, #32]
 8007eb0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8007eb4:	aa20      	add	r2, sp, #128	; 0x80
 8007eb6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8008170 <__kernel_rem_pio2+0x320>
 8007eba:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8007ebe:	f1c3 0301 	rsb	r3, r3, #1
 8007ec2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8007ec6:	9307      	str	r3, [sp, #28]
 8007ec8:	9b07      	ldr	r3, [sp, #28]
 8007eca:	9a04      	ldr	r2, [sp, #16]
 8007ecc:	4443      	add	r3, r8
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	db2f      	blt.n	8007f32 <__kernel_rem_pio2+0xe2>
 8007ed2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007ed6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007eda:	462f      	mov	r7, r5
 8007edc:	2600      	movs	r6, #0
 8007ede:	e01b      	b.n	8007f18 <__kernel_rem_pio2+0xc8>
 8007ee0:	42ef      	cmn	r7, r5
 8007ee2:	d407      	bmi.n	8007ef4 <__kernel_rem_pio2+0xa4>
 8007ee4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007ee8:	f7f8 fb24 	bl	8000534 <__aeabi_i2d>
 8007eec:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007ef0:	3501      	adds	r5, #1
 8007ef2:	e7da      	b.n	8007eaa <__kernel_rem_pio2+0x5a>
 8007ef4:	ec51 0b18 	vmov	r0, r1, d8
 8007ef8:	e7f8      	b.n	8007eec <__kernel_rem_pio2+0x9c>
 8007efa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007efe:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007f02:	f7f8 fb81 	bl	8000608 <__aeabi_dmul>
 8007f06:	4602      	mov	r2, r0
 8007f08:	460b      	mov	r3, r1
 8007f0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f0e:	f7f8 f9c5 	bl	800029c <__adddf3>
 8007f12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f16:	3601      	adds	r6, #1
 8007f18:	9b06      	ldr	r3, [sp, #24]
 8007f1a:	429e      	cmp	r6, r3
 8007f1c:	f1a7 0708 	sub.w	r7, r7, #8
 8007f20:	ddeb      	ble.n	8007efa <__kernel_rem_pio2+0xaa>
 8007f22:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007f26:	3508      	adds	r5, #8
 8007f28:	ecab 7b02 	vstmia	fp!, {d7}
 8007f2c:	f108 0801 	add.w	r8, r8, #1
 8007f30:	e7ca      	b.n	8007ec8 <__kernel_rem_pio2+0x78>
 8007f32:	9b04      	ldr	r3, [sp, #16]
 8007f34:	aa0c      	add	r2, sp, #48	; 0x30
 8007f36:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007f3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f3c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8007f3e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007f42:	9c04      	ldr	r4, [sp, #16]
 8007f44:	930a      	str	r3, [sp, #40]	; 0x28
 8007f46:	ab98      	add	r3, sp, #608	; 0x260
 8007f48:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007f4c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8007f50:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8007f54:	f8cd b008 	str.w	fp, [sp, #8]
 8007f58:	4625      	mov	r5, r4
 8007f5a:	2d00      	cmp	r5, #0
 8007f5c:	dc78      	bgt.n	8008050 <__kernel_rem_pio2+0x200>
 8007f5e:	ec47 6b10 	vmov	d0, r6, r7
 8007f62:	4650      	mov	r0, sl
 8007f64:	f000 fc9c 	bl	80088a0 <scalbn>
 8007f68:	ec57 6b10 	vmov	r6, r7, d0
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007f72:	ee10 0a10 	vmov	r0, s0
 8007f76:	4639      	mov	r1, r7
 8007f78:	f7f8 fb46 	bl	8000608 <__aeabi_dmul>
 8007f7c:	ec41 0b10 	vmov	d0, r0, r1
 8007f80:	f000 fb7a 	bl	8008678 <floor>
 8007f84:	4b7f      	ldr	r3, [pc, #508]	; (8008184 <__kernel_rem_pio2+0x334>)
 8007f86:	ec51 0b10 	vmov	r0, r1, d0
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f7f8 fb3c 	bl	8000608 <__aeabi_dmul>
 8007f90:	4602      	mov	r2, r0
 8007f92:	460b      	mov	r3, r1
 8007f94:	4630      	mov	r0, r6
 8007f96:	4639      	mov	r1, r7
 8007f98:	f7f8 f97e 	bl	8000298 <__aeabi_dsub>
 8007f9c:	460f      	mov	r7, r1
 8007f9e:	4606      	mov	r6, r0
 8007fa0:	f7f8 fde2 	bl	8000b68 <__aeabi_d2iz>
 8007fa4:	9007      	str	r0, [sp, #28]
 8007fa6:	f7f8 fac5 	bl	8000534 <__aeabi_i2d>
 8007faa:	4602      	mov	r2, r0
 8007fac:	460b      	mov	r3, r1
 8007fae:	4630      	mov	r0, r6
 8007fb0:	4639      	mov	r1, r7
 8007fb2:	f7f8 f971 	bl	8000298 <__aeabi_dsub>
 8007fb6:	f1ba 0f00 	cmp.w	sl, #0
 8007fba:	4606      	mov	r6, r0
 8007fbc:	460f      	mov	r7, r1
 8007fbe:	dd70      	ble.n	80080a2 <__kernel_rem_pio2+0x252>
 8007fc0:	1e62      	subs	r2, r4, #1
 8007fc2:	ab0c      	add	r3, sp, #48	; 0x30
 8007fc4:	9d07      	ldr	r5, [sp, #28]
 8007fc6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007fca:	f1ca 0118 	rsb	r1, sl, #24
 8007fce:	fa40 f301 	asr.w	r3, r0, r1
 8007fd2:	441d      	add	r5, r3
 8007fd4:	408b      	lsls	r3, r1
 8007fd6:	1ac0      	subs	r0, r0, r3
 8007fd8:	ab0c      	add	r3, sp, #48	; 0x30
 8007fda:	9507      	str	r5, [sp, #28]
 8007fdc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007fe0:	f1ca 0317 	rsb	r3, sl, #23
 8007fe4:	fa40 f303 	asr.w	r3, r0, r3
 8007fe8:	9302      	str	r3, [sp, #8]
 8007fea:	9b02      	ldr	r3, [sp, #8]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	dd66      	ble.n	80080be <__kernel_rem_pio2+0x26e>
 8007ff0:	9b07      	ldr	r3, [sp, #28]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	3301      	adds	r3, #1
 8007ff6:	9307      	str	r3, [sp, #28]
 8007ff8:	4615      	mov	r5, r2
 8007ffa:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007ffe:	4294      	cmp	r4, r2
 8008000:	f300 8099 	bgt.w	8008136 <__kernel_rem_pio2+0x2e6>
 8008004:	f1ba 0f00 	cmp.w	sl, #0
 8008008:	dd07      	ble.n	800801a <__kernel_rem_pio2+0x1ca>
 800800a:	f1ba 0f01 	cmp.w	sl, #1
 800800e:	f000 80a5 	beq.w	800815c <__kernel_rem_pio2+0x30c>
 8008012:	f1ba 0f02 	cmp.w	sl, #2
 8008016:	f000 80c1 	beq.w	800819c <__kernel_rem_pio2+0x34c>
 800801a:	9b02      	ldr	r3, [sp, #8]
 800801c:	2b02      	cmp	r3, #2
 800801e:	d14e      	bne.n	80080be <__kernel_rem_pio2+0x26e>
 8008020:	4632      	mov	r2, r6
 8008022:	463b      	mov	r3, r7
 8008024:	4958      	ldr	r1, [pc, #352]	; (8008188 <__kernel_rem_pio2+0x338>)
 8008026:	2000      	movs	r0, #0
 8008028:	f7f8 f936 	bl	8000298 <__aeabi_dsub>
 800802c:	4606      	mov	r6, r0
 800802e:	460f      	mov	r7, r1
 8008030:	2d00      	cmp	r5, #0
 8008032:	d044      	beq.n	80080be <__kernel_rem_pio2+0x26e>
 8008034:	4650      	mov	r0, sl
 8008036:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8008178 <__kernel_rem_pio2+0x328>
 800803a:	f000 fc31 	bl	80088a0 <scalbn>
 800803e:	4630      	mov	r0, r6
 8008040:	4639      	mov	r1, r7
 8008042:	ec53 2b10 	vmov	r2, r3, d0
 8008046:	f7f8 f927 	bl	8000298 <__aeabi_dsub>
 800804a:	4606      	mov	r6, r0
 800804c:	460f      	mov	r7, r1
 800804e:	e036      	b.n	80080be <__kernel_rem_pio2+0x26e>
 8008050:	4b4e      	ldr	r3, [pc, #312]	; (800818c <__kernel_rem_pio2+0x33c>)
 8008052:	2200      	movs	r2, #0
 8008054:	4630      	mov	r0, r6
 8008056:	4639      	mov	r1, r7
 8008058:	f7f8 fad6 	bl	8000608 <__aeabi_dmul>
 800805c:	f7f8 fd84 	bl	8000b68 <__aeabi_d2iz>
 8008060:	f7f8 fa68 	bl	8000534 <__aeabi_i2d>
 8008064:	4b4a      	ldr	r3, [pc, #296]	; (8008190 <__kernel_rem_pio2+0x340>)
 8008066:	2200      	movs	r2, #0
 8008068:	4680      	mov	r8, r0
 800806a:	4689      	mov	r9, r1
 800806c:	f7f8 facc 	bl	8000608 <__aeabi_dmul>
 8008070:	4602      	mov	r2, r0
 8008072:	460b      	mov	r3, r1
 8008074:	4630      	mov	r0, r6
 8008076:	4639      	mov	r1, r7
 8008078:	f7f8 f90e 	bl	8000298 <__aeabi_dsub>
 800807c:	f7f8 fd74 	bl	8000b68 <__aeabi_d2iz>
 8008080:	9b02      	ldr	r3, [sp, #8]
 8008082:	f843 0b04 	str.w	r0, [r3], #4
 8008086:	3d01      	subs	r5, #1
 8008088:	9302      	str	r3, [sp, #8]
 800808a:	ab70      	add	r3, sp, #448	; 0x1c0
 800808c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008094:	4640      	mov	r0, r8
 8008096:	4649      	mov	r1, r9
 8008098:	f7f8 f900 	bl	800029c <__adddf3>
 800809c:	4606      	mov	r6, r0
 800809e:	460f      	mov	r7, r1
 80080a0:	e75b      	b.n	8007f5a <__kernel_rem_pio2+0x10a>
 80080a2:	d105      	bne.n	80080b0 <__kernel_rem_pio2+0x260>
 80080a4:	1e63      	subs	r3, r4, #1
 80080a6:	aa0c      	add	r2, sp, #48	; 0x30
 80080a8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80080ac:	15c3      	asrs	r3, r0, #23
 80080ae:	e79b      	b.n	8007fe8 <__kernel_rem_pio2+0x198>
 80080b0:	4b38      	ldr	r3, [pc, #224]	; (8008194 <__kernel_rem_pio2+0x344>)
 80080b2:	2200      	movs	r2, #0
 80080b4:	f7f8 fd2e 	bl	8000b14 <__aeabi_dcmpge>
 80080b8:	2800      	cmp	r0, #0
 80080ba:	d139      	bne.n	8008130 <__kernel_rem_pio2+0x2e0>
 80080bc:	9002      	str	r0, [sp, #8]
 80080be:	2200      	movs	r2, #0
 80080c0:	2300      	movs	r3, #0
 80080c2:	4630      	mov	r0, r6
 80080c4:	4639      	mov	r1, r7
 80080c6:	f7f8 fd07 	bl	8000ad8 <__aeabi_dcmpeq>
 80080ca:	2800      	cmp	r0, #0
 80080cc:	f000 80b4 	beq.w	8008238 <__kernel_rem_pio2+0x3e8>
 80080d0:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 80080d4:	465b      	mov	r3, fp
 80080d6:	2200      	movs	r2, #0
 80080d8:	9904      	ldr	r1, [sp, #16]
 80080da:	428b      	cmp	r3, r1
 80080dc:	da65      	bge.n	80081aa <__kernel_rem_pio2+0x35a>
 80080de:	2a00      	cmp	r2, #0
 80080e0:	d07b      	beq.n	80081da <__kernel_rem_pio2+0x38a>
 80080e2:	ab0c      	add	r3, sp, #48	; 0x30
 80080e4:	f1aa 0a18 	sub.w	sl, sl, #24
 80080e8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	f000 80a0 	beq.w	8008232 <__kernel_rem_pio2+0x3e2>
 80080f2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8008178 <__kernel_rem_pio2+0x328>
 80080f6:	4650      	mov	r0, sl
 80080f8:	f000 fbd2 	bl	80088a0 <scalbn>
 80080fc:	4f23      	ldr	r7, [pc, #140]	; (800818c <__kernel_rem_pio2+0x33c>)
 80080fe:	ec55 4b10 	vmov	r4, r5, d0
 8008102:	46d8      	mov	r8, fp
 8008104:	2600      	movs	r6, #0
 8008106:	f1b8 0f00 	cmp.w	r8, #0
 800810a:	f280 80cf 	bge.w	80082ac <__kernel_rem_pio2+0x45c>
 800810e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8008170 <__kernel_rem_pio2+0x320>
 8008112:	465f      	mov	r7, fp
 8008114:	f04f 0800 	mov.w	r8, #0
 8008118:	2f00      	cmp	r7, #0
 800811a:	f2c0 80fd 	blt.w	8008318 <__kernel_rem_pio2+0x4c8>
 800811e:	ab70      	add	r3, sp, #448	; 0x1c0
 8008120:	f8df a074 	ldr.w	sl, [pc, #116]	; 8008198 <__kernel_rem_pio2+0x348>
 8008124:	ec55 4b18 	vmov	r4, r5, d8
 8008128:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800812c:	2600      	movs	r6, #0
 800812e:	e0e5      	b.n	80082fc <__kernel_rem_pio2+0x4ac>
 8008130:	2302      	movs	r3, #2
 8008132:	9302      	str	r3, [sp, #8]
 8008134:	e75c      	b.n	8007ff0 <__kernel_rem_pio2+0x1a0>
 8008136:	f8db 3000 	ldr.w	r3, [fp]
 800813a:	b955      	cbnz	r5, 8008152 <__kernel_rem_pio2+0x302>
 800813c:	b123      	cbz	r3, 8008148 <__kernel_rem_pio2+0x2f8>
 800813e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008142:	f8cb 3000 	str.w	r3, [fp]
 8008146:	2301      	movs	r3, #1
 8008148:	3201      	adds	r2, #1
 800814a:	f10b 0b04 	add.w	fp, fp, #4
 800814e:	461d      	mov	r5, r3
 8008150:	e755      	b.n	8007ffe <__kernel_rem_pio2+0x1ae>
 8008152:	1acb      	subs	r3, r1, r3
 8008154:	f8cb 3000 	str.w	r3, [fp]
 8008158:	462b      	mov	r3, r5
 800815a:	e7f5      	b.n	8008148 <__kernel_rem_pio2+0x2f8>
 800815c:	1e62      	subs	r2, r4, #1
 800815e:	ab0c      	add	r3, sp, #48	; 0x30
 8008160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008164:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008168:	a90c      	add	r1, sp, #48	; 0x30
 800816a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800816e:	e754      	b.n	800801a <__kernel_rem_pio2+0x1ca>
	...
 800817c:	3ff00000 	.word	0x3ff00000
 8008180:	08008c28 	.word	0x08008c28
 8008184:	40200000 	.word	0x40200000
 8008188:	3ff00000 	.word	0x3ff00000
 800818c:	3e700000 	.word	0x3e700000
 8008190:	41700000 	.word	0x41700000
 8008194:	3fe00000 	.word	0x3fe00000
 8008198:	08008be8 	.word	0x08008be8
 800819c:	1e62      	subs	r2, r4, #1
 800819e:	ab0c      	add	r3, sp, #48	; 0x30
 80081a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081a4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80081a8:	e7de      	b.n	8008168 <__kernel_rem_pio2+0x318>
 80081aa:	a90c      	add	r1, sp, #48	; 0x30
 80081ac:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80081b0:	3b01      	subs	r3, #1
 80081b2:	430a      	orrs	r2, r1
 80081b4:	e790      	b.n	80080d8 <__kernel_rem_pio2+0x288>
 80081b6:	3301      	adds	r3, #1
 80081b8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80081bc:	2900      	cmp	r1, #0
 80081be:	d0fa      	beq.n	80081b6 <__kernel_rem_pio2+0x366>
 80081c0:	9a08      	ldr	r2, [sp, #32]
 80081c2:	18e3      	adds	r3, r4, r3
 80081c4:	18a6      	adds	r6, r4, r2
 80081c6:	aa20      	add	r2, sp, #128	; 0x80
 80081c8:	1c65      	adds	r5, r4, #1
 80081ca:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80081ce:	9302      	str	r3, [sp, #8]
 80081d0:	9b02      	ldr	r3, [sp, #8]
 80081d2:	42ab      	cmp	r3, r5
 80081d4:	da04      	bge.n	80081e0 <__kernel_rem_pio2+0x390>
 80081d6:	461c      	mov	r4, r3
 80081d8:	e6b5      	b.n	8007f46 <__kernel_rem_pio2+0xf6>
 80081da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80081dc:	2301      	movs	r3, #1
 80081de:	e7eb      	b.n	80081b8 <__kernel_rem_pio2+0x368>
 80081e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80081e6:	f7f8 f9a5 	bl	8000534 <__aeabi_i2d>
 80081ea:	e8e6 0102 	strd	r0, r1, [r6], #8
 80081ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081f0:	46b3      	mov	fp, r6
 80081f2:	461c      	mov	r4, r3
 80081f4:	2700      	movs	r7, #0
 80081f6:	f04f 0800 	mov.w	r8, #0
 80081fa:	f04f 0900 	mov.w	r9, #0
 80081fe:	9b06      	ldr	r3, [sp, #24]
 8008200:	429f      	cmp	r7, r3
 8008202:	dd06      	ble.n	8008212 <__kernel_rem_pio2+0x3c2>
 8008204:	ab70      	add	r3, sp, #448	; 0x1c0
 8008206:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800820a:	e9c3 8900 	strd	r8, r9, [r3]
 800820e:	3501      	adds	r5, #1
 8008210:	e7de      	b.n	80081d0 <__kernel_rem_pio2+0x380>
 8008212:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8008216:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800821a:	f7f8 f9f5 	bl	8000608 <__aeabi_dmul>
 800821e:	4602      	mov	r2, r0
 8008220:	460b      	mov	r3, r1
 8008222:	4640      	mov	r0, r8
 8008224:	4649      	mov	r1, r9
 8008226:	f7f8 f839 	bl	800029c <__adddf3>
 800822a:	3701      	adds	r7, #1
 800822c:	4680      	mov	r8, r0
 800822e:	4689      	mov	r9, r1
 8008230:	e7e5      	b.n	80081fe <__kernel_rem_pio2+0x3ae>
 8008232:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008236:	e754      	b.n	80080e2 <__kernel_rem_pio2+0x292>
 8008238:	ec47 6b10 	vmov	d0, r6, r7
 800823c:	f1ca 0000 	rsb	r0, sl, #0
 8008240:	f000 fb2e 	bl	80088a0 <scalbn>
 8008244:	ec57 6b10 	vmov	r6, r7, d0
 8008248:	4b9f      	ldr	r3, [pc, #636]	; (80084c8 <__kernel_rem_pio2+0x678>)
 800824a:	ee10 0a10 	vmov	r0, s0
 800824e:	2200      	movs	r2, #0
 8008250:	4639      	mov	r1, r7
 8008252:	f7f8 fc5f 	bl	8000b14 <__aeabi_dcmpge>
 8008256:	b300      	cbz	r0, 800829a <__kernel_rem_pio2+0x44a>
 8008258:	4b9c      	ldr	r3, [pc, #624]	; (80084cc <__kernel_rem_pio2+0x67c>)
 800825a:	2200      	movs	r2, #0
 800825c:	4630      	mov	r0, r6
 800825e:	4639      	mov	r1, r7
 8008260:	f7f8 f9d2 	bl	8000608 <__aeabi_dmul>
 8008264:	f7f8 fc80 	bl	8000b68 <__aeabi_d2iz>
 8008268:	4605      	mov	r5, r0
 800826a:	f7f8 f963 	bl	8000534 <__aeabi_i2d>
 800826e:	4b96      	ldr	r3, [pc, #600]	; (80084c8 <__kernel_rem_pio2+0x678>)
 8008270:	2200      	movs	r2, #0
 8008272:	f7f8 f9c9 	bl	8000608 <__aeabi_dmul>
 8008276:	460b      	mov	r3, r1
 8008278:	4602      	mov	r2, r0
 800827a:	4639      	mov	r1, r7
 800827c:	4630      	mov	r0, r6
 800827e:	f7f8 f80b 	bl	8000298 <__aeabi_dsub>
 8008282:	f7f8 fc71 	bl	8000b68 <__aeabi_d2iz>
 8008286:	f104 0b01 	add.w	fp, r4, #1
 800828a:	ab0c      	add	r3, sp, #48	; 0x30
 800828c:	f10a 0a18 	add.w	sl, sl, #24
 8008290:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008294:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8008298:	e72b      	b.n	80080f2 <__kernel_rem_pio2+0x2a2>
 800829a:	4630      	mov	r0, r6
 800829c:	4639      	mov	r1, r7
 800829e:	f7f8 fc63 	bl	8000b68 <__aeabi_d2iz>
 80082a2:	ab0c      	add	r3, sp, #48	; 0x30
 80082a4:	46a3      	mov	fp, r4
 80082a6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80082aa:	e722      	b.n	80080f2 <__kernel_rem_pio2+0x2a2>
 80082ac:	ab70      	add	r3, sp, #448	; 0x1c0
 80082ae:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 80082b2:	ab0c      	add	r3, sp, #48	; 0x30
 80082b4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80082b8:	f7f8 f93c 	bl	8000534 <__aeabi_i2d>
 80082bc:	4622      	mov	r2, r4
 80082be:	462b      	mov	r3, r5
 80082c0:	f7f8 f9a2 	bl	8000608 <__aeabi_dmul>
 80082c4:	4632      	mov	r2, r6
 80082c6:	e9c9 0100 	strd	r0, r1, [r9]
 80082ca:	463b      	mov	r3, r7
 80082cc:	4620      	mov	r0, r4
 80082ce:	4629      	mov	r1, r5
 80082d0:	f7f8 f99a 	bl	8000608 <__aeabi_dmul>
 80082d4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80082d8:	4604      	mov	r4, r0
 80082da:	460d      	mov	r5, r1
 80082dc:	e713      	b.n	8008106 <__kernel_rem_pio2+0x2b6>
 80082de:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80082e2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80082e6:	f7f8 f98f 	bl	8000608 <__aeabi_dmul>
 80082ea:	4602      	mov	r2, r0
 80082ec:	460b      	mov	r3, r1
 80082ee:	4620      	mov	r0, r4
 80082f0:	4629      	mov	r1, r5
 80082f2:	f7f7 ffd3 	bl	800029c <__adddf3>
 80082f6:	3601      	adds	r6, #1
 80082f8:	4604      	mov	r4, r0
 80082fa:	460d      	mov	r5, r1
 80082fc:	9b04      	ldr	r3, [sp, #16]
 80082fe:	429e      	cmp	r6, r3
 8008300:	dc01      	bgt.n	8008306 <__kernel_rem_pio2+0x4b6>
 8008302:	45b0      	cmp	r8, r6
 8008304:	daeb      	bge.n	80082de <__kernel_rem_pio2+0x48e>
 8008306:	ab48      	add	r3, sp, #288	; 0x120
 8008308:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800830c:	e9c3 4500 	strd	r4, r5, [r3]
 8008310:	3f01      	subs	r7, #1
 8008312:	f108 0801 	add.w	r8, r8, #1
 8008316:	e6ff      	b.n	8008118 <__kernel_rem_pio2+0x2c8>
 8008318:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800831a:	2b02      	cmp	r3, #2
 800831c:	dc0b      	bgt.n	8008336 <__kernel_rem_pio2+0x4e6>
 800831e:	2b00      	cmp	r3, #0
 8008320:	dc6e      	bgt.n	8008400 <__kernel_rem_pio2+0x5b0>
 8008322:	d045      	beq.n	80083b0 <__kernel_rem_pio2+0x560>
 8008324:	9b07      	ldr	r3, [sp, #28]
 8008326:	f003 0007 	and.w	r0, r3, #7
 800832a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800832e:	ecbd 8b02 	vpop	{d8}
 8008332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008336:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008338:	2b03      	cmp	r3, #3
 800833a:	d1f3      	bne.n	8008324 <__kernel_rem_pio2+0x4d4>
 800833c:	ab48      	add	r3, sp, #288	; 0x120
 800833e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8008342:	46d0      	mov	r8, sl
 8008344:	46d9      	mov	r9, fp
 8008346:	f1b9 0f00 	cmp.w	r9, #0
 800834a:	f1a8 0808 	sub.w	r8, r8, #8
 800834e:	dc64      	bgt.n	800841a <__kernel_rem_pio2+0x5ca>
 8008350:	465c      	mov	r4, fp
 8008352:	2c01      	cmp	r4, #1
 8008354:	f1aa 0a08 	sub.w	sl, sl, #8
 8008358:	dc7e      	bgt.n	8008458 <__kernel_rem_pio2+0x608>
 800835a:	2000      	movs	r0, #0
 800835c:	2100      	movs	r1, #0
 800835e:	f1bb 0f01 	cmp.w	fp, #1
 8008362:	f300 8097 	bgt.w	8008494 <__kernel_rem_pio2+0x644>
 8008366:	9b02      	ldr	r3, [sp, #8]
 8008368:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800836c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8008370:	2b00      	cmp	r3, #0
 8008372:	f040 8099 	bne.w	80084a8 <__kernel_rem_pio2+0x658>
 8008376:	9b01      	ldr	r3, [sp, #4]
 8008378:	e9c3 5600 	strd	r5, r6, [r3]
 800837c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8008380:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8008384:	e7ce      	b.n	8008324 <__kernel_rem_pio2+0x4d4>
 8008386:	ab48      	add	r3, sp, #288	; 0x120
 8008388:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800838c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008390:	f7f7 ff84 	bl	800029c <__adddf3>
 8008394:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008398:	f1bb 0f00 	cmp.w	fp, #0
 800839c:	daf3      	bge.n	8008386 <__kernel_rem_pio2+0x536>
 800839e:	9b02      	ldr	r3, [sp, #8]
 80083a0:	b113      	cbz	r3, 80083a8 <__kernel_rem_pio2+0x558>
 80083a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80083a6:	4619      	mov	r1, r3
 80083a8:	9b01      	ldr	r3, [sp, #4]
 80083aa:	e9c3 0100 	strd	r0, r1, [r3]
 80083ae:	e7b9      	b.n	8008324 <__kernel_rem_pio2+0x4d4>
 80083b0:	2000      	movs	r0, #0
 80083b2:	2100      	movs	r1, #0
 80083b4:	e7f0      	b.n	8008398 <__kernel_rem_pio2+0x548>
 80083b6:	ab48      	add	r3, sp, #288	; 0x120
 80083b8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80083bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c0:	f7f7 ff6c 	bl	800029c <__adddf3>
 80083c4:	3c01      	subs	r4, #1
 80083c6:	2c00      	cmp	r4, #0
 80083c8:	daf5      	bge.n	80083b6 <__kernel_rem_pio2+0x566>
 80083ca:	9b02      	ldr	r3, [sp, #8]
 80083cc:	b1e3      	cbz	r3, 8008408 <__kernel_rem_pio2+0x5b8>
 80083ce:	4602      	mov	r2, r0
 80083d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80083d4:	9c01      	ldr	r4, [sp, #4]
 80083d6:	e9c4 2300 	strd	r2, r3, [r4]
 80083da:	4602      	mov	r2, r0
 80083dc:	460b      	mov	r3, r1
 80083de:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80083e2:	f7f7 ff59 	bl	8000298 <__aeabi_dsub>
 80083e6:	ad4a      	add	r5, sp, #296	; 0x128
 80083e8:	2401      	movs	r4, #1
 80083ea:	45a3      	cmp	fp, r4
 80083ec:	da0f      	bge.n	800840e <__kernel_rem_pio2+0x5be>
 80083ee:	9b02      	ldr	r3, [sp, #8]
 80083f0:	b113      	cbz	r3, 80083f8 <__kernel_rem_pio2+0x5a8>
 80083f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80083f6:	4619      	mov	r1, r3
 80083f8:	9b01      	ldr	r3, [sp, #4]
 80083fa:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80083fe:	e791      	b.n	8008324 <__kernel_rem_pio2+0x4d4>
 8008400:	465c      	mov	r4, fp
 8008402:	2000      	movs	r0, #0
 8008404:	2100      	movs	r1, #0
 8008406:	e7de      	b.n	80083c6 <__kernel_rem_pio2+0x576>
 8008408:	4602      	mov	r2, r0
 800840a:	460b      	mov	r3, r1
 800840c:	e7e2      	b.n	80083d4 <__kernel_rem_pio2+0x584>
 800840e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8008412:	f7f7 ff43 	bl	800029c <__adddf3>
 8008416:	3401      	adds	r4, #1
 8008418:	e7e7      	b.n	80083ea <__kernel_rem_pio2+0x59a>
 800841a:	e9d8 4500 	ldrd	r4, r5, [r8]
 800841e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8008422:	4620      	mov	r0, r4
 8008424:	4632      	mov	r2, r6
 8008426:	463b      	mov	r3, r7
 8008428:	4629      	mov	r1, r5
 800842a:	f7f7 ff37 	bl	800029c <__adddf3>
 800842e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008432:	4602      	mov	r2, r0
 8008434:	460b      	mov	r3, r1
 8008436:	4620      	mov	r0, r4
 8008438:	4629      	mov	r1, r5
 800843a:	f7f7 ff2d 	bl	8000298 <__aeabi_dsub>
 800843e:	4632      	mov	r2, r6
 8008440:	463b      	mov	r3, r7
 8008442:	f7f7 ff2b 	bl	800029c <__adddf3>
 8008446:	ed9d 7b04 	vldr	d7, [sp, #16]
 800844a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800844e:	ed88 7b00 	vstr	d7, [r8]
 8008452:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8008456:	e776      	b.n	8008346 <__kernel_rem_pio2+0x4f6>
 8008458:	e9da 8900 	ldrd	r8, r9, [sl]
 800845c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8008460:	4640      	mov	r0, r8
 8008462:	4632      	mov	r2, r6
 8008464:	463b      	mov	r3, r7
 8008466:	4649      	mov	r1, r9
 8008468:	f7f7 ff18 	bl	800029c <__adddf3>
 800846c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008470:	4602      	mov	r2, r0
 8008472:	460b      	mov	r3, r1
 8008474:	4640      	mov	r0, r8
 8008476:	4649      	mov	r1, r9
 8008478:	f7f7 ff0e 	bl	8000298 <__aeabi_dsub>
 800847c:	4632      	mov	r2, r6
 800847e:	463b      	mov	r3, r7
 8008480:	f7f7 ff0c 	bl	800029c <__adddf3>
 8008484:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008488:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800848c:	ed8a 7b00 	vstr	d7, [sl]
 8008490:	3c01      	subs	r4, #1
 8008492:	e75e      	b.n	8008352 <__kernel_rem_pio2+0x502>
 8008494:	ab48      	add	r3, sp, #288	; 0x120
 8008496:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800849a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849e:	f7f7 fefd 	bl	800029c <__adddf3>
 80084a2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80084a6:	e75a      	b.n	800835e <__kernel_rem_pio2+0x50e>
 80084a8:	9b01      	ldr	r3, [sp, #4]
 80084aa:	9a01      	ldr	r2, [sp, #4]
 80084ac:	601d      	str	r5, [r3, #0]
 80084ae:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80084b2:	605c      	str	r4, [r3, #4]
 80084b4:	609f      	str	r7, [r3, #8]
 80084b6:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80084ba:	60d3      	str	r3, [r2, #12]
 80084bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80084c0:	6110      	str	r0, [r2, #16]
 80084c2:	6153      	str	r3, [r2, #20]
 80084c4:	e72e      	b.n	8008324 <__kernel_rem_pio2+0x4d4>
 80084c6:	bf00      	nop
 80084c8:	41700000 	.word	0x41700000
 80084cc:	3e700000 	.word	0x3e700000

080084d0 <__kernel_sin>:
 80084d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084d4:	ed2d 8b04 	vpush	{d8-d9}
 80084d8:	eeb0 8a41 	vmov.f32	s16, s2
 80084dc:	eef0 8a61 	vmov.f32	s17, s3
 80084e0:	ec55 4b10 	vmov	r4, r5, d0
 80084e4:	b083      	sub	sp, #12
 80084e6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80084ea:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80084ee:	9001      	str	r0, [sp, #4]
 80084f0:	da06      	bge.n	8008500 <__kernel_sin+0x30>
 80084f2:	ee10 0a10 	vmov	r0, s0
 80084f6:	4629      	mov	r1, r5
 80084f8:	f7f8 fb36 	bl	8000b68 <__aeabi_d2iz>
 80084fc:	2800      	cmp	r0, #0
 80084fe:	d051      	beq.n	80085a4 <__kernel_sin+0xd4>
 8008500:	4622      	mov	r2, r4
 8008502:	462b      	mov	r3, r5
 8008504:	4620      	mov	r0, r4
 8008506:	4629      	mov	r1, r5
 8008508:	f7f8 f87e 	bl	8000608 <__aeabi_dmul>
 800850c:	4682      	mov	sl, r0
 800850e:	468b      	mov	fp, r1
 8008510:	4602      	mov	r2, r0
 8008512:	460b      	mov	r3, r1
 8008514:	4620      	mov	r0, r4
 8008516:	4629      	mov	r1, r5
 8008518:	f7f8 f876 	bl	8000608 <__aeabi_dmul>
 800851c:	a341      	add	r3, pc, #260	; (adr r3, 8008624 <__kernel_sin+0x154>)
 800851e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008522:	4680      	mov	r8, r0
 8008524:	4689      	mov	r9, r1
 8008526:	4650      	mov	r0, sl
 8008528:	4659      	mov	r1, fp
 800852a:	f7f8 f86d 	bl	8000608 <__aeabi_dmul>
 800852e:	a33f      	add	r3, pc, #252	; (adr r3, 800862c <__kernel_sin+0x15c>)
 8008530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008534:	f7f7 feb0 	bl	8000298 <__aeabi_dsub>
 8008538:	4652      	mov	r2, sl
 800853a:	465b      	mov	r3, fp
 800853c:	f7f8 f864 	bl	8000608 <__aeabi_dmul>
 8008540:	a33c      	add	r3, pc, #240	; (adr r3, 8008634 <__kernel_sin+0x164>)
 8008542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008546:	f7f7 fea9 	bl	800029c <__adddf3>
 800854a:	4652      	mov	r2, sl
 800854c:	465b      	mov	r3, fp
 800854e:	f7f8 f85b 	bl	8000608 <__aeabi_dmul>
 8008552:	a33a      	add	r3, pc, #232	; (adr r3, 800863c <__kernel_sin+0x16c>)
 8008554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008558:	f7f7 fe9e 	bl	8000298 <__aeabi_dsub>
 800855c:	4652      	mov	r2, sl
 800855e:	465b      	mov	r3, fp
 8008560:	f7f8 f852 	bl	8000608 <__aeabi_dmul>
 8008564:	a337      	add	r3, pc, #220	; (adr r3, 8008644 <__kernel_sin+0x174>)
 8008566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800856a:	f7f7 fe97 	bl	800029c <__adddf3>
 800856e:	9b01      	ldr	r3, [sp, #4]
 8008570:	4606      	mov	r6, r0
 8008572:	460f      	mov	r7, r1
 8008574:	b9eb      	cbnz	r3, 80085b2 <__kernel_sin+0xe2>
 8008576:	4602      	mov	r2, r0
 8008578:	460b      	mov	r3, r1
 800857a:	4650      	mov	r0, sl
 800857c:	4659      	mov	r1, fp
 800857e:	f7f8 f843 	bl	8000608 <__aeabi_dmul>
 8008582:	a325      	add	r3, pc, #148	; (adr r3, 8008618 <__kernel_sin+0x148>)
 8008584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008588:	f7f7 fe86 	bl	8000298 <__aeabi_dsub>
 800858c:	4642      	mov	r2, r8
 800858e:	464b      	mov	r3, r9
 8008590:	f7f8 f83a 	bl	8000608 <__aeabi_dmul>
 8008594:	4602      	mov	r2, r0
 8008596:	460b      	mov	r3, r1
 8008598:	4620      	mov	r0, r4
 800859a:	4629      	mov	r1, r5
 800859c:	f7f7 fe7e 	bl	800029c <__adddf3>
 80085a0:	4604      	mov	r4, r0
 80085a2:	460d      	mov	r5, r1
 80085a4:	ec45 4b10 	vmov	d0, r4, r5
 80085a8:	b003      	add	sp, #12
 80085aa:	ecbd 8b04 	vpop	{d8-d9}
 80085ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085b2:	4b1b      	ldr	r3, [pc, #108]	; (8008620 <__kernel_sin+0x150>)
 80085b4:	ec51 0b18 	vmov	r0, r1, d8
 80085b8:	2200      	movs	r2, #0
 80085ba:	f7f8 f825 	bl	8000608 <__aeabi_dmul>
 80085be:	4632      	mov	r2, r6
 80085c0:	ec41 0b19 	vmov	d9, r0, r1
 80085c4:	463b      	mov	r3, r7
 80085c6:	4640      	mov	r0, r8
 80085c8:	4649      	mov	r1, r9
 80085ca:	f7f8 f81d 	bl	8000608 <__aeabi_dmul>
 80085ce:	4602      	mov	r2, r0
 80085d0:	460b      	mov	r3, r1
 80085d2:	ec51 0b19 	vmov	r0, r1, d9
 80085d6:	f7f7 fe5f 	bl	8000298 <__aeabi_dsub>
 80085da:	4652      	mov	r2, sl
 80085dc:	465b      	mov	r3, fp
 80085de:	f7f8 f813 	bl	8000608 <__aeabi_dmul>
 80085e2:	ec53 2b18 	vmov	r2, r3, d8
 80085e6:	f7f7 fe57 	bl	8000298 <__aeabi_dsub>
 80085ea:	a30b      	add	r3, pc, #44	; (adr r3, 8008618 <__kernel_sin+0x148>)
 80085ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f0:	4606      	mov	r6, r0
 80085f2:	460f      	mov	r7, r1
 80085f4:	4640      	mov	r0, r8
 80085f6:	4649      	mov	r1, r9
 80085f8:	f7f8 f806 	bl	8000608 <__aeabi_dmul>
 80085fc:	4602      	mov	r2, r0
 80085fe:	460b      	mov	r3, r1
 8008600:	4630      	mov	r0, r6
 8008602:	4639      	mov	r1, r7
 8008604:	f7f7 fe4a 	bl	800029c <__adddf3>
 8008608:	4602      	mov	r2, r0
 800860a:	460b      	mov	r3, r1
 800860c:	4620      	mov	r0, r4
 800860e:	4629      	mov	r1, r5
 8008610:	f7f7 fe42 	bl	8000298 <__aeabi_dsub>
 8008614:	e7c4      	b.n	80085a0 <__kernel_sin+0xd0>
 8008616:	bf00      	nop
 8008618:	55555549 	.word	0x55555549
 800861c:	3fc55555 	.word	0x3fc55555
 8008620:	3fe00000 	.word	0x3fe00000
 8008624:	5acfd57c 	.word	0x5acfd57c
 8008628:	3de5d93a 	.word	0x3de5d93a
 800862c:	8a2b9ceb 	.word	0x8a2b9ceb
 8008630:	3e5ae5e6 	.word	0x3e5ae5e6
 8008634:	57b1fe7d 	.word	0x57b1fe7d
 8008638:	3ec71de3 	.word	0x3ec71de3
 800863c:	19c161d5 	.word	0x19c161d5
 8008640:	3f2a01a0 	.word	0x3f2a01a0
 8008644:	1110f8a6 	.word	0x1110f8a6
 8008648:	3f811111 	.word	0x3f811111

0800864c <fabs>:
 800864c:	ec51 0b10 	vmov	r0, r1, d0
 8008650:	ee10 2a10 	vmov	r2, s0
 8008654:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008658:	ec43 2b10 	vmov	d0, r2, r3
 800865c:	4770      	bx	lr

0800865e <finite>:
 800865e:	b082      	sub	sp, #8
 8008660:	ed8d 0b00 	vstr	d0, [sp]
 8008664:	9801      	ldr	r0, [sp, #4]
 8008666:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800866a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800866e:	0fc0      	lsrs	r0, r0, #31
 8008670:	b002      	add	sp, #8
 8008672:	4770      	bx	lr
 8008674:	0000      	movs	r0, r0
	...

08008678 <floor>:
 8008678:	ec51 0b10 	vmov	r0, r1, d0
 800867c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008680:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8008684:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8008688:	2e13      	cmp	r6, #19
 800868a:	ee10 5a10 	vmov	r5, s0
 800868e:	ee10 8a10 	vmov	r8, s0
 8008692:	460c      	mov	r4, r1
 8008694:	dc32      	bgt.n	80086fc <floor+0x84>
 8008696:	2e00      	cmp	r6, #0
 8008698:	da14      	bge.n	80086c4 <floor+0x4c>
 800869a:	a333      	add	r3, pc, #204	; (adr r3, 8008768 <floor+0xf0>)
 800869c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a0:	f7f7 fdfc 	bl	800029c <__adddf3>
 80086a4:	2200      	movs	r2, #0
 80086a6:	2300      	movs	r3, #0
 80086a8:	f7f8 fa3e 	bl	8000b28 <__aeabi_dcmpgt>
 80086ac:	b138      	cbz	r0, 80086be <floor+0x46>
 80086ae:	2c00      	cmp	r4, #0
 80086b0:	da57      	bge.n	8008762 <floor+0xea>
 80086b2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80086b6:	431d      	orrs	r5, r3
 80086b8:	d001      	beq.n	80086be <floor+0x46>
 80086ba:	4c2d      	ldr	r4, [pc, #180]	; (8008770 <floor+0xf8>)
 80086bc:	2500      	movs	r5, #0
 80086be:	4621      	mov	r1, r4
 80086c0:	4628      	mov	r0, r5
 80086c2:	e025      	b.n	8008710 <floor+0x98>
 80086c4:	4f2b      	ldr	r7, [pc, #172]	; (8008774 <floor+0xfc>)
 80086c6:	4137      	asrs	r7, r6
 80086c8:	ea01 0307 	and.w	r3, r1, r7
 80086cc:	4303      	orrs	r3, r0
 80086ce:	d01f      	beq.n	8008710 <floor+0x98>
 80086d0:	a325      	add	r3, pc, #148	; (adr r3, 8008768 <floor+0xf0>)
 80086d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d6:	f7f7 fde1 	bl	800029c <__adddf3>
 80086da:	2200      	movs	r2, #0
 80086dc:	2300      	movs	r3, #0
 80086de:	f7f8 fa23 	bl	8000b28 <__aeabi_dcmpgt>
 80086e2:	2800      	cmp	r0, #0
 80086e4:	d0eb      	beq.n	80086be <floor+0x46>
 80086e6:	2c00      	cmp	r4, #0
 80086e8:	bfbe      	ittt	lt
 80086ea:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80086ee:	fa43 f606 	asrlt.w	r6, r3, r6
 80086f2:	19a4      	addlt	r4, r4, r6
 80086f4:	ea24 0407 	bic.w	r4, r4, r7
 80086f8:	2500      	movs	r5, #0
 80086fa:	e7e0      	b.n	80086be <floor+0x46>
 80086fc:	2e33      	cmp	r6, #51	; 0x33
 80086fe:	dd0b      	ble.n	8008718 <floor+0xa0>
 8008700:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008704:	d104      	bne.n	8008710 <floor+0x98>
 8008706:	ee10 2a10 	vmov	r2, s0
 800870a:	460b      	mov	r3, r1
 800870c:	f7f7 fdc6 	bl	800029c <__adddf3>
 8008710:	ec41 0b10 	vmov	d0, r0, r1
 8008714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008718:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800871c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008720:	fa23 f707 	lsr.w	r7, r3, r7
 8008724:	4207      	tst	r7, r0
 8008726:	d0f3      	beq.n	8008710 <floor+0x98>
 8008728:	a30f      	add	r3, pc, #60	; (adr r3, 8008768 <floor+0xf0>)
 800872a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800872e:	f7f7 fdb5 	bl	800029c <__adddf3>
 8008732:	2200      	movs	r2, #0
 8008734:	2300      	movs	r3, #0
 8008736:	f7f8 f9f7 	bl	8000b28 <__aeabi_dcmpgt>
 800873a:	2800      	cmp	r0, #0
 800873c:	d0bf      	beq.n	80086be <floor+0x46>
 800873e:	2c00      	cmp	r4, #0
 8008740:	da02      	bge.n	8008748 <floor+0xd0>
 8008742:	2e14      	cmp	r6, #20
 8008744:	d103      	bne.n	800874e <floor+0xd6>
 8008746:	3401      	adds	r4, #1
 8008748:	ea25 0507 	bic.w	r5, r5, r7
 800874c:	e7b7      	b.n	80086be <floor+0x46>
 800874e:	2301      	movs	r3, #1
 8008750:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008754:	fa03 f606 	lsl.w	r6, r3, r6
 8008758:	4435      	add	r5, r6
 800875a:	4545      	cmp	r5, r8
 800875c:	bf38      	it	cc
 800875e:	18e4      	addcc	r4, r4, r3
 8008760:	e7f2      	b.n	8008748 <floor+0xd0>
 8008762:	2500      	movs	r5, #0
 8008764:	462c      	mov	r4, r5
 8008766:	e7aa      	b.n	80086be <floor+0x46>
 8008768:	8800759c 	.word	0x8800759c
 800876c:	7e37e43c 	.word	0x7e37e43c
 8008770:	bff00000 	.word	0xbff00000
 8008774:	000fffff 	.word	0x000fffff

08008778 <nan>:
 8008778:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008780 <nan+0x8>
 800877c:	4770      	bx	lr
 800877e:	bf00      	nop
 8008780:	00000000 	.word	0x00000000
 8008784:	7ff80000 	.word	0x7ff80000

08008788 <rint>:
 8008788:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800878a:	ec51 0b10 	vmov	r0, r1, d0
 800878e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008792:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8008796:	2e13      	cmp	r6, #19
 8008798:	ee10 4a10 	vmov	r4, s0
 800879c:	460b      	mov	r3, r1
 800879e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80087a2:	dc58      	bgt.n	8008856 <rint+0xce>
 80087a4:	2e00      	cmp	r6, #0
 80087a6:	da2b      	bge.n	8008800 <rint+0x78>
 80087a8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80087ac:	4302      	orrs	r2, r0
 80087ae:	d023      	beq.n	80087f8 <rint+0x70>
 80087b0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80087b4:	4302      	orrs	r2, r0
 80087b6:	4254      	negs	r4, r2
 80087b8:	4314      	orrs	r4, r2
 80087ba:	0c4b      	lsrs	r3, r1, #17
 80087bc:	0b24      	lsrs	r4, r4, #12
 80087be:	045b      	lsls	r3, r3, #17
 80087c0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80087c4:	ea44 0103 	orr.w	r1, r4, r3
 80087c8:	4b32      	ldr	r3, [pc, #200]	; (8008894 <rint+0x10c>)
 80087ca:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80087ce:	e9d3 6700 	ldrd	r6, r7, [r3]
 80087d2:	4602      	mov	r2, r0
 80087d4:	460b      	mov	r3, r1
 80087d6:	4630      	mov	r0, r6
 80087d8:	4639      	mov	r1, r7
 80087da:	f7f7 fd5f 	bl	800029c <__adddf3>
 80087de:	e9cd 0100 	strd	r0, r1, [sp]
 80087e2:	463b      	mov	r3, r7
 80087e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80087e8:	4632      	mov	r2, r6
 80087ea:	f7f7 fd55 	bl	8000298 <__aeabi_dsub>
 80087ee:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80087f2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80087f6:	4639      	mov	r1, r7
 80087f8:	ec41 0b10 	vmov	d0, r0, r1
 80087fc:	b003      	add	sp, #12
 80087fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008800:	4a25      	ldr	r2, [pc, #148]	; (8008898 <rint+0x110>)
 8008802:	4132      	asrs	r2, r6
 8008804:	ea01 0702 	and.w	r7, r1, r2
 8008808:	4307      	orrs	r7, r0
 800880a:	d0f5      	beq.n	80087f8 <rint+0x70>
 800880c:	0851      	lsrs	r1, r2, #1
 800880e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8008812:	4314      	orrs	r4, r2
 8008814:	d00c      	beq.n	8008830 <rint+0xa8>
 8008816:	ea23 0201 	bic.w	r2, r3, r1
 800881a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800881e:	2e13      	cmp	r6, #19
 8008820:	fa43 f606 	asr.w	r6, r3, r6
 8008824:	bf0c      	ite	eq
 8008826:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800882a:	2400      	movne	r4, #0
 800882c:	ea42 0306 	orr.w	r3, r2, r6
 8008830:	4918      	ldr	r1, [pc, #96]	; (8008894 <rint+0x10c>)
 8008832:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8008836:	4622      	mov	r2, r4
 8008838:	e9d5 4500 	ldrd	r4, r5, [r5]
 800883c:	4620      	mov	r0, r4
 800883e:	4629      	mov	r1, r5
 8008840:	f7f7 fd2c 	bl	800029c <__adddf3>
 8008844:	e9cd 0100 	strd	r0, r1, [sp]
 8008848:	e9dd 0100 	ldrd	r0, r1, [sp]
 800884c:	4622      	mov	r2, r4
 800884e:	462b      	mov	r3, r5
 8008850:	f7f7 fd22 	bl	8000298 <__aeabi_dsub>
 8008854:	e7d0      	b.n	80087f8 <rint+0x70>
 8008856:	2e33      	cmp	r6, #51	; 0x33
 8008858:	dd07      	ble.n	800886a <rint+0xe2>
 800885a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800885e:	d1cb      	bne.n	80087f8 <rint+0x70>
 8008860:	ee10 2a10 	vmov	r2, s0
 8008864:	f7f7 fd1a 	bl	800029c <__adddf3>
 8008868:	e7c6      	b.n	80087f8 <rint+0x70>
 800886a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800886e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8008872:	40d6      	lsrs	r6, r2
 8008874:	4230      	tst	r0, r6
 8008876:	d0bf      	beq.n	80087f8 <rint+0x70>
 8008878:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800887c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8008880:	bf1f      	itttt	ne
 8008882:	ea24 0101 	bicne.w	r1, r4, r1
 8008886:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800888a:	fa44 f202 	asrne.w	r2, r4, r2
 800888e:	ea41 0402 	orrne.w	r4, r1, r2
 8008892:	e7cd      	b.n	8008830 <rint+0xa8>
 8008894:	08008c38 	.word	0x08008c38
 8008898:	000fffff 	.word	0x000fffff
 800889c:	00000000 	.word	0x00000000

080088a0 <scalbn>:
 80088a0:	b570      	push	{r4, r5, r6, lr}
 80088a2:	ec55 4b10 	vmov	r4, r5, d0
 80088a6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80088aa:	4606      	mov	r6, r0
 80088ac:	462b      	mov	r3, r5
 80088ae:	b99a      	cbnz	r2, 80088d8 <scalbn+0x38>
 80088b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80088b4:	4323      	orrs	r3, r4
 80088b6:	d036      	beq.n	8008926 <scalbn+0x86>
 80088b8:	4b39      	ldr	r3, [pc, #228]	; (80089a0 <scalbn+0x100>)
 80088ba:	4629      	mov	r1, r5
 80088bc:	ee10 0a10 	vmov	r0, s0
 80088c0:	2200      	movs	r2, #0
 80088c2:	f7f7 fea1 	bl	8000608 <__aeabi_dmul>
 80088c6:	4b37      	ldr	r3, [pc, #220]	; (80089a4 <scalbn+0x104>)
 80088c8:	429e      	cmp	r6, r3
 80088ca:	4604      	mov	r4, r0
 80088cc:	460d      	mov	r5, r1
 80088ce:	da10      	bge.n	80088f2 <scalbn+0x52>
 80088d0:	a32b      	add	r3, pc, #172	; (adr r3, 8008980 <scalbn+0xe0>)
 80088d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d6:	e03a      	b.n	800894e <scalbn+0xae>
 80088d8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80088dc:	428a      	cmp	r2, r1
 80088de:	d10c      	bne.n	80088fa <scalbn+0x5a>
 80088e0:	ee10 2a10 	vmov	r2, s0
 80088e4:	4620      	mov	r0, r4
 80088e6:	4629      	mov	r1, r5
 80088e8:	f7f7 fcd8 	bl	800029c <__adddf3>
 80088ec:	4604      	mov	r4, r0
 80088ee:	460d      	mov	r5, r1
 80088f0:	e019      	b.n	8008926 <scalbn+0x86>
 80088f2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80088f6:	460b      	mov	r3, r1
 80088f8:	3a36      	subs	r2, #54	; 0x36
 80088fa:	4432      	add	r2, r6
 80088fc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008900:	428a      	cmp	r2, r1
 8008902:	dd08      	ble.n	8008916 <scalbn+0x76>
 8008904:	2d00      	cmp	r5, #0
 8008906:	a120      	add	r1, pc, #128	; (adr r1, 8008988 <scalbn+0xe8>)
 8008908:	e9d1 0100 	ldrd	r0, r1, [r1]
 800890c:	da1c      	bge.n	8008948 <scalbn+0xa8>
 800890e:	a120      	add	r1, pc, #128	; (adr r1, 8008990 <scalbn+0xf0>)
 8008910:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008914:	e018      	b.n	8008948 <scalbn+0xa8>
 8008916:	2a00      	cmp	r2, #0
 8008918:	dd08      	ble.n	800892c <scalbn+0x8c>
 800891a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800891e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008922:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008926:	ec45 4b10 	vmov	d0, r4, r5
 800892a:	bd70      	pop	{r4, r5, r6, pc}
 800892c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008930:	da19      	bge.n	8008966 <scalbn+0xc6>
 8008932:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008936:	429e      	cmp	r6, r3
 8008938:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800893c:	dd0a      	ble.n	8008954 <scalbn+0xb4>
 800893e:	a112      	add	r1, pc, #72	; (adr r1, 8008988 <scalbn+0xe8>)
 8008940:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d1e2      	bne.n	800890e <scalbn+0x6e>
 8008948:	a30f      	add	r3, pc, #60	; (adr r3, 8008988 <scalbn+0xe8>)
 800894a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800894e:	f7f7 fe5b 	bl	8000608 <__aeabi_dmul>
 8008952:	e7cb      	b.n	80088ec <scalbn+0x4c>
 8008954:	a10a      	add	r1, pc, #40	; (adr r1, 8008980 <scalbn+0xe0>)
 8008956:	e9d1 0100 	ldrd	r0, r1, [r1]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d0b8      	beq.n	80088d0 <scalbn+0x30>
 800895e:	a10e      	add	r1, pc, #56	; (adr r1, 8008998 <scalbn+0xf8>)
 8008960:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008964:	e7b4      	b.n	80088d0 <scalbn+0x30>
 8008966:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800896a:	3236      	adds	r2, #54	; 0x36
 800896c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008970:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008974:	4620      	mov	r0, r4
 8008976:	4b0c      	ldr	r3, [pc, #48]	; (80089a8 <scalbn+0x108>)
 8008978:	2200      	movs	r2, #0
 800897a:	e7e8      	b.n	800894e <scalbn+0xae>
 800897c:	f3af 8000 	nop.w
 8008980:	c2f8f359 	.word	0xc2f8f359
 8008984:	01a56e1f 	.word	0x01a56e1f
 8008988:	8800759c 	.word	0x8800759c
 800898c:	7e37e43c 	.word	0x7e37e43c
 8008990:	8800759c 	.word	0x8800759c
 8008994:	fe37e43c 	.word	0xfe37e43c
 8008998:	c2f8f359 	.word	0xc2f8f359
 800899c:	81a56e1f 	.word	0x81a56e1f
 80089a0:	43500000 	.word	0x43500000
 80089a4:	ffff3cb0 	.word	0xffff3cb0
 80089a8:	3c900000 	.word	0x3c900000

080089ac <_init>:
 80089ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ae:	bf00      	nop
 80089b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089b2:	bc08      	pop	{r3}
 80089b4:	469e      	mov	lr, r3
 80089b6:	4770      	bx	lr

080089b8 <_fini>:
 80089b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ba:	bf00      	nop
 80089bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089be:	bc08      	pop	{r3}
 80089c0:	469e      	mov	lr, r3
 80089c2:	4770      	bx	lr
